!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
/	SearchComplete.vim	/^noremap \/ :call SearchCompleteStart()<CR>\/$/;"	m
<Leader>di	DrawItPlugin.vim	/^  map <unique> <Leader>di <Plug>StartDrawIt$/;"	m
<Leader>ds	DrawItPlugin.vim	/^  map <unique> <Leader>ds <Plug>StopDrawIt$/;"	m
<Leader>rwp	cecutil.vim	/^ map <unique> <Leader>rwp <Plug>RestoreWinPosn$/;"	m
<Leader>swp	cecutil.vim	/^ map <unique> <Leader>swp <Plug>SaveWinPosn$/;"	m
<Plug>ManPageView	:<c-u>call	manpageviewPlugin.vim	/^nmap <silent> <script> <Plug>ManPageView	:<c-u>call manpageview#ManPageView(1,v:count,expand("<cword>"))<CR>$/;"	m
<Plug>NetrwBrowseX	netrwPlugin.vim	/^ nno <silent> <Plug>NetrwBrowseX :call netrw#NetrwBrowseX(expand("<cWORD>"),0)<cr>$/;"	m
<Plug>RestoreWinPosn	:call	cecutil.vim	/^nmap <silent> <Plug>RestoreWinPosn	:call RestoreWinPosn()<CR>$/;"	m
<Plug>SaveWinPosn		:call	cecutil.vim	/^nmap <silent> <Plug>SaveWinPosn		:call SaveWinPosn()<CR>$/;"	m
<Plug>StartDrawIt	DrawItPlugin.vim	/^map <silent> <Plug>StartDrawIt  :set lz<cr>:call DrawIt#StartDrawIt()<cr>:set nolz<cr>$/;"	m
<Plug>StopDrawIt	DrawItPlugin.vim	/^map <silent> <Plug>StopDrawIt :set lz<cr>:call DrawIt#StopDrawIt()<cr>:set nolz<cr>$/;"	m
<Plug>VCSAdd	vcscommand.vim	/^nnoremap <silent> <Plug>VCSAdd :VCSAdd<CR>$/;"	m
<Plug>VCSAnnotate	vcscommand.vim	/^nnoremap <silent> <Plug>VCSAnnotate :VCSAnnotate<CR>$/;"	m
<Plug>VCSClearAndGotoOriginal	vcscommand.vim	/^nnoremap <silent> <Plug>VCSClearAndGotoOriginal :VCSGotoOriginal!<CR>$/;"	m
<Plug>VCSCommit	vcscommand.vim	/^nnoremap <silent> <Plug>VCSCommit :VCSCommit<CR>$/;"	m
<Plug>VCSDelete	vcscommand.vim	/^nnoremap <silent> <Plug>VCSDelete :VCSDelete<CR>$/;"	m
<Plug>VCSDiff	vcscommand.vim	/^nnoremap <silent> <Plug>VCSDiff :VCSDiff<CR>$/;"	m
<Plug>VCSGotoOriginal	vcscommand.vim	/^nnoremap <silent> <Plug>VCSGotoOriginal :VCSGotoOriginal<CR>$/;"	m
<Plug>VCSInfo	vcscommand.vim	/^nnoremap <silent> <Plug>VCSInfo :VCSInfo<CR>$/;"	m
<Plug>VCSLock	vcscommand.vim	/^nnoremap <silent> <Plug>VCSLock :VCSLock<CR>$/;"	m
<Plug>VCSLog	vcscommand.vim	/^nnoremap <silent> <Plug>VCSLog :VCSLog<CR>$/;"	m
<Plug>VCSRevert	vcscommand.vim	/^nnoremap <silent> <Plug>VCSRevert :VCSRevert<CR>$/;"	m
<Plug>VCSReview	vcscommand.vim	/^nnoremap <silent> <Plug>VCSReview :VCSReview<CR>$/;"	m
<Plug>VCSSplitAnnotate	vcscommand.vim	/^nnoremap <silent> <Plug>VCSSplitAnnotate :VCSAnnotate!<CR>$/;"	m
<Plug>VCSStatus	vcscommand.vim	/^nnoremap <silent> <Plug>VCSStatus :VCSStatus<CR>$/;"	m
<Plug>VCSUnlock	vcscommand.vim	/^nnoremap <silent> <Plug>VCSUnlock :VCSUnlock<CR>$/;"	m
<Plug>VCSUpdate	vcscommand.vim	/^nnoremap <silent> <Plug>VCSUpdate :VCSUpdate<CR>$/;"	m
<Plug>VCSVimDiff	vcscommand.vim	/^nnoremap <silent> <Plug>VCSVimDiff :VCSVimDiff<CR>$/;"	m
<SID>xx	taglist.vim	/^    map <SID>xx <SID>xx$/;"	m
AuCmdLibFile	libviewPlugin.vim	/^augroup AuCmdLibFile$/;"	a
BREAKPOINT_GROUP	VimPdb.py	/^	BREAKPOINT_GROUP = 'PdbBreakpoint'$/;"	v	class:VimPdb
BREAKPOINT_TYPES	VimPdb.py	/^	BREAKPOINT_TYPES = [BREAKPOINT_TYPE_REGULAR, BREAKPOINT_TYPE_CONDITIONAL, BREAKPOINT_TYPE_TEMPORARY]$/;"	v	class:PdbIDE
BREAKPOINT_TYPE_CONDITIONAL	VimPdb.py	/^	BREAKPOINT_TYPE_CONDITIONAL = 'conditional'$/;"	v	class:PdbIDE
BREAKPOINT_TYPE_REGULAR	VimPdb.py	/^	BREAKPOINT_TYPE_REGULAR = 'regular'$/;"	v	class:PdbIDE
BREAKPOINT_TYPE_TEMPORARY	VimPdb.py	/^	BREAKPOINT_TYPE_TEMPORARY = 'temporary'$/;"	v	class:PdbIDE
Blame	fugitive.vim	/^function! s:Blame(bang,line1,line2,count,args) abort$/;"	f
BlameJump	fugitive.vim	/^function! s:BlameJump(suffix) abort$/;"	f
BlameSyntax	fugitive.vim	/^function! s:BlameSyntax() abort$/;"	f
Bookmark.AddBookmark	NERD_tree.vim	/^function! s:Bookmark.AddBookmark(name, path)$/;"	f
Bookmark.BookmarkExistsFor	NERD_tree.vim	/^function! s:Bookmark.BookmarkExistsFor(name)$/;"	f
Bookmark.BookmarkFor	NERD_tree.vim	/^function! s:Bookmark.BookmarkFor(name)$/;"	f
Bookmark.BookmarkNames	NERD_tree.vim	/^function! s:Bookmark.BookmarkNames()$/;"	f
Bookmark.Bookmarks	NERD_tree.vim	/^function! s:Bookmark.Bookmarks()$/;"	f
Bookmark.CacheBookmarks	NERD_tree.vim	/^function! s:Bookmark.CacheBookmarks(silent)$/;"	f
Bookmark.ClearAll	NERD_tree.vim	/^function! s:Bookmark.ClearAll()$/;"	f
Bookmark.GetNodeForName	NERD_tree.vim	/^function! s:Bookmark.GetNodeForName(name, searchFromAbsoluteRoot)$/;"	f
Bookmark.InvalidBookmarks	NERD_tree.vim	/^function! s:Bookmark.InvalidBookmarks()$/;"	f
Bookmark.New	NERD_tree.vim	/^function! s:Bookmark.New(name, path)$/;"	f
Bookmark.Sort	NERD_tree.vim	/^function! s:Bookmark.Sort()$/;"	f
Bookmark.ToRoot	NERD_tree.vim	/^function! s:Bookmark.ToRoot(name)$/;"	f
Bookmark.Write	NERD_tree.vim	/^function! s:Bookmark.Write()$/;"	f
Bookmark.compareTo	NERD_tree.vim	/^function! s:Bookmark.compareTo(otherbookmark)$/;"	f
Bookmark.delete	NERD_tree.vim	/^function! s:Bookmark.delete()$/;"	f
Bookmark.getNode	NERD_tree.vim	/^function! s:Bookmark.getNode(searchFromAbsoluteRoot)$/;"	f
Bookmark.mustExist	NERD_tree.vim	/^function! s:Bookmark.mustExist()$/;"	f
Bookmark.setPath	NERD_tree.vim	/^function! s:Bookmark.setPath(path)$/;"	f
Bookmark.str	NERD_tree.vim	/^function! s:Bookmark.str()$/;"	f
Bookmark.toRoot	NERD_tree.vim	/^function! s:Bookmark.toRoot()$/;"	f
Bookmark.validate	NERD_tree.vim	/^function! s:Bookmark.validate()$/;"	f
BufReadIndex	fugitive.vim	/^function! s:BufReadIndex()$/;"	f
BufReadIndexFile	fugitive.vim	/^function! s:BufReadIndexFile()$/;"	f
BufReadObject	fugitive.vim	/^function! s:BufReadObject()$/;"	f
BufWriteIndexFile	fugitive.vim	/^function! s:BufWriteIndexFile()$/;"	f
CONDITIONAL_BREAKPOINT_GROUP	VimPdb.py	/^	CONDITIONAL_BREAKPOINT_GROUP = 'PdbConditionalBreakpoint'$/;"	v	class:VimPdb
CURRENT_LINE_GROUP	VimPdb.py	/^	CURRENT_LINE_GROUP = 'PdbCurrentLineTemp'$/;"	v	class:VimPdb
CVSEdit	vcscvs.vim	/^com! CVSEdit call s:CVSEdit()$/;"	c
CVSEdit	vcscvs.vim	/^function! s:CVSEdit()$/;"	f
CVSEditors	vcscvs.vim	/^com! CVSEditors call s:CVSEditors()$/;"	c
CVSEditors	vcscvs.vim	/^function! s:CVSEditors()$/;"	f
CVSUnedit	vcscvs.vim	/^com! CVSUnedit call s:CVSUnedit()$/;"	c
CVSUnedit	vcscvs.vim	/^function! s:CVSUnedit()$/;"	f
CVSWatch	vcscvs.vim	/^com! -nargs=1 CVSWatch call s:CVSWatch(<f-args>)$/;"	c
CVSWatch	vcscvs.vim	/^function! s:CVSWatch(onoff)$/;"	f
CVSWatchAdd	vcscvs.vim	/^com! CVSWatchAdd call s:CVSWatch('add')$/;"	c
CVSWatchOff	vcscvs.vim	/^com! CVSWatchOff call s:CVSWatch('off')$/;"	c
CVSWatchOn	vcscvs.vim	/^com! CVSWatchOn call s:CVSWatch('on')$/;"	c
CVSWatchRemove	vcscvs.vim	/^com! CVSWatchRemove call s:CVSWatch('remove')$/;"	c
CVSWatchers	vcscvs.vim	/^com! CVSWatchers call s:CVSWatchers()$/;"	c
CVSWatchers	vcscvs.vim	/^function! s:CVSWatchers()$/;"	f
CloseAllResultBuffers	vcscommand.vim	/^function! s:CloseAllResultBuffers()$/;"	f
Commit	fugitive.vim	/^function! s:Commit(args) abort$/;"	f
CommitComplete	fugitive.vim	/^function! s:CommitComplete(A,L,P) abort$/;"	f
CreateMapping	vcscommand.vim	/^function! s:CreateMapping(shortcut, expansion, display)$/;"	f
DIstart	DrawItPlugin.vim	/^com! -nargs=0 DIstart set lz|call DrawIt#StartDrawIt()|set nolz$/;"	c
DIstop	DrawItPlugin.vim	/^com! -nargs=0 DIstop set lz|call DrawIt#StopDrawIt()|set nolz$/;"	c
DM	cecutil.vim	/^com! -bar -nargs=1 DM	call DestroyMark(<q-args>)$/;"	c
DestroyMark	cecutil.vim	/^fun! DestroyMark(markname)$/;"	f
Detect	fugitive.vim	/^function! s:Detect(path)$/;"	f
Diff	fugitive.vim	/^function! s:Diff(bang,...) abort$/;"	f
DirComplete	fugitive.vim	/^function! s:DirComplete(A,L,P) abort$/;"	f
DoCommand	vcsbzr.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoCommand	vcscvs.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoCommand	vcsgit.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoCommand	vcshg.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoCommand	vcssvk.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DoCommand	vcssvn.vim	/^function! s:DoCommand(cmd, cmdName, statusText, options)$/;"	f
DrawIt	DrawItPlugin.vim	/^com! -nargs=0 -bang DrawIt set lz|if <bang>0|call DrawIt#StopDrawIt()|else|call DrawIt#StartDrawIt()|endif|set nolz$/;"	c
Edit	fugitive.vim	/^function! s:Edit(cmd,...) abort$/;"	f
EditComplete	fugitive.vim	/^function! s:EditComplete(A,L,P) abort$/;"	f
EditFile	vcscommand.vim	/^function! s:EditFile(command, originalBuffer, statusText)$/;"	f
Executable	vcsbzr.vim	/^function! s:Executable()$/;"	f
Executable	vcscvs.vim	/^function! s:Executable()$/;"	f
Executable	vcsgit.vim	/^function! s:Executable()$/;"	f
Executable	vcshg.vim	/^function! s:Executable()$/;"	f
Executable	vcssvk.vim	/^function! s:Executable()$/;"	f
Executable	vcssvn.vim	/^function! s:Executable()$/;"	f
ExecuteExtensionMapping	vcscommand.vim	/^function! s:ExecuteExtensionMapping(mapping)$/;"	f
ExecuteInTree	fugitive.vim	/^function! s:ExecuteInTree(cmd) abort$/;"	f
ExecuteVCSCommand	vcscommand.vim	/^function! s:ExecuteVCSCommand(command, argList)$/;"	f
Explore	netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Explore		call netrw#Explore(<count>,0,0+<bang>0,<q-args>)$/;"	c
ExtractGitDir	fugitive.vim	/^function! s:ExtractGitDir(path) abort$/;"	f
FileExplorer	netrwPlugin.vim	/^augroup FileExplorer$/;"	a
FileRead	fugitive.vim	/^function! s:FileRead()$/;"	f
FinishCommit	fugitive.vim	/^function! s:FinishCommit()$/;"	f
GF	fugitive.vim	/^function! s:GF(mode) abort$/;"	f
GenerateResultBufferName	vcscommand.vim	/^function! s:GenerateResultBufferName(command, originalBuffer, vcsType, statusText)$/;"	f
GenerateResultBufferNameWithExtension	vcscommand.vim	/^function! s:GenerateResultBufferNameWithExtension(command, originalBuffer, vcsType, statusText)$/;"	f
GetRevision	vcscvs.vim	/^function! s:GetRevision()$/;"	f
Git	fugitive.vim	/^function! s:Git(bang,cmd) abort$/;"	f
GitComplete	fugitive.vim	/^function! s:GitComplete(A,L,P) abort$/;"	f
GoWinbufnr	cecutil.vim	/^fun! GoWinbufnr(bufnum)$/;"	f
Grep	fugitive.vim	/^function! s:Grep(bang,arg) abort$/;"	f
HEMan	manpageviewPlugin.vim	/^com! -nargs=* -count=0	HEMan let g:manpageview_winopen="hsplit="|call manpageview#ManPageView(0,<count>,<f-args>)$/;"	c
HMan	manpageviewPlugin.vim	/^com! -nargs=* -count=0	HMan  let g:manpageview_winopen="hsplit" |call manpageview#ManPageView(0,<count>,<f-args>)$/;"	c
Hexmode	hex.vim	/^command -bar Hexmode call ToggleHex()$/;"	c
Hexplore	netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Hexplore	call netrw#Explore(<count>,1,2+<bang>0,<q-args>)$/;"	c
JumpInit	fugitive.vim	/^function! s:JumpInit() abort$/;"	f
K	manpageviewPlugin.vim	/^  nmap <unique> K <Plug>ManPageView$/;"	m
LocalBrowse	netrwPlugin.vim	/^fun! s:LocalBrowse(dirname)$/;"	f
Log	fugitive.vim	/^function! s:Log(cmd,...)$/;"	f
MESSAGE_ALREADY_AT_NEWEST_FRAME	VimPdb.py	/^	MESSAGE_ALREADY_AT_NEWEST_FRAME = 'Error: Already at newest stack frame'$/;"	v	class:PdbIDE
MESSAGE_ALREADY_AT_OLDEST_FRAME	VimPdb.py	/^	MESSAGE_ALREADY_AT_OLDEST_FRAME = 'Error: Already at oldest stack frame'$/;"	v	class:PdbIDE
MESSAGE_BREAKPOINT_CONDITION	VimPdb.py	/^	MESSAGE_BREAKPOINT_CONDITION = 'Breakpoint Condition: %s'$/;"	v	class:PdbIDE
MESSAGE_JUMP_ONLY_AT_BOTTOM_FRAME	VimPdb.py	/^	MESSAGE_JUMP_ONLY_AT_BOTTOM_FRAME = 'Error: Can only jump to line within the bottom stack frame'$/;"	v	class:PdbIDE
MESSAGE_JUMP_ONLY_IN_CURRENT_FILE	VimPdb.py	/^	MESSAGE_JUMP_ONLY_IN_CURRENT_FILE = 'Error: Can only jump to line within the currently debugged file'$/;"	v	class:PdbIDE
MESSAGE_NOT_IN_DEBUG_MODE	VimPdb.py	/^	MESSAGE_NOT_IN_DEBUG_MODE = 'Error: Debugging not started yet'$/;"	v	class:PdbIDE
MESSAGE_NO_CONDITIONAL_BREAKPOINT	VimPdb.py	/^	MESSAGE_NO_CONDITIONAL_BREAKPOINT = 'Error: No conditional breakpoint in current line'$/;"	v	class:PdbIDE
MESSAGE_PROGRAM_ENDED	VimPdb.py	/^	MESSAGE_PROGRAM_ENDED = 'Program ended. Restart debug to rerun program'$/;"	v	class:PdbIDE
MESSAGE_PROGRAM_ENDED_UNCAUGHT_EXCEPTION	VimPdb.py	/^	MESSAGE_PROGRAM_ENDED_UNCAUGHT_EXCEPTION = 'Program ended due to an uncaught exception.'$/;"	v	class:PdbIDE
MESSAGE_PROGRAM_ENDED_VIA_SYS_EXIT	VimPdb.py	/^	MESSAGE_PROGRAM_ENDED_VIA_SYS_EXIT = 'Program ended via sys.exit(). Exit status: %d'$/;"	v	class:PdbIDE
MESSAGE_STARTING_DEBUG	VimPdb.py	/^	MESSAGE_STARTING_DEBUG = 'Starting debugging...'$/;"	v	class:PdbIDE
Man	manpageviewPlugin.vim	/^com! -nargs=* -count=0	Man   call manpageview#ManPageView(0,<count>,<f-args>)$/;"	c
MarkOrigBufferForSetup	vcscommand.vim	/^function! s:MarkOrigBufferForSetup(buffer)$/;"	f
Move	fugitive.vim	/^function! s:Move(force,destination)$/;"	f
MoveComplete	fugitive.vim	/^function! s:MoveComplete(A,L,P)$/;"	f
NERDTree	NERD_tree.vim	/^augroup NERDTree$/;"	a
NERDTree	NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTree :call s:initNerdTree('<args>')$/;"	c
NERDTreeClose	NERD_tree.vim	/^command! -n=0 -bar NERDTreeClose :call s:closeTreeIfOpen()$/;"	c
NERDTreeFromBookmark	NERD_tree.vim	/^command! -n=1 -complete=customlist,s:completeBookmarks -bar NERDTreeFromBookmark call s:initNerdTree('<args>')$/;"	c
NERDTreeGetCurrentNode	NERD_tree.vim	/^function! NERDTreeGetCurrentNode()$/;"	f
NERDTreeGetCurrentPath	NERD_tree.vim	/^function! NERDTreeGetCurrentPath()$/;"	f
NERDTreeHijackNetrw	NERD_tree.vim	/^    augroup NERDTreeHijackNetrw$/;"	a
NERDTreeMirror	NERD_tree.vim	/^command! -n=0 -bar NERDTreeMirror call s:initNerdTreeMirror()$/;"	c
NERDTreeToggle	NERD_tree.vim	/^command! -n=? -complete=dir -bar NERDTreeToggle :call s:toggle('<args>')$/;"	c
NetReadFixup	netrwPlugin.vim	/^ fun! NetReadFixup(method, line1, line2)$/;"	f
NetUserPass	netrwPlugin.vim	/^com! -nargs=*		NetUserPass	call NetUserPass(<f-args>)$/;"	c
NetUserPass	netrwPlugin.vim	/^fun! NetUserPass(...)$/;"	f
NetrwClean	netrwPlugin.vim	/^com! -bang	NetrwClean	call netrw#NetrwClean(<bang>0)$/;"	c
NetrwSettings	netrwPlugin.vim	/^com! -nargs=0	NetrwSettings	call netrwSettings#NetrwSettings()$/;"	c
NetrwStatusLine	netrwPlugin.vim	/^fun! NetrwStatusLine()$/;"	f
Network	netrwPlugin.vim	/^augroup Network$/;"	a
Nexplore	netrwPlugin.vim	/^com! -nargs=* -bar -bang			Nexplore	call netrw#Explore(-1,0,0,<q-args>)$/;"	c
Nread	netrwPlugin.vim	/^com! -count=1 -nargs=*	Nread		call netrw#NetrwSavePosn()<bar>call netrw#NetRead(<count>,<f-args>)<bar>call netrw#NetrwRestorePosn()$/;"	c
Nsource	netrwPlugin.vim	/^com! -nargs=*	        Nsource		call netrw#NetrwSavePosn()<bar>call netrw#NetSource(<f-args>)<bar>call netrw#NetrwRestorePosn()$/;"	c
Nwrite	netrwPlugin.vim	/^com! -range=% -nargs=*	Nwrite		call netrw#NetrwSavePosn()<bar><line1>,<line2>call netrw#NetWrite(<f-args>)<bar>call netrw#NetrwRestorePosn()$/;"	c
OMan	manpageviewPlugin.vim	/^com! -nargs=* -count=0	OMan  let g:manpageview_winopen="only"   |call manpageview#ManPageView(0,<count>,<f-args>)$/;"	c
OverrideOption	vcscommand.vim	/^function! s:OverrideOption(option, ...)$/;"	f
PAUSE_DEBUG_WAIT_TIME	VimPdb.py	/^	PAUSE_DEBUG_WAIT_TIME = 0.2$/;"	v	class:PdbIDE
Path.AbsolutePathFor	NERD_tree.vim	/^function! s:Path.AbsolutePathFor(str)$/;"	f
Path.CopyingSupported	NERD_tree.vim	/^function! s:Path.CopyingSupported()$/;"	f
Path.Create	NERD_tree.vim	/^function! s:Path.Create(fullpath)$/;"	f
Path.JoinPathStrings	NERD_tree.vim	/^function! s:Path.JoinPathStrings(...)$/;"	f
Path.New	NERD_tree.vim	/^function! s:Path.New(path)$/;"	f
Path.WinToUnixPath	NERD_tree.vim	/^function! s:Path.WinToUnixPath(pathstr)$/;"	f
Path.bookmarkNames	NERD_tree.vim	/^function! s:Path.bookmarkNames()$/;"	f
Path.cacheDisplayString	NERD_tree.vim	/^function! s:Path.cacheDisplayString()$/;"	f
Path.changeToDir	NERD_tree.vim	/^function! s:Path.changeToDir()$/;"	f
Path.compareTo	NERD_tree.vim	/^function! s:Path.compareTo(path)$/;"	f
Path.copy	NERD_tree.vim	/^function! s:Path.copy(dest)$/;"	f
Path.copyingWillOverwrite	NERD_tree.vim	/^function! s:Path.copyingWillOverwrite(dest)$/;"	f
Path.delete	NERD_tree.vim	/^function! s:Path.delete()$/;"	f
Path.equals	NERD_tree.vim	/^function! s:Path.equals(path)$/;"	f
Path.exists	NERD_tree.vim	/^function! s:Path.exists()$/;"	f
Path.extractDriveLetter	NERD_tree.vim	/^function! s:Path.extractDriveLetter(fullpath)$/;"	f
Path.getDir	NERD_tree.vim	/^function! s:Path.getDir()$/;"	f
Path.getLastPathComponent	NERD_tree.vim	/^function! s:Path.getLastPathComponent(dirSlash)$/;"	f
Path.getParent	NERD_tree.vim	/^function! s:Path.getParent()$/;"	f
Path.getPathTrunk	NERD_tree.vim	/^function! s:Path.getPathTrunk()$/;"	f
Path.getSortOrderIndex	NERD_tree.vim	/^function! s:Path.getSortOrderIndex()$/;"	f
Path.ignore	NERD_tree.vim	/^function! s:Path.ignore()$/;"	f
Path.readInfoFromDisk	NERD_tree.vim	/^function! s:Path.readInfoFromDisk(fullpath)$/;"	f
Path.refresh	NERD_tree.vim	/^function! s:Path.refresh()$/;"	f
Path.rename	NERD_tree.vim	/^function! s:Path.rename(newPath)$/;"	f
Path.str	NERD_tree.vim	/^function! s:Path.str(esc)$/;"	f
Path.strAbs	NERD_tree.vim	/^function! s:Path.strAbs()$/;"	f
Path.strDisplay	NERD_tree.vim	/^function! s:Path.strDisplay()$/;"	f
Path.strForCd	NERD_tree.vim	/^function! s:Path.strForCd()$/;"	f
Path.strForEditCmd	NERD_tree.vim	/^function! s:Path.strForEditCmd()$/;"	f
Path.strForGlob	NERD_tree.vim	/^function! s:Path.strForGlob()$/;"	f
Path.strForOS	NERD_tree.vim	/^function! s:Path.strForOS(esc)$/;"	f
Path.strTrunk	NERD_tree.vim	/^function! s:Path.strTrunk()$/;"	f
PdbBuffEnter	VimPdb.vim	/^function! PdbBuffEnter()$/;"	f
PdbBuffLeave	VimPdb.vim	/^function! PdbBuffLeave()$/;"	f
PdbClearAllBreakpoints	VimPdb.vim	/^function PdbClearAllBreakpoints()$/;"	f
PdbClearAllBreakpointsInCurrentFile	VimPdb.vim	/^function PdbClearAllBreakpointsInCurrentFile()$/;"	f
PdbContinue	VimPdb.vim	/^function! PdbContinue()$/;"	f
PdbContinueUntilReturn	VimPdb.vim	/^function! PdbContinueUntilReturn()$/;"	f
PdbEvalCurrentWORD	VimPdb.vim	/^function! PdbEvalCurrentWORD()$/;"	f
PdbEvalCurrentWord	VimPdb.vim	/^function! PdbEvalCurrentWord()$/;"	f
PdbEvalExpression	VimPdb.vim	/^function! PdbEvalExpression()$/;"	f
PdbExecStatement	VimPdb.vim	/^function! PdbExecStatement()$/;"	f
PdbIDE	VimPdb.py	/^class PdbIDE(bdb.Bdb):$/;"	c	inherits:bdb.Bdb
PdbInitialize	VimPdb.vim	/^function! PdbInitialize()$/;"	f
PdbJumpToCurrentLine	VimPdb.vim	/^function! PdbJumpToCurrentLine()$/;"	f
PdbLoadSavedBreakpoints	VimPdb.vim	/^function! PdbLoadSavedBreakpoints(...)$/;"	f
PdbMapKeyboard	VimPdb.vim	/^function! PdbMapKeyboard()$/;"	f
PdbMoveDownInStackFrame	VimPdb.vim	/^function! PdbMoveDownInStackFrame()$/;"	f
PdbMoveUpInStackFrame	VimPdb.vim	/^function! PdbMoveUpInStackFrame()$/;"	f
PdbPrintBreakpointConditionOnCurrentLine	VimPdb.vim	/^function! PdbPrintBreakpointConditionOnCurrentLine()$/;"	f
PdbPrintStackTrace	VimPdb.vim	/^function! PdbPrintStackTrace()$/;"	f
PdbRestartDebug	VimPdb.vim	/^function! PdbRestartDebug()$/;"	f
PdbSaveSavedBreakpoints	VimPdb.vim	/^function! PdbSaveSavedBreakpoints(...)$/;"	f
PdbSetFocusToCurrentDebugLine	VimPdb.vim	/^function! PdbSetFocusToCurrentDebugLine()$/;"	f
PdbStartDebug	VimPdb.vim	/^function! PdbStartDebug(stop_immediately, args)$/;"	f
PdbStartDebugWithArguments	VimPdb.vim	/^function! PdbStartDebugWithArguments()$/;"	f
PdbStepInto	VimPdb.vim	/^function! PdbStepInto()$/;"	f
PdbStepOver	VimPdb.vim	/^function! PdbStepOver()$/;"	f
PdbStopDebug	VimPdb.vim	/^function! PdbStopDebug()$/;"	f
PdbToggleBreakpointOnCurrentLine	VimPdb.vim	/^function! PdbToggleBreakpointOnCurrentLine()$/;"	f
PdbToggleConditionalBreakpointOnCurrentLine	VimPdb.vim	/^function! PdbToggleConditionalBreakpointOnCurrentLine()$/;"	f
PdbToggleTemporaryBreakpointOnCurrentLine	VimPdb.vim	/^function! PdbToggleTemporaryBreakpointOnCurrentLine()$/;"	f
Pexplore	netrwPlugin.vim	/^com! -nargs=* -bar -bang			Pexplore	call netrw#Explore(-2,0,0,<q-args>)$/;"	c
QArgSplitter	cecutil.vim	/^fun! QArgSplitter(qarg)$/;"	f
RM	cecutil.vim	/^com! -bar -nargs=1 RM	call RestoreMark(<q-args>)$/;"	c
RMan	manpageviewPlugin.vim	/^com! -nargs=* -count=0	RMan  let g:manpageview_winopen="reuse"  |call manpageview#ManPageView(0,<count>,<f-args>)$/;"	c
RWP	cecutil.vim	/^com! -bar -nargs=0 RWP	call RestoreWinPosn()$/;"	c
Remove	fugitive.vim	/^function! s:Remove(force)$/;"	f
ReplaceCmd	fugitive.vim	/^function! s:ReplaceCmd(cmd,...) abort$/;"	f
ReportError	vcscommand.vim	/^function! s:ReportError(error)$/;"	f
RestoreMark	cecutil.vim	/^fun! RestoreMark(markname)$/;"	f
RestoreUserMaps	cecutil.vim	/^fun! RestoreUserMaps(suffix)$/;"	f
RestoreWinPosn	cecutil.vim	/^fun! RestoreWinPosn(...)$/;"	f
SM	cecutil.vim	/^com! -bar -nargs=1 SM	call SaveMark(<q-args>)$/;"	c
SWP	cecutil.vim	/^com! -bar -nargs=0 SWP	call SaveWinPosn()$/;"	c
SaveMark	cecutil.vim	/^fun! SaveMark(markname)$/;"	f
SaveUserMaps	cecutil.vim	/^fun! SaveUserMaps(mapmode,maplead,mapchx,suffix)$/;"	f
SaveWinPosn	cecutil.vim	/^fun! SaveWinPosn(...)$/;"	f
SearchComplete	SearchComplete.vim	/^function! SearchComplete()$/;"	f
SearchCompleteStart	SearchComplete.vim	/^function! SearchCompleteStart()$/;"	f
SearchCompleteStop	SearchComplete.vim	/^function! SearchCompleteStop()$/;"	f
SetupBuffer	vcscommand.vim	/^function! s:SetupBuffer()$/;"	f
SetupScratchBuffer	vcscommand.vim	/^function! s:SetupScratchBuffer(command, vcsType, originalBuffer, statusText)$/;"	f
Sexplore	netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Sexplore	call netrw#Explore(<count>,1,0+<bang>0,<q-args>)$/;"	c
StageDiff	fugitive.vim	/^function! s:StageDiff() abort$/;"	f
StagePatch	fugitive.vim	/^function! s:StagePatch(lnum1,lnum2) abort$/;"	f
StageToggle	fugitive.vim	/^function! s:StageToggle(lnum1,lnum2) abort$/;"	f
Status	fugitive.vim	/^function! s:Status() abort$/;"	f
Sudo	sudo.vim	/^augroup Sudo$/;"	a
SudoRead	sudo.vim	/^command! -nargs=1 SudoRead call SudoRead(<f-args>)$/;"	c
SudoRead	sudo.vim	/^function! SudoRead(url)$/;"	f
SudoWrite	sudo.vim	/^command! -nargs=1 SudoWrite call SudoWrite(<f-args>)$/;"	c
SudoWrite	sudo.vim	/^function! SudoWrite (url) abort$/;"	f
TEMPORARY_BREAKPOINT_GROUP	VimPdb.py	/^	TEMPORARY_BREAKPOINT_GROUP = 'PdbTemporaryBreakpoint'$/;"	v	class:VimPdb
TagList_IsValid	taglist.vim	/^function! TagList_IsValid()$/;"	f
TagList_Start	taglist.vim	/^function! TagList_Start()$/;"	f
TagList_WrapUp	taglist.vim	/^function! TagList_WrapUp()$/;"	f
TagList_title	taglist.vim	/^    let TagList_title = "__Tag_List__"$/;"	v
Texplore	netrwPlugin.vim	/^com! -nargs=* -bar       -count=0 -complete=dir	Texplore	call netrw#Explore(<count>,0,6        ,<q-args>)$/;"	c
Tlist	taglist.vim	/^    command! -nargs=0 -bar Tlist TlistToggle$/;"	c
TlistAddFiles	taglist.vim	/^    command! -nargs=+ -complete=file TlistAddFiles$/;"	c
TlistAddFilesRecursive	taglist.vim	/^    command! -nargs=+ -complete=dir TlistAddFilesRecursive$/;"	c
TlistClose	taglist.vim	/^    command! -nargs=0 -bar TlistClose call s:Tlist_Window_Close()$/;"	c
TlistDebug	taglist.vim	/^    command! -nargs=? -complete=file -bar TlistDebug$/;"	c
TlistHighlightTag	taglist.vim	/^    command! -nargs=0 -bar TlistHighlightTag call s:Tlist_Window_Highlight_Tag($/;"	c
TlistLock	taglist.vim	/^    command! -bar TlistLock let Tlist_Auto_Update=0$/;"	c
TlistMessages	taglist.vim	/^    command! -nargs=0 -bar TlistMessages call s:Tlist_Debug_Show()$/;"	c
TlistOpen	taglist.vim	/^    command! -nargs=0 -bar TlistOpen call s:Tlist_Window_Open()$/;"	c
TlistSessionLoad	taglist.vim	/^    command! -nargs=* -complete=file TlistSessionLoad$/;"	c
TlistSessionSave	taglist.vim	/^    command! -nargs=* -complete=file TlistSessionSave$/;"	c
TlistShowPrototype	taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowPrototype$/;"	c
TlistShowTag	taglist.vim	/^    command! -nargs=* -complete=buffer TlistShowTag$/;"	c
TlistSync	taglist.vim	/^    command! -nargs=0 -bar TlistSync TlistHighlightTag$/;"	c
TlistToggle	taglist.vim	/^    command! -nargs=0 -bar TlistToggle call s:Tlist_Window_Toggle()$/;"	c
TlistUndebug	taglist.vim	/^    command! -nargs=0 -bar TlistUndebug  call s:Tlist_Debug_Disable()$/;"	c
TlistUnlock	taglist.vim	/^    command! -bar TlistUnlock let Tlist_Auto_Update=1$/;"	c
TlistUpdate	taglist.vim	/^    command! -nargs=0 -bar TlistUpdate call s:Tlist_Update_Current_File()$/;"	c
Tlist_Add_Files	taglist.vim	/^function! s:Tlist_Add_Files(...)$/;"	f
Tlist_Add_Files_Recursive	taglist.vim	/^function! s:Tlist_Add_Files_Recursive(dir, ...)$/;"	f
Tlist_Auto_Highlight_Tag	taglist.vim	/^        let Tlist_Auto_Highlight_Tag = 1$/;"	v
Tlist_Auto_Open	taglist.vim	/^        let Tlist_Auto_Open = 0$/;"	v
Tlist_Auto_Update	taglist.vim	/^        let Tlist_Auto_Update = 1$/;"	v
Tlist_Ballon_Expr	taglist.vim	/^function! Tlist_Ballon_Expr()$/;"	f
Tlist_Buffer_Removed	taglist.vim	/^function! s:Tlist_Buffer_Removed(filename)$/;"	f
Tlist_Change_Sort	taglist.vim	/^function! s:Tlist_Change_Sort(caller, action, sort_type)$/;"	f
Tlist_Close_On_Select	taglist.vim	/^        let Tlist_Close_On_Select = 0$/;"	v
Tlist_Compact_Format	taglist.vim	/^        let Tlist_Compact_Format = 0$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'ctags.exe'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'exctags'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'exuberant-ctags'$/;"	v
Tlist_Ctags_Cmd	taglist.vim	/^            let Tlist_Ctags_Cmd = 'tags'$/;"	v
Tlist_Debug_Disable	taglist.vim	/^function! s:Tlist_Debug_Disable(...)$/;"	f
Tlist_Debug_Enable	taglist.vim	/^function! s:Tlist_Debug_Enable(...)$/;"	f
Tlist_Debug_Show	taglist.vim	/^function! s:Tlist_Debug_Show()$/;"	f
Tlist_Detect_Filetype	taglist.vim	/^function! s:Tlist_Detect_Filetype(fname)$/;"	f
Tlist_Discard_FileInfo	taglist.vim	/^function! s:Tlist_Discard_FileInfo(fidx)$/;"	f
Tlist_Discard_TagInfo	taglist.vim	/^function! s:Tlist_Discard_TagInfo(fidx)$/;"	f
Tlist_Display_Prototype	taglist.vim	/^        let Tlist_Display_Prototype = 0$/;"	v
Tlist_Display_Tag_Scope	taglist.vim	/^        let Tlist_Display_Tag_Scope = 1$/;"	v
Tlist_Enable_Fold_Column	taglist.vim	/^        let Tlist_Enable_Fold_Column = 1$/;"	v
Tlist_Exe_Cmd_No_Acmds	taglist.vim	/^function! s:Tlist_Exe_Cmd_No_Acmds(cmd)$/;"	f
Tlist_Exit_OnlyWindow	taglist.vim	/^        let Tlist_Exit_OnlyWindow = 0$/;"	v
Tlist_Extract_Tag_Scope	taglist.vim	/^function! s:Tlist_Extract_Tag_Scope(tag_line)$/;"	f
Tlist_Extract_Tagtype	taglist.vim	/^function! s:Tlist_Extract_Tagtype(tag_line)$/;"	f
Tlist_FileType_Init	taglist.vim	/^function! s:Tlist_FileType_Init(ftype)$/;"	f
Tlist_File_Fold_Auto_Close	taglist.vim	/^        let Tlist_File_Fold_Auto_Close = 0$/;"	v
Tlist_Find_Nearest_Tag_Idx	taglist.vim	/^function! s:Tlist_Find_Nearest_Tag_Idx(fidx, linenum)$/;"	f
Tlist_GainFocus_On_ToggleOpen	taglist.vim	/^        let Tlist_GainFocus_On_ToggleOpen = 0$/;"	v
Tlist_Get_Buffer_Filetype	taglist.vim	/^function! s:Tlist_Get_Buffer_Filetype(bnum)$/;"	f
Tlist_Get_File_Index	taglist.vim	/^function! s:Tlist_Get_File_Index(fname)$/;"	f
Tlist_Get_Tag_Linenum	taglist.vim	/^function! s:Tlist_Get_Tag_Linenum(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype	taglist.vim	/^function! s:Tlist_Get_Tag_Prototype(fidx, tidx)$/;"	f
Tlist_Get_Tag_Prototype_By_Line	taglist.vim	/^function! Tlist_Get_Tag_Prototype_By_Line(...)$/;"	f
Tlist_Get_Tag_SearchPat	taglist.vim	/^function! s:Tlist_Get_Tag_SearchPat(fidx, tidx)$/;"	f
Tlist_Get_Tag_Type_By_Tag	taglist.vim	/^function! s:Tlist_Get_Tag_Type_By_Tag(fidx, tidx)$/;"	f
Tlist_Get_Tagname_By_Line	taglist.vim	/^function! Tlist_Get_Tagname_By_Line(...)$/;"	f
Tlist_Highlight_Tag_On_BufEnter	taglist.vim	/^        let Tlist_Highlight_Tag_On_BufEnter = 1$/;"	v
Tlist_Inc_Winwidth	taglist.vim	/^            let Tlist_Inc_Winwidth = 0$/;"	v
Tlist_Inc_Winwidth	taglist.vim	/^            let Tlist_Inc_Winwidth = 1$/;"	v
Tlist_Init_File	taglist.vim	/^function! s:Tlist_Init_File(filename, ftype)$/;"	f
Tlist_Log_Msg	taglist.vim	/^function! s:Tlist_Log_Msg(msg)$/;"	f
Tlist_Max_Submenu_Items	taglist.vim	/^        let Tlist_Max_Submenu_Items = 20$/;"	v
Tlist_Max_Tag_Length	taglist.vim	/^        let Tlist_Max_Tag_Length = 10$/;"	v
Tlist_Menu_Add_Base_Menu	taglist.vim	/^function! s:Tlist_Menu_Add_Base_Menu()$/;"	f
Tlist_Menu_File_Refresh	taglist.vim	/^function! s:Tlist_Menu_File_Refresh(fidx)$/;"	f
Tlist_Menu_Get_Tag_Type_Cmd	taglist.vim	/^function! s:Tlist_Menu_Get_Tag_Type_Cmd(fidx, ftype, add_ttype_name, ttype_idx)$/;"	f
Tlist_Menu_Init	taglist.vim	/^function! s:Tlist_Menu_Init()$/;"	f
Tlist_Menu_Jump_To_Tag	taglist.vim	/^function! s:Tlist_Menu_Jump_To_Tag(tidx)$/;"	f
Tlist_Menu_Refresh	taglist.vim	/^function! s:Tlist_Menu_Refresh()$/;"	f
Tlist_Menu_Remove_File	taglist.vim	/^function! s:Tlist_Menu_Remove_File()$/;"	f
Tlist_Menu_Update_File	taglist.vim	/^function! s:Tlist_Menu_Update_File(clear_menu)$/;"	f
Tlist_Parse_Tagline	taglist.vim	/^function! s:Tlist_Parse_Tagline(tag_line)$/;"	f
Tlist_Post_Close_Cleanup	taglist.vim	/^function! s:Tlist_Post_Close_Cleanup()$/;"	f
Tlist_Process_Dir	taglist.vim	/^function! s:Tlist_Process_Dir(dir_name, pat)$/;"	f
Tlist_Process_File	taglist.vim	/^function! s:Tlist_Process_File(filename, ftype)$/;"	f
Tlist_Process_File_Always	taglist.vim	/^        let Tlist_Process_File_Always = 0$/;"	v
Tlist_Process_Filelist	taglist.vim	/^function! s:Tlist_Process_Filelist(file_names)$/;"	f
Tlist_Refresh	taglist.vim	/^function! s:Tlist_Refresh()$/;"	f
Tlist_Refresh_Folds	taglist.vim	/^function! s:Tlist_Refresh_Folds()$/;"	f
Tlist_Remove_File	taglist.vim	/^function! s:Tlist_Remove_File(file_idx, user_request)$/;"	f
Tlist_Session_Load	taglist.vim	/^function! s:Tlist_Session_Load(...)$/;"	f
Tlist_Session_Save	taglist.vim	/^function! s:Tlist_Session_Save(...)$/;"	f
Tlist_Set_App	taglist.vim	/^function! Tlist_Set_App(name)$/;"	f
Tlist_Show_Menu	taglist.vim	/^        let Tlist_Show_Menu = 0$/;"	v
Tlist_Show_One_File	taglist.vim	/^        let Tlist_Show_One_File = 0$/;"	v
Tlist_Skip_File	taglist.vim	/^function! s:Tlist_Skip_File(filename, ftype)$/;"	f
Tlist_Sort_Type	taglist.vim	/^        let Tlist_Sort_Type = 'order'$/;"	v
Tlist_Update_Current_File	taglist.vim	/^function! s:Tlist_Update_Current_File()$/;"	f
Tlist_Update_File	taglist.vim	/^function! Tlist_Update_File(filename, ftype)$/;"	f
Tlist_Update_Remove_List	taglist.vim	/^function! s:Tlist_Update_Remove_List(filename, add)$/;"	f
Tlist_Use_Horiz_Window	taglist.vim	/^        let Tlist_Use_Horiz_Window = 0$/;"	v
Tlist_Use_Right_Window	taglist.vim	/^        let Tlist_Use_Right_Window = 0$/;"	v
Tlist_Use_SingleClick	taglist.vim	/^        let Tlist_Use_SingleClick = 0$/;"	v
Tlist_User_Removed_File	taglist.vim	/^function! s:Tlist_User_Removed_File(filename)$/;"	f
Tlist_Vim_Session_Load	taglist.vim	/^function! s:Tlist_Vim_Session_Load()$/;"	f
Tlist_Warning_Msg	taglist.vim	/^function! s:Tlist_Warning_Msg(msg)$/;"	f
Tlist_WinHeight	taglist.vim	/^        let Tlist_WinHeight = 10$/;"	v
Tlist_WinWidth	taglist.vim	/^        let Tlist_WinWidth = 30$/;"	v
Tlist_Window_Check_Auto_Open	taglist.vim	/^function! s:Tlist_Window_Check_Auto_Open()$/;"	f
Tlist_Window_Check_Width	taglist.vim	/^function! s:Tlist_Window_Check_Width()$/;"	f
Tlist_Window_Close	taglist.vim	/^function! s:Tlist_Window_Close()$/;"	f
Tlist_Window_Create	taglist.vim	/^function! s:Tlist_Window_Create()$/;"	f
Tlist_Window_Display_Help	taglist.vim	/^function! s:Tlist_Window_Display_Help()$/;"	f
Tlist_Window_Exit_Only_Window	taglist.vim	/^function! s:Tlist_Window_Exit_Only_Window()$/;"	f
Tlist_Window_Get_File_Index_By_Linenum	taglist.vim	/^function! s:Tlist_Window_Get_File_Index_By_Linenum(lnum)$/;"	f
Tlist_Window_Get_Tag_Index	taglist.vim	/^function! s:Tlist_Window_Get_Tag_Index(fidx, lnum)$/;"	f
Tlist_Window_Get_Tag_Type_By_Linenum	taglist.vim	/^function! s:Tlist_Window_Get_Tag_Type_By_Linenum(fidx, lnum)$/;"	f
Tlist_Window_Goto_Window	taglist.vim	/^function! s:Tlist_Window_Goto_Window()$/;"	f
Tlist_Window_Highlight_Line	taglist.vim	/^function! s:Tlist_Window_Highlight_Line()$/;"	f
Tlist_Window_Highlight_Tag	taglist.vim	/^function! s:Tlist_Window_Highlight_Tag(filename, cur_lnum, cntx, center)$/;"	f
Tlist_Window_Init	taglist.vim	/^function! s:Tlist_Window_Init()$/;"	f
Tlist_Window_Jump_To_Tag	taglist.vim	/^function! s:Tlist_Window_Jump_To_Tag(win_ctrl)$/;"	f
Tlist_Window_Mark_File_Window	taglist.vim	/^function! s:Tlist_Window_Mark_File_Window()$/;"	f
Tlist_Window_Move_To_File	taglist.vim	/^function! s:Tlist_Window_Move_To_File(dir)$/;"	f
Tlist_Window_Open	taglist.vim	/^function! s:Tlist_Window_Open()$/;"	f
Tlist_Window_Open_File	taglist.vim	/^function! s:Tlist_Window_Open_File(win_ctrl, filename, tagpat)$/;"	f
Tlist_Window_Open_File_Fold	taglist.vim	/^function! s:Tlist_Window_Open_File_Fold(acmd_bufnr)$/;"	f
Tlist_Window_Refresh	taglist.vim	/^function! s:Tlist_Window_Refresh()$/;"	f
Tlist_Window_Refresh_File	taglist.vim	/^function! s:Tlist_Window_Refresh_File(filename, ftype)$/;"	f
Tlist_Window_Remove_File_From_Display	taglist.vim	/^function! s:Tlist_Window_Remove_File_From_Display(fidx)$/;"	f
Tlist_Window_Show_Info	taglist.vim	/^function! s:Tlist_Window_Show_Info()$/;"	f
Tlist_Window_Toggle	taglist.vim	/^function! s:Tlist_Window_Toggle()$/;"	f
Tlist_Window_Toggle_Help_Text	taglist.vim	/^function! s:Tlist_Window_Toggle_Help_Text()$/;"	f
Tlist_Window_Update_File	taglist.vim	/^function! s:Tlist_Window_Update_File()$/;"	f
Tlist_Window_Update_Line_Offsets	taglist.vim	/^function! s:Tlist_Window_Update_Line_Offsets(start_idx, increment, offset)$/;"	f
Tlist_Window_Zoom	taglist.vim	/^function! s:Tlist_Window_Zoom()$/;"	f
ToggleHex	hex.vim	/^function ToggleHex()$/;"	f
TreeDirNode.AbsoluteTreeRoot	NERD_tree.vim	/^function! s:TreeDirNode.AbsoluteTreeRoot()$/;"	f
TreeDirNode.GetSelected	NERD_tree.vim	/^function! s:TreeDirNode.GetSelected()$/;"	f
TreeDirNode.New	NERD_tree.vim	/^function! s:TreeDirNode.New(path)$/;"	f
TreeDirNode._initChildren	NERD_tree.vim	/^function! s:TreeDirNode._initChildren(silent)$/;"	f
TreeDirNode._openRecursively2	NERD_tree.vim	/^function! s:TreeDirNode._openRecursively2(forceOpen)$/;"	f
TreeDirNode.addChild	NERD_tree.vim	/^function! s:TreeDirNode.addChild(treenode, inOrder)$/;"	f
TreeDirNode.close	NERD_tree.vim	/^function! s:TreeDirNode.close()$/;"	f
TreeDirNode.closeChildren	NERD_tree.vim	/^function! s:TreeDirNode.closeChildren()$/;"	f
TreeDirNode.createChild	NERD_tree.vim	/^function! s:TreeDirNode.createChild(path, inOrder)$/;"	f
TreeDirNode.findNode	NERD_tree.vim	/^function! s:TreeDirNode.findNode(path)$/;"	f
TreeDirNode.getChild	NERD_tree.vim	/^function! s:TreeDirNode.getChild(path)$/;"	f
TreeDirNode.getChildByIndex	NERD_tree.vim	/^function! s:TreeDirNode.getChildByIndex(indx, visible)$/;"	f
TreeDirNode.getChildCount	NERD_tree.vim	/^function! s:TreeDirNode.getChildCount()$/;"	f
TreeDirNode.getChildIndex	NERD_tree.vim	/^function! s:TreeDirNode.getChildIndex(path)$/;"	f
TreeDirNode.getVisibleChildCount	NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildCount()$/;"	f
TreeDirNode.getVisibleChildren	NERD_tree.vim	/^function! s:TreeDirNode.getVisibleChildren()$/;"	f
TreeDirNode.hasVisibleChildren	NERD_tree.vim	/^function! s:TreeDirNode.hasVisibleChildren()$/;"	f
TreeDirNode.open	NERD_tree.vim	/^function! s:TreeDirNode.open()$/;"	f
TreeDirNode.openExplorer	NERD_tree.vim	/^function! s:TreeDirNode.openExplorer()$/;"	f
TreeDirNode.openRecursively	NERD_tree.vim	/^function! s:TreeDirNode.openRecursively()$/;"	f
TreeDirNode.refresh	NERD_tree.vim	/^function! s:TreeDirNode.refresh()$/;"	f
TreeDirNode.removeChild	NERD_tree.vim	/^function! s:TreeDirNode.removeChild(treenode)$/;"	f
TreeDirNode.sortChildren	NERD_tree.vim	/^function! s:TreeDirNode.sortChildren()$/;"	f
TreeDirNode.toggleOpen	NERD_tree.vim	/^function! s:TreeDirNode.toggleOpen()$/;"	f
TreeDirNode.transplantChild	NERD_tree.vim	/^function! s:TreeDirNode.transplantChild(newNode)$/;"	f
TreeFileNode.GetRootLineNum	NERD_tree.vim	/^function! s:TreeFileNode.GetRootLineNum()$/;"	f
TreeFileNode.GetSelected	NERD_tree.vim	/^function! s:TreeFileNode.GetSelected()$/;"	f
TreeFileNode.New	NERD_tree.vim	/^function! s:TreeFileNode.New(path)$/;"	f
TreeFileNode._renderToString	NERD_tree.vim	/^function! s:TreeFileNode._renderToString(depth, drawText, vertMap, isLastChild)$/;"	f
TreeFileNode.bookmark	NERD_tree.vim	/^function! s:TreeFileNode.bookmark(name)$/;"	f
TreeFileNode.cacheParent	NERD_tree.vim	/^function! s:TreeFileNode.cacheParent()$/;"	f
TreeFileNode.clearBoomarks	NERD_tree.vim	/^function! s:TreeFileNode.clearBoomarks()$/;"	f
TreeFileNode.copy	NERD_tree.vim	/^function! s:TreeFileNode.copy(dest)$/;"	f
TreeFileNode.delete	NERD_tree.vim	/^function! s:TreeFileNode.delete()$/;"	f
TreeFileNode.equals	NERD_tree.vim	/^function! s:TreeFileNode.equals(treenode)$/;"	f
TreeFileNode.findNode	NERD_tree.vim	/^function! s:TreeFileNode.findNode(path)$/;"	f
TreeFileNode.findOpenDirSiblingWithVisibleChildren	NERD_tree.vim	/^function! s:TreeFileNode.findOpenDirSiblingWithVisibleChildren(direction)$/;"	f
TreeFileNode.findSibling	NERD_tree.vim	/^function! s:TreeFileNode.findSibling(direction)$/;"	f
TreeFileNode.getLineNum	NERD_tree.vim	/^function! s:TreeFileNode.getLineNum()$/;"	f
TreeFileNode.isRoot	NERD_tree.vim	/^function! s:TreeFileNode.isRoot()$/;"	f
TreeFileNode.isVisible	NERD_tree.vim	/^function! s:TreeFileNode.isVisible()$/;"	f
TreeFileNode.makeRoot	NERD_tree.vim	/^function! s:TreeFileNode.makeRoot()$/;"	f
TreeFileNode.open	NERD_tree.vim	/^function! s:TreeFileNode.open()$/;"	f
TreeFileNode.openSplit	NERD_tree.vim	/^function! s:TreeFileNode.openSplit()$/;"	f
TreeFileNode.openVSplit	NERD_tree.vim	/^function! s:TreeFileNode.openVSplit()$/;"	f
TreeFileNode.putCursorHere	NERD_tree.vim	/^function! s:TreeFileNode.putCursorHere(isJump, recurseUpward)$/;"	f
TreeFileNode.refresh	NERD_tree.vim	/^function! s:TreeFileNode.refresh()$/;"	f
TreeFileNode.rename	NERD_tree.vim	/^function! s:TreeFileNode.rename(newName)$/;"	f
TreeFileNode.renderToString	NERD_tree.vim	/^function! s:TreeFileNode.renderToString()$/;"	f
TreeFileNode.strDisplay	NERD_tree.vim	/^function! s:TreeFileNode.strDisplay()$/;"	f
USER_DEFINED_CURRENT_LINE_GROUP	VimPdb.py	/^	USER_DEFINED_CURRENT_LINE_GROUP = 'PdbCurrentLine'$/;"	v	class:VimPdb
VCSAdd	vcscommand.vim	/^com! -nargs=* VCSAdd call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Add', [<f-args>]))$/;"	c
VCSAnnotate	vcscommand.vim	/^com! -nargs=* -bang VCSAnnotate call s:VCSAnnotate(<q-bang>, <f-args>)$/;"	c
VCSAnnotate	vcscommand.vim	/^function! s:VCSAnnotate(bang, ...)$/;"	f
VCSBlame	vcscommand.vim	/^com! -nargs=* -bang VCSBlame call s:VCSAnnotate(<q-bang>, <f-args>)$/;"	c
VCSCommand	vcscommand.vim	/^augroup VCSCommand$/;"	a
VCSCommandChangeToCurrentFileDir	vcscommand.vim	/^function! VCSCommandChangeToCurrentFileDir(fileName)$/;"	f
VCSCommandChdir	vcscommand.vim	/^function! VCSCommandChdir(directory)$/;"	f
VCSCommandCommit	vcscommand.vim	/^augroup VCSCommandCommit$/;"	a
VCSCommandDisableBufferSetup	vcscommand.vim	/^com! VCSCommandDisableBufferSetup call VCSCommandDisableBufferSetup()$/;"	c
VCSCommandDisableBufferSetup	vcscommand.vim	/^function! VCSCommandDisableBufferSetup()$/;"	f
VCSCommandDoCommand	vcscommand.vim	/^function! VCSCommandDoCommand(cmd, cmdName, statusText, options)$/;"	f
VCSCommandEnableBufferSetup	vcscommand.vim	/^com! VCSCommandEnableBufferSetup call VCSCommandEnableBufferSetup()$/;"	c
VCSCommandEnableBufferSetup	vcscommand.vim	/^function! VCSCommandEnableBufferSetup()$/;"	f
VCSCommandGetOption	vcscommand.vim	/^function! VCSCommandGetOption(name, default)$/;"	f
VCSCommandGetOriginalBuffer	vcscommand.vim	/^function! VCSCommandGetOriginalBuffer(vcsBuffer)$/;"	f
VCSCommandGetStatusLine	vcscommand.vim	/^function! VCSCommandGetStatusLine()$/;"	f
VCSCommandGetVCSType	vcscommand.vim	/^function! VCSCommandGetVCSType(buffer)$/;"	f
VCSCommandRegisterModule	vcscommand.vim	/^function! VCSCommandRegisterModule(name, path, commandMap, mappingMap)$/;"	f
VCSCommandUtility.system	vcscommand.vim	/^function! s:VCSCommandUtility.system(...)$/;"	f
VCSCommandVIMShutdown	vcscommand.vim	/^augroup VCSCommandVIMShutdown$/;"	a
VCSCommit	vcscommand.vim	/^com! -nargs=? -bang VCSCommit call s:VCSCommit(<q-bang>, <q-args>)$/;"	c
VCSCommit	vcscommand.vim	/^function! s:VCSCommit(bang, message)$/;"	f
VCSDelete	vcscommand.vim	/^com! -nargs=* VCSDelete call s:ExecuteVCSCommand('Delete', [<f-args>])$/;"	c
VCSDiff	vcscommand.vim	/^com! -nargs=* VCSDiff call s:VCSDiff(<f-args>)$/;"	c
VCSDiff	vcscommand.vim	/^function! s:VCSDiff(...)  "{{{2$/;"	f
VCSFinishCommit	vcscommand.vim	/^function! s:VCSFinishCommit(logMessageList, originalBuffer)$/;"	f
VCSFinishCommitWithBuffer	vcscommand.vim	/^function! s:VCSFinishCommitWithBuffer()$/;"	f
VCSGotoOriginal	vcscommand.vim	/^com! -nargs=0 -bang VCSGotoOriginal call s:VCSGotoOriginal(<q-bang>)$/;"	c
VCSGotoOriginal	vcscommand.vim	/^function! s:VCSGotoOriginal(bang)$/;"	f
VCSInfo	vcscommand.vim	/^com! -nargs=* VCSInfo call s:ExecuteVCSCommand('Info', [<f-args>])$/;"	c
VCSLock	vcscommand.vim	/^com! -nargs=* VCSLock call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Lock', [<f-args>]))$/;"	c
VCSLog	vcscommand.vim	/^com! -nargs=* VCSLog call s:ExecuteVCSCommand('Log', [<f-args>])$/;"	c
VCSReload	vcscommand.vim	/^com! VCSReload let savedPlugins = s:plugins|let s:plugins = {}|aunmenu Plugin.VCS|unlet! g:loaded_VCSCommand|runtime plugin\/vcscommand.vim|for plugin in values(savedPlugins)|execute 'source' plugin[0]|endfor|unlet savedPlugins$/;"	c
VCSRemove	vcscommand.vim	/^com! -nargs=* VCSRemove call s:ExecuteVCSCommand('Delete', [<f-args>])$/;"	c
VCSRevert	vcscommand.vim	/^com! -nargs=0 VCSRevert call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Revert', []))$/;"	c
VCSReview	vcscommand.vim	/^com! -nargs=? VCSReview call s:VCSReview(<f-args>)$/;"	c
VCSReview	vcscommand.vim	/^function! s:VCSReview(...)  "{{{2$/;"	f
VCSStatus	vcscommand.vim	/^com! -nargs=* VCSStatus call s:ExecuteVCSCommand('Status', [<f-args>])$/;"	c
VCSUnlock	vcscommand.vim	/^com! -nargs=* VCSUnlock call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Unlock', [<f-args>]))$/;"	c
VCSUpdate	vcscommand.vim	/^com! -nargs=0 VCSUpdate call s:MarkOrigBufferForSetup(s:ExecuteVCSCommand('Update', []))$/;"	c
VCSVimDiff	vcscommand.vim	/^com! -nargs=* VCSVimDiff call s:VCSVimDiff(<f-args>)$/;"	c
VCSVimDiff	vcscommand.vim	/^function! s:VCSVimDiff(...)$/;"	f
VEMan	manpageviewPlugin.vim	/^com! -nargs=* -count=0	VEMan let g:manpageview_winopen="vsplit" |call manpageview#ManPageView(0,<count>,<f-args>)$/;"	c
VMan	manpageviewPlugin.vim	/^com! -nargs=* -count=0	VMan  let g:manpageview_winopen="vsplit="|call manpageview#ManPageView(0,<count>,<f-args>)$/;"	c
Vexplore	netrwPlugin.vim	/^com! -nargs=* -bar -bang -count=0 -complete=dir	Vexplore	call netrw#Explore(<count>,1,4+<bang>0,<q-args>)$/;"	c
VimDiffRestore	vcscommand.vim	/^augroup VimDiffRestore$/;"	a
VimDiffRestore	vcscommand.vim	/^function! s:VimDiffRestore(vimDiffBuff)$/;"	f
VimPdb	VimPdb.py	/^class VimPdb(PdbIDE):$/;"	c	inherits:PdbIDE
WipeoutCommandBuffers	vcscommand.vim	/^function! s:WipeoutCommandBuffers(originalBuffer, VCSCommand)$/;"	f
Write	fugitive.vim	/^function! s:Write(force,...) abort$/;"	f
__init__	VimPdb.py	/^	def __init__(self):$/;"	m	class:PdbIDE	access:public
__init__	VimPdb.py	/^	def __init__(self):$/;"	m	class:VimPdb	access:public
_set_lines_highlighting	VimPdb.py	/^	def _set_lines_highlighting(self, line_numbers, group_name):$/;"	m	class:VimPdb	access:public
activateNode	NERD_tree.vim	/^function! s:activateNode(forceKeepWindowOpen)$/;"	f
add_methods	fugitive.vim	/^function! s:add_methods(namespace, method_names) abort$/;"	f
add_queued_method	VimPdb.py	/^	def add_queued_method(self, function_name, *parameters):$/;"	m	class:PdbIDE	access:public
bdb	VimPdb.py	/^import bdb$/;"	i
bindMappings	NERD_tree.vim	/^function! s:bindMappings()$/;"	f
bookmarkNode	NERD_tree.vim	/^function! s:bookmarkNode(name)$/;"	f
bufInWindows	NERD_tree.vim	/^function! s:bufInWindows(bnum)$/;"	f
buffer	fugitive.vim	/^function! s:buffer(...) abort$/;"	f
buffer_commit	fugitive.vim	/^function! s:buffer_commit() dict abort$/;"	f
buffer_compare_age	fugitive.vim	/^function! s:buffer_compare_age(commit) dict abort$/;"	f
buffer_containing_commit	fugitive.vim	/^function! s:buffer_containing_commit() dict abort$/;"	f
buffer_expand	fugitive.vim	/^function! s:buffer_expand(rev) dict abort$/;"	f
buffer_getline	fugitive.vim	/^function! s:buffer_getline(lnum) dict abort$/;"	f
buffer_getvar	fugitive.vim	/^function! s:buffer_getvar(var) dict abort$/;"	f
buffer_name	fugitive.vim	/^function! s:buffer_name() dict abort$/;"	f
buffer_path	fugitive.vim	/^function! s:buffer_path(...) dict abort$/;"	f
buffer_repo	fugitive.vim	/^function! s:buffer_repo() dict abort$/;"	f
buffer_rev	fugitive.vim	/^function! s:buffer_rev() dict abort$/;"	f
buffer_setvar	fugitive.vim	/^function! s:buffer_setvar(var,value) dict abort$/;"	f
buffer_sha1	fugitive.vim	/^function! s:buffer_sha1() dict abort$/;"	f
buffer_type	fugitive.vim	/^function! s:buffer_type(...) dict abort$/;"	f
bzrFunctions.Add	vcsbzr.vim	/^function! s:bzrFunctions.Add(argList)$/;"	f
bzrFunctions.Annotate	vcsbzr.vim	/^function! s:bzrFunctions.Annotate(argList)$/;"	f
bzrFunctions.Commit	vcsbzr.vim	/^function! s:bzrFunctions.Commit(argList)$/;"	f
bzrFunctions.Delete	vcsbzr.vim	/^function! s:bzrFunctions.Delete(argList)$/;"	f
bzrFunctions.Diff	vcsbzr.vim	/^function! s:bzrFunctions.Diff(argList)$/;"	f
bzrFunctions.GetBufferInfo	vcsbzr.vim	/^function! s:bzrFunctions.GetBufferInfo()$/;"	f
bzrFunctions.Identify	vcsbzr.vim	/^function! s:bzrFunctions.Identify(buffer)$/;"	f
bzrFunctions.Info	vcsbzr.vim	/^function! s:bzrFunctions.Info(argList)$/;"	f
bzrFunctions.Lock	vcsbzr.vim	/^function! s:bzrFunctions.Lock(argList)$/;"	f
bzrFunctions.Log	vcsbzr.vim	/^function! s:bzrFunctions.Log(argList)$/;"	f
bzrFunctions.Revert	vcsbzr.vim	/^function! s:bzrFunctions.Revert(argList)$/;"	f
bzrFunctions.Review	vcsbzr.vim	/^function! s:bzrFunctions.Review(argList)$/;"	f
bzrFunctions.Status	vcsbzr.vim	/^function! s:bzrFunctions.Status(argList)$/;"	f
bzrFunctions.Unlock	vcsbzr.vim	/^function! s:bzrFunctions.Unlock(argList)$/;"	f
bzrFunctions.Update	vcsbzr.vim	/^function! s:bzrFunctions.Update(argList)$/;"	f
centerView	NERD_tree.vim	/^function! s:centerView()$/;"	f
chCwd	NERD_tree.vim	/^function! s:chCwd()$/;"	f
chRoot	NERD_tree.vim	/^function! s:chRoot()$/;"	f
check	jad.vim	/^fun s:check(cmd)$/;"	f
checkForActivate	NERD_tree.vim	/^function! s:checkForActivate()$/;"	f
checkForBrowse	NERD_tree.vim	/^function! s:checkForBrowse(dir)$/;"	f
class	jad.vim	/^augroup class$/;"	a
clearBookmarks	NERD_tree.vim	/^function! s:clearBookmarks(bookmarks)$/;"	f
clear_breakpoints_highlighting	VimPdb.py	/^	def clear_breakpoints_highlighting(self):$/;"	m	class:PdbIDE	access:public
clear_breakpoints_highlighting	VimPdb.py	/^	def clear_breakpoints_highlighting(self):$/;"	m	class:VimPdb	access:public
clear_current_line_highlighting	VimPdb.py	/^	def clear_current_line_highlighting(self):$/;"	m	class:PdbIDE	access:public
clear_current_line_highlighting	VimPdb.py	/^	def clear_current_line_highlighting(self):$/;"	m	class:VimPdb	access:public
closeChildren	NERD_tree.vim	/^function! s:closeChildren()$/;"	f
closeCurrentDir	NERD_tree.vim	/^function! s:closeCurrentDir()$/;"	f
closeTree	NERD_tree.vim	/^function! s:closeTree()$/;"	f
closeTreeIfOpen	NERD_tree.vim	/^function! s:closeTreeIfOpen()$/;"	f
closeTreeIfQuitOnOpen	NERD_tree.vim	/^function! s:closeTreeIfQuitOnOpen()$/;"	f
closeTreeWindow	NERD_tree.vim	/^function! s:closeTreeWindow()$/;"	f
command	VimPdb.py	/^	def command(self, command):$/;"	m	class:VimPdb	access:public
command	fugitive.vim	/^function! s:command(definition) abort$/;"	f
compareBookmarks	NERD_tree.vim	/^function! s:compareBookmarks(first, second)$/;"	f
compareNodes	NERD_tree.vim	/^function! s:compareNodes(n1, n2)$/;"	f
compatibility_check	fugitive.vim	/^function! s:compatibility_check()$/;"	f
completeBookmarks	NERD_tree.vim	/^function! s:completeBookmarks(A,L,P)$/;"	f
copyNode	NERD_tree.vim	/^function! s:copyNode()$/;"	f
createTreeWin	NERD_tree.vim	/^function! s:createTreeWin()$/;"	f
current_dir	VimPdb.vim	/^let current_dir = expand("<sfile>:h")$/;"	v
cvsFunctions.Add	vcscvs.vim	/^function! s:cvsFunctions.Add(argList)$/;"	f
cvsFunctions.Annotate	vcscvs.vim	/^function! s:cvsFunctions.Annotate(argList)$/;"	f
cvsFunctions.Commit	vcscvs.vim	/^function! s:cvsFunctions.Commit(argList)$/;"	f
cvsFunctions.Delete	vcscvs.vim	/^function! s:cvsFunctions.Delete(argList)$/;"	f
cvsFunctions.Diff	vcscvs.vim	/^function! s:cvsFunctions.Diff(argList)$/;"	f
cvsFunctions.GetBufferInfo	vcscvs.vim	/^function! s:cvsFunctions.GetBufferInfo()$/;"	f
cvsFunctions.Identify	vcscvs.vim	/^function! s:cvsFunctions.Identify(buffer)$/;"	f
cvsFunctions.Log	vcscvs.vim	/^function! s:cvsFunctions.Log(argList)$/;"	f
cvsFunctions.Revert	vcscvs.vim	/^function! s:cvsFunctions.Revert(argList)$/;"	f
cvsFunctions.Review	vcscvs.vim	/^function! s:cvsFunctions.Review(argList)$/;"	f
cvsFunctions.Status	vcscvs.vim	/^function! s:cvsFunctions.Status(argList)$/;"	f
cvsFunctions.Update	vcscvs.vim	/^function! s:cvsFunctions.Update(argList)$/;"	f
define_commands	fugitive.vim	/^function! s:define_commands()$/;"	f
deleteBookmark	NERD_tree.vim	/^function! s:deleteBookmark()$/;"	f
deleteNode	NERD_tree.vim	/^function! s:deleteNode()$/;"	f
diff_window_count	fugitive.vim	/^function! s:diff_window_count()$/;"	f
displayHelp	NERD_tree.vim	/^function! s:displayHelp()$/;"	f
do_clear	VimPdb.py	/^	def do_clear(self, breakpoint_number):$/;"	m	class:PdbIDE	access:public
do_clear_all_breakpoints	VimPdb.py	/^	def do_clear_all_breakpoints(self, filename = None):$/;"	m	class:PdbIDE	access:public
do_continue	VimPdb.py	/^	def do_continue(self):$/;"	m	class:PdbIDE	access:public
do_continue_until_return	VimPdb.py	/^	def do_continue_until_return(self):$/;"	m	class:PdbIDE	access:public
do_eval	VimPdb.py	/^	def do_eval(self, expression):$/;"	m	class:PdbIDE	access:public
do_exec	VimPdb.py	/^	def do_exec(self, statement):$/;"	m	class:PdbIDE	access:public
do_jump	VimPdb.py	/^	def do_jump(self, filename, line_number):$/;"	m	class:PdbIDE	access:public
do_move_down_in_stack_frame	VimPdb.py	/^	def do_move_down_in_stack_frame(self):$/;"	m	class:PdbIDE	access:public
do_move_up_in_stack_frame	VimPdb.py	/^	def do_move_up_in_stack_frame(self):$/;"	m	class:PdbIDE	access:public
do_print_breakpoint_condition	VimPdb.py	/^	def do_print_breakpoint_condition(self, filename, line_number):$/;"	m	class:PdbIDE	access:public
do_print_stack_trace	VimPdb.py	/^	def do_print_stack_trace(self):$/;"	m	class:PdbIDE	access:public
do_step_into	VimPdb.py	/^	def do_step_into(self):$/;"	m	class:PdbIDE	access:public
do_step_over	VimPdb.py	/^	def do_step_over(self):$/;"	m	class:PdbIDE	access:public
do_toggle_breakpoint	VimPdb.py	/^	def do_toggle_breakpoint(self, filename, line_number, condition = None, temporary = False):$/;"	m	class:PdbIDE	access:public
dumpHelp	NERD_tree.vim	/^function! s:dumpHelp()$/;"	f
echo	NERD_tree.vim	/^function! s:echo(msg)$/;"	f
echoError	NERD_tree.vim	/^function! s:echoError(msg)$/;"	f
echoWarning	NERD_tree.vim	/^function! s:echoWarning(msg)$/;"	f
exec	NERD_tree.vim	/^function! s:exec(cmd)$/;"	f
executeNode	NERD_tree.vim	/^function! s:executeNode()$/;"	f
firstUsableWindow	NERD_tree.vim	/^function! s:firstUsableWindow()$/;"	f
fnameescape	fugitive.vim	/^function! s:fnameescape(file) abort$/;"	f
format_stack_entry	VimPdb.py	/^	def format_stack_entry(self, stack_frame):$/;"	m	class:PdbIDE	access:public
fugitive	fugitive.vim	/^augroup fugitive$/;"	a
fugitive#buffer	fugitive.vim	/^function! fugitive#buffer(...) abort$/;"	f
fugitive#reload_status	fugitive.vim	/^function! fugitive#reload_status() abort$/;"	f
fugitive#statusline	fugitive.vim	/^function! fugitive#statusline(...)$/;"	f
fugitive_blame	fugitive.vim	/^augroup fugitive_blame$/;"	a
fugitive_commit	fugitive.vim	/^augroup fugitive_commit$/;"	a
fugitive_diff	fugitive.vim	/^augroup fugitive_diff$/;"	a
fugitive_files	fugitive.vim	/^augroup fugitive_files$/;"	a
fugitive_remove	fugitive.vim	/^augroup fugitive_remove$/;"	a
fugitive_utility	fugitive.vim	/^augroup fugitive_utility$/;"	a
function	fugitive.vim	/^function! s:function(name) abort$/;"	f
g:NERDTreeIgnore	NERD_tree.vim	/^    let g:NERDTreeIgnore = ['\\~$']$/;"	v
g:NERDTreeSortOrder	NERD_tree.vim	/^    let g:NERDTreeSortOrder = ['\\\/$', '*', '\\.swp$',  '\\.bak$', '\\~$']$/;"	v
g:VCSCOMMAND_IDENTIFY_EXACT	vcscommand.vim	/^let g:VCSCOMMAND_IDENTIFY_EXACT = 1$/;"	v
g:VCSCOMMAND_IDENTIFY_INEXACT	vcscommand.vim	/^let g:VCSCOMMAND_IDENTIFY_INEXACT = -1$/;"	v
g:auto_load_breakpoints_file	VimPdb.vim	/^let g:auto_load_breakpoints_file = 0$/;"	v
g:auto_save_breakpoints_file	VimPdb.vim	/^let g:auto_save_breakpoints_file = 0$/;"	v
g:current_stack_entry_prefix	VimPdb.vim	/^let g:current_stack_entry_prefix = "* "$/;"	v
g:default_breakpoints_filename	VimPdb.vim	/^let g:default_breakpoints_filename = "bplist.vpb"$/;"	v
g:fugitive_git_executable	fugitive.vim	/^  let g:fugitive_git_executable = 'git'$/;"	v
g:fugitive_summary_format	fugitive.vim	/^  let g:fugitive_summary_format = '%s'$/;"	v
g:loaded_DrawItPlugin	DrawItPlugin.vim	/^let g:loaded_DrawItPlugin = "v11f"$/;"	v
g:loaded_cecutil	cecutil.vim	/^let g:loaded_cecutil = "v18b"$/;"	v
g:loaded_fugitive	fugitive.vim	/^let g:loaded_fugitive = 1$/;"	v
g:loaded_libviewPlugin	libviewPlugin.vim	/^let g:loaded_libviewPlugin = "v1g"$/;"	v
g:loaded_netrwPlugin	netrwPlugin.vim	/^let g:loaded_netrwPlugin = "v132"$/;"	v
g:loaded_tarPlugin	tarPlugin.vim	/^let g:loaded_tarPlugin = "v23"$/;"	v
g:loaded_zipPlugin	zipPlugin.vim	/^let g:loaded_zipPlugin = "v22"$/;"	v
g:stack_entries_joiner	VimPdb.vim	/^let g:stack_entries_joiner = " ==>\\n"$/;"	v
g:stack_entry_format	VimPdb.vim	/^let g:stack_entry_format = "%(dir)s\\\\%(filename)s (%(line)d): %(function)s(%(args)s) %(return_value)s %(source_line)s"$/;"	v
g:stack_entry_prefix	VimPdb.vim	/^let g:stack_entry_prefix = "  "$/;"	v
getPath	NERD_tree.vim	/^function! s:getPath(ln)$/;"	f
getSelectedBookmark	NERD_tree.vim	/^function! s:getSelectedBookmark()$/;"	f
getTreeWinNum	NERD_tree.vim	/^function! s:getTreeWinNum()$/;"	f
get_active_filename	VimPdb.py	/^	def get_active_filename(self):$/;"	m	class:PdbIDE	access:public
get_active_filename	VimPdb.py	/^	def get_active_filename(self):$/;"	m	class:VimPdb	access:public
get_breakpoints	VimPdb.py	/^	def get_breakpoints(self):$/;"	m	class:PdbIDE	access:public
get_breakpoints_for_file	VimPdb.py	/^	def get_breakpoints_for_file(self, filename):$/;"	m	class:PdbIDE	access:public
get_conditional_breakpoints	VimPdb.py	/^	def get_conditional_breakpoints(self, filename):$/;"	m	class:PdbIDE	access:public
get_temporary_breakpoints	VimPdb.py	/^	def get_temporary_breakpoints(self, filename):$/;"	m	class:PdbIDE	access:public
gitFunctions.Add	vcsgit.vim	/^function! s:gitFunctions.Add(argList)$/;"	f
gitFunctions.Annotate	vcsgit.vim	/^function! s:gitFunctions.Annotate(argList)$/;"	f
gitFunctions.Commit	vcsgit.vim	/^function! s:gitFunctions.Commit(argList)$/;"	f
gitFunctions.Delete	vcsgit.vim	/^function! s:gitFunctions.Delete(argList)$/;"	f
gitFunctions.Diff	vcsgit.vim	/^function! s:gitFunctions.Diff(argList)$/;"	f
gitFunctions.GetBufferInfo	vcsgit.vim	/^function! s:gitFunctions.GetBufferInfo()$/;"	f
gitFunctions.Identify	vcsgit.vim	/^function! s:gitFunctions.Identify(buffer)$/;"	f
gitFunctions.Log	vcsgit.vim	/^function! s:gitFunctions.Log(argList)$/;"	f
gitFunctions.Revert	vcsgit.vim	/^function! s:gitFunctions.Revert(argList)$/;"	f
gitFunctions.Review	vcsgit.vim	/^function! s:gitFunctions.Review(argList)$/;"	f
gitFunctions.Status	vcsgit.vim	/^function! s:gitFunctions.Status(argList)$/;"	f
gitFunctions.Update	vcsgit.vim	/^function! s:gitFunctions.Update(argList)$/;"	f
goto_current_line	VimPdb.py	/^	def goto_current_line(self, frame, display = True):$/;"	m	class:PdbIDE	access:public
gsub	fugitive.vim	/^function! s:gsub(str,pat,rep) abort$/;"	f
gx	netrwPlugin.vim	/^  nmap <unique> gx <Plug>NetrwBrowseX$/;"	m
gzip	gzip.vim	/^augroup gzip$/;"	a
handleMiddleMouse	NERD_tree.vim	/^function! s:handleMiddleMouse()$/;"	f
hgFunctions.Add	vcshg.vim	/^function! s:hgFunctions.Add(argList)$/;"	f
hgFunctions.Annotate	vcshg.vim	/^function! s:hgFunctions.Annotate(argList)$/;"	f
hgFunctions.Commit	vcshg.vim	/^function! s:hgFunctions.Commit(argList)$/;"	f
hgFunctions.Delete	vcshg.vim	/^function! s:hgFunctions.Delete(argList)$/;"	f
hgFunctions.Diff	vcshg.vim	/^function! s:hgFunctions.Diff(argList)$/;"	f
hgFunctions.GetBufferInfo	vcshg.vim	/^function! s:hgFunctions.GetBufferInfo()$/;"	f
hgFunctions.Identify	vcshg.vim	/^function! s:hgFunctions.Identify(buffer)$/;"	f
hgFunctions.Info	vcshg.vim	/^function! s:hgFunctions.Info(argList)$/;"	f
hgFunctions.Log	vcshg.vim	/^function! s:hgFunctions.Log(argList)$/;"	f
hgFunctions.Revert	vcshg.vim	/^function! s:hgFunctions.Revert(argList)$/;"	f
hgFunctions.Review	vcshg.vim	/^function! s:hgFunctions.Review(argList)$/;"	f
hgFunctions.Status	vcshg.vim	/^function! s:hgFunctions.Status(argList)$/;"	f
hgFunctions.Update	vcshg.vim	/^function! s:hgFunctions.Update(argList)$/;"	f
highlight_breakpoints	VimPdb.py	/^	def highlight_breakpoints(self, filename, regular_breakpoints, conditional_breakpoints, temporary_breakpoints):$/;"	m	class:PdbIDE	access:public
highlight_breakpoints	VimPdb.py	/^	def highlight_breakpoints(self, filename, regular_breakpoints, conditional_breakpoints, temporary_breakpoints):$/;"	m	class:VimPdb	access:public
highlight_breakpoints_for_file	VimPdb.py	/^	def highlight_breakpoints_for_file(self, filename):$/;"	m	class:PdbIDE	access:public
highlight_current_line	VimPdb.py	/^	def highlight_current_line(self, filename, line):$/;"	m	class:PdbIDE	access:public
highlight_current_line	VimPdb.py	/^	def highlight_current_line(self, filename, line):$/;"	m	class:VimPdb	access:public
highlight_current_line_for_file	VimPdb.py	/^	def highlight_current_line_for_file(self, filename):$/;"	m	class:PdbIDE	access:public
indentLevelFor	NERD_tree.vim	/^function! s:indentLevelFor(line)$/;"	f
initNerdTree	NERD_tree.vim	/^function! s:initNerdTree(name)$/;"	f
initNerdTreeInPlace	NERD_tree.vim	/^function! s:initNerdTreeInPlace(dir)$/;"	f
initNerdTreeMirror	NERD_tree.vim	/^function! s:initNerdTreeMirror()$/;"	f
initVariable	NERD_tree.vim	/^function! s:initVariable(var, value)$/;"	f
insertNewNode	NERD_tree.vim	/^function! s:insertNewNode()$/;"	f
isTreeOpen	NERD_tree.vim	/^function! s:isTreeOpen()$/;"	f
isWindowUsable	NERD_tree.vim	/^function! s:isWindowUsable(winnumber)$/;"	f
is_breakpoint_enabled	VimPdb.py	/^	def is_breakpoint_enabled(self, filename, line):$/;"	m	class:PdbIDE	access:public
is_code_line	VimPdb.py	/^	def is_code_line(self, filename, line):$/;"	m	class:PdbIDE	access:public
is_debugged	VimPdb.py	/^	def is_debugged(self):$/;"	m	class:PdbIDE	access:public
is_exit_frame	VimPdb.py	/^	def is_exit_frame(self, frame):$/;"	m	class:PdbIDE	access:public
jumpToChild	NERD_tree.vim	/^function! s:jumpToChild(direction)$/;"	f
jumpToFirstChild	NERD_tree.vim	/^function! s:jumpToFirstChild()$/;"	f
jumpToLastChild	NERD_tree.vim	/^function! s:jumpToLastChild()$/;"	f
jumpToParent	NERD_tree.vim	/^function! s:jumpToParent()$/;"	f
jumpToRoot	NERD_tree.vim	/^function! s:jumpToRoot()$/;"	f
jumpToSibling	NERD_tree.vim	/^function! s:jumpToSibling(forward)$/;"	f
linecache	VimPdb.py	/^		import linecache$/;"	i
load_breakpoints_from_file	VimPdb.py	/^	def load_breakpoints_from_file(self, filename):$/;"	m	class:PdbIDE	access:public
loaded_VCSCommand	vcscommand.vim	/^let loaded_VCSCommand = 1$/;"	v
loaded_VCSCommand	vcscommand.vim	/^let loaded_VCSCommand = 2$/;"	v
loaded_gzip	gzip.vim	/^let loaded_gzip = 1$/;"	v
loaded_jad	jad.vim	/^let loaded_jad = 1$/;"	v
loaded_nerd_tree	NERD_tree.vim	/^let loaded_nerd_tree = 1$/;"	v
loaded_search_complete	SearchComplete.vim	/^let loaded_search_complete = 1$/;"	v
loaded_taglist	taglist.vim	/^            let loaded_taglist = 'no'$/;"	v
loaded_taglist	taglist.vim	/^        let loaded_taglist = 'no'$/;"	v
loaded_taglist	taglist.vim	/^    let loaded_taglist = 'fast_load_done'$/;"	v
loaded_taglist	taglist.vim	/^let loaded_taglist = 'available'$/;"	v
mappingInfo	vcscvs.vim	/^let mappingInfo = [$/;"	v
nextBufferName	NERD_tree.vim	/^function! s:nextBufferName()$/;"	f
normal_command	VimPdb.py	/^	def normal_command(self, command):$/;"	m	class:VimPdb	access:public
openBookmark	NERD_tree.vim	/^function! s:openBookmark(name)$/;"	f
openEntrySplit	NERD_tree.vim	/^function! s:openEntrySplit(vertical, forceKeepWindowOpen)$/;"	f
openExplorer	NERD_tree.vim	/^function! s:openExplorer()$/;"	f
openInNewTab	NERD_tree.vim	/^function! s:openInNewTab(stayCurrentTab)$/;"	f
openNodeRecursively	NERD_tree.vim	/^function! s:openNodeRecursively()$/;"	f
open_file	VimPdb.py	/^	def open_file(self, filename):$/;"	m	class:PdbIDE	access:public
open_file	VimPdb.py	/^	def open_file(self, filename):$/;"	m	class:VimPdb	access:public
os	VimPdb.py	/^import os$/;"	i
previewNode	NERD_tree.vim	/^function! s:previewNode(openNewWin)$/;"	f
print_message	VimPdb.py	/^	def print_message(self, message):$/;"	m	class:PdbIDE	access:public
print_message	VimPdb.py	/^	def print_message(self, message):$/;"	m	class:VimPdb	access:public
promptToDelBuffer	NERD_tree.vim	/^function! s:promptToDelBuffer(bufnum, msg)$/;"	f
putCursorInTreeWin	NERD_tree.vim	/^function! s:putCursorInTreeWin()$/;"	f
putCursorOnBookmarkTable	NERD_tree.vim	/^function! s:putCursorOnBookmarkTable()$/;"	f
read	jad.vim	/^fun s:read(cmd)$/;"	f
refreshCurrent	NERD_tree.vim	/^function! s:refreshCurrent()$/;"	f
refreshRoot	NERD_tree.vim	/^function! s:refreshRoot()$/;"	f
renameCurrent	NERD_tree.vim	/^function! s:renameCurrent()$/;"	f
renderBookmarks	NERD_tree.vim	/^function! s:renderBookmarks()$/;"	f
renderView	NERD_tree.vim	/^function! s:renderView()$/;"	f
renderViewSavingPosition	NERD_tree.vim	/^function! s:renderViewSavingPosition()$/;"	f
repo	fugitive.vim	/^function! s:repo(...) abort$/;"	f
repo_bare	fugitive.vim	/^function! s:repo_bare() dict abort$/;"	f
repo_dir	fugitive.vim	/^function! s:repo_dir(...) dict abort$/;"	f
repo_dirglob	fugitive.vim	/^function! s:repo_dirglob(base) dict abort$/;"	f
repo_git_chomp	fugitive.vim	/^function! s:repo_git_chomp(...) dict abort$/;"	f
repo_git_chomp_in_tree	fugitive.vim	/^function! s:repo_git_chomp_in_tree(...) dict abort$/;"	f
repo_git_command	fugitive.vim	/^function! s:repo_git_command(...) dict abort$/;"	f
repo_head_ref	fugitive.vim	/^function! s:repo_head_ref() dict abort$/;"	f
repo_keywordprg	fugitive.vim	/^function! s:repo_keywordprg() dict abort$/;"	f
repo_rev_parse	fugitive.vim	/^function! s:repo_rev_parse(rev) dict abort$/;"	f
repo_superglob	fugitive.vim	/^function! s:repo_superglob(base) dict abort$/;"	f
repo_translate	fugitive.vim	/^function! s:repo_translate(spec) dict abort$/;"	f
repo_tree	fugitive.vim	/^function! s:repo_tree(...) dict abort$/;"	f
restoreScreenState	NERD_tree.vim	/^function! s:restoreScreenState()$/;"	f
revealBookmark	NERD_tree.vim	/^function! s:revealBookmark(name)$/;"	f
run_method	VimPdb.py	/^	def run_method(self, function_name, *parameters):$/;"	m	class:VimPdb	access:public
run_method_and_return_output	VimPdb.py	/^	def run_method_and_return_output(self, function_name, *parameters):$/;"	m	class:VimPdb	access:public
run_queued_methods	VimPdb.py	/^	def run_queued_methods(self):$/;"	m	class:PdbIDE	access:public
s:Bookmark	NERD_tree.vim	/^let s:Bookmark = {}$/;"	v
s:NERDTreeBufName	NERD_tree.vim	/^let s:NERDTreeBufName = 'NERD_tree_'$/;"	v
s:NERDTreeSortStarIndex	NERD_tree.vim	/^let s:NERDTreeSortStarIndex = index(g:NERDTreeSortOrder, '*')$/;"	v
s:NERD_tree_version	NERD_tree.vim	/^let s:NERD_tree_version = '3.1.1'$/;"	v
s:Path	NERD_tree.vim	/^let s:Path = {}$/;"	v
s:Tlist_Skip_Refresh	taglist.vim	/^let s:Tlist_Skip_Refresh = 0$/;"	v
s:TreeDirNode	NERD_tree.vim	/^let s:TreeDirNode = copy(s:TreeFileNode)$/;"	v
s:TreeFileNode	NERD_tree.vim	/^let s:TreeFileNode = {}$/;"	v
s:VCSCommandUtility	vcsbzr.vim	/^let s:VCSCommandUtility = VCSCommandRegisterModule('BZR', expand('<sfile>'), s:bzrFunctions, [])$/;"	v
s:VCSCommandUtility	vcscommand.vim	/^let s:VCSCommandUtility = {}$/;"	v
s:VCSCommandUtility	vcscvs.vim	/^let s:VCSCommandUtility = VCSCommandRegisterModule('CVS', expand('<sfile>'), s:cvsFunctions, s:cvsExtensionMappings)$/;"	v
s:VCSCommandUtility	vcsgit.vim	/^let s:VCSCommandUtility = VCSCommandRegisterModule('git', expand('<sfile>'), s:gitFunctions, [])$/;"	v
s:VCSCommandUtility	vcshg.vim	/^let s:VCSCommandUtility = VCSCommandRegisterModule('HG', expand('<sfile>'), s:hgFunctions, [])$/;"	v
s:VCSCommandUtility	vcssvk.vim	/^let s:VCSCommandUtility = VCSCommandRegisterModule('SVK', expand('<sfile>'), s:svkFunctions, [])$/;"	v
s:VCSCommandUtility	vcssvn.vim	/^let s:VCSCommandUtility = VCSCommandRegisterModule('SVN', expand('<sfile>'), s:svnFunctions, [])$/;"	v
s:abstract_prototype	fugitive.vim	/^let s:abstract_prototype = {}$/;"	v
s:buffer_prototype	fugitive.vim	/^let s:buffer_prototype = {}$/;"	v
s:bzrFunctions	vcsbzr.vim	/^let s:bzrFunctions = {}$/;"	v
s:bzrFunctions	vcsbzr.vim	/^let s:bzrFunctions.AnnotateSplitRegex = '^[^|]\\+ | '$/;"	v
s:commands	fugitive.vim	/^let s:commands = []$/;"	v
s:cpo_save	taglist.vim	/^let s:cpo_save = &cpo$/;"	v
s:cvsExtensionMappings	vcscvs.vim	/^		let s:cvsExtensionMappings[shortCut] = commandText$/;"	v
s:cvsExtensionMappings	vcscvs.vim	/^let s:cvsExtensionMappings = {}$/;"	v
s:cvsFunctions	vcscvs.vim	/^let s:cvsFunctions = {}$/;"	v
s:cvsFunctions	vcscvs.vim	/^let s:cvsFunctions.AnnotateSplitRegex = '): '$/;"	v
s:defaultMappings	vcscommand.vim	/^let s:defaultMappings = [$/;"	v
s:escape_chars	NERD_tree.vim	/^let s:escape_chars =  " \\\\`\\|\\"#%&,?()\\*^<>"$/;"	v
s:gitFunctions	vcsgit.vim	/^let s:gitFunctions = {}$/;"	v
s:gitFunctions	vcsgit.vim	/^let s:gitFunctions.AnnotateSplitRegex = ') '$/;"	v
s:hgFunctions	vcshg.vim	/^let s:hgFunctions = {}$/;"	v
s:hgFunctions	vcshg.vim	/^let s:hgFunctions.AnnotateSplitRegex = '\\d\\+: '$/;"	v
s:isEditFileRunning	vcscommand.vim	/^let s:isEditFileRunning = 0$/;"	v
s:keepcpo	DrawItPlugin.vim	/^let s:keepcpo             = &cpo$/;"	v
s:keepcpo	cecutil.vim	/^let s:keepcpo        = &cpo$/;"	v
s:keepcpo	libviewPlugin.vim	/^let s:keepcpo              = &cpo$/;"	v
s:keepcpo	manpageviewPlugin.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	netrwPlugin.vim	/^let s:keepcpo            = &cpo$/;"	v
s:keepcpo	netrwPlugin.vim	/^let s:keepcpo= &cpo$/;"	v
s:keepcpo	tarPlugin.vim	/^let s:keepcpo          = &cpo$/;"	v
s:keepcpo	zipPlugin.vim	/^let s:keepcpo          = &cpo$/;"	v
s:menu_char_prefix	taglist.vim	/^let s:menu_char_prefix =$/;"	v
s:modifier	cecutil.vim	/^ let s:modifier= "sil "$/;"	v
s:modifier	cecutil.vim	/^ let s:modifier= "sil keepj "$/;"	v
s:next_buffer_number	NERD_tree.vim	/^let s:next_buffer_number = 1$/;"	v
s:old_cpo	NERD_tree.vim	/^let s:old_cpo = &cpo$/;"	v
s:optionOverrides	vcscommand.vim	/^let s:optionOverrides = {}$/;"	v
s:os_slash	NERD_tree.vim	/^    let s:os_slash = '\\'$/;"	v
s:os_slash	NERD_tree.vim	/^let s:os_slash = '\/'$/;"	v
s:plugins	vcscommand.vim	/^let s:plugins = {}$/;"	v
s:repo_prototype	fugitive.vim	/^let s:repo_prototype = {}$/;"	v
s:repos	fugitive.vim	/^let s:repos = {}$/;"	v
s:running_windows	NERD_tree.vim	/^let s:running_windows = has("win16") || has("win32") || has("win64")$/;"	v
s:save_cpo	vcsbzr.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	vcscommand.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	vcscvs.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	vcsgit.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	vcshg.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	vcssvk.vim	/^let s:save_cpo=&cpo$/;"	v
s:save_cpo	vcssvn.vim	/^let s:save_cpo=&cpo$/;"	v
s:seen	sudo.vim	/^let s:seen=1$/;"	v
s:svkFunctions	vcssvk.vim	/^let s:svkFunctions = {}$/;"	v
s:svnFunctions	vcssvn.vim	/^let s:svnFunctions = {}$/;"	v
s:svnFunctions	vcssvn.vim	/^let s:svnFunctions.AnnotateSplitRegex = '\\s\\+\\S\\+\\s\\+\\S\\+ '$/;"	v
s:tlist_app_name	taglist.vim	/^let s:tlist_app_name = "none"$/;"	v
s:tlist_brief_help	taglist.vim	/^let s:tlist_brief_help = 1$/;"	v
s:tlist_cur_file_idx	taglist.vim	/^let s:tlist_cur_file_idx = -1$/;"	v
s:tlist_debug	taglist.vim	/^let s:tlist_debug = 0$/;"	v
s:tlist_debug_file	taglist.vim	/^let s:tlist_debug_file = ''$/;"	v
s:tlist_def_asm_settings	taglist.vim	/^let s:tlist_def_asm_settings = 'asm;d:define;l:label;m:macro;t:type'$/;"	v
s:tlist_def_aspperl_settings	taglist.vim	/^let s:tlist_def_aspperl_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_aspvbs_settings	taglist.vim	/^let s:tlist_def_aspvbs_settings = 'asp;f:function;s:sub;v:variable'$/;"	v
s:tlist_def_awk_settings	taglist.vim	/^let s:tlist_def_awk_settings = 'awk;f:function'$/;"	v
s:tlist_def_beta_settings	taglist.vim	/^let s:tlist_def_beta_settings = 'beta;f:fragment;s:slot;v:pattern'$/;"	v
s:tlist_def_c_settings	taglist.vim	/^let s:tlist_def_c_settings = 'c;d:macro;g:enum;s:struct;u:union;t:typedef;' .$/;"	v
s:tlist_def_cobol_settings	taglist.vim	/^let s:tlist_def_cobol_settings = 'cobol;d:data;f:file;g:group;p:paragraph;' .$/;"	v
s:tlist_def_cpp_settings	taglist.vim	/^let s:tlist_def_cpp_settings = 'c++;n:namespace;v:variable;d:macro;t:typedef;' .$/;"	v
s:tlist_def_cs_settings	taglist.vim	/^let s:tlist_def_cs_settings = 'c#;d:macro;t:typedef;n:namespace;c:class;' .$/;"	v
s:tlist_def_csh_settings	taglist.vim	/^let s:tlist_def_csh_settings = 'sh;f:function'$/;"	v
s:tlist_def_eiffel_settings	taglist.vim	/^let s:tlist_def_eiffel_settings = 'eiffel;c:class;f:feature'$/;"	v
s:tlist_def_erlang_settings	taglist.vim	/^let s:tlist_def_erlang_settings = 'erlang;d:macro;r:record;m:module;f:function'$/;"	v
s:tlist_def_expect_settings	taglist.vim	/^let s:tlist_def_expect_settings = 'tcl;c:class;f:method;p:procedure'$/;"	v
s:tlist_def_fortran_settings	taglist.vim	/^let s:tlist_def_fortran_settings = 'fortran;p:program;b:block data;' .$/;"	v
s:tlist_def_html_settings	taglist.vim	/^let s:tlist_def_html_settings = 'html;a:anchor;f:javascript function'$/;"	v
s:tlist_def_java_settings	taglist.vim	/^let s:tlist_def_java_settings = 'java;p:package;c:class;i:interface;' .$/;"	v
s:tlist_def_javascript_settings	taglist.vim	/^let s:tlist_def_javascript_settings = 'javascript;f:function'$/;"	v
s:tlist_def_lisp_settings	taglist.vim	/^let s:tlist_def_lisp_settings = 'lisp;f:function'$/;"	v
s:tlist_def_lua_settings	taglist.vim	/^let s:tlist_def_lua_settings = 'lua;f:function'$/;"	v
s:tlist_def_make_settings	taglist.vim	/^let s:tlist_def_make_settings = 'make;m:macro'$/;"	v
s:tlist_def_pascal_settings	taglist.vim	/^let s:tlist_def_pascal_settings = 'pascal;f:function;p:procedure'$/;"	v
s:tlist_def_perl_settings	taglist.vim	/^let s:tlist_def_perl_settings = 'perl;c:constant;l:label;p:package;s:subroutine'$/;"	v
s:tlist_def_php_settings	taglist.vim	/^let s:tlist_def_php_settings = 'php;c:class;d:constant;v:variable;f:function'$/;"	v
s:tlist_def_python_settings	taglist.vim	/^let s:tlist_def_python_settings = 'python;c:class;m:member;f:function'$/;"	v
s:tlist_def_rexx_settings	taglist.vim	/^let s:tlist_def_rexx_settings = 'rexx;s:subroutine'$/;"	v
s:tlist_def_ruby_settings	taglist.vim	/^let s:tlist_def_ruby_settings = 'ruby;c:class;f:method;F:function;' .$/;"	v
s:tlist_def_scheme_settings	taglist.vim	/^let s:tlist_def_scheme_settings = 'scheme;s:set;f:function'$/;"	v
s:tlist_def_sh_settings	taglist.vim	/^let s:tlist_def_sh_settings = 'sh;f:function'$/;"	v
s:tlist_def_slang_settings	taglist.vim	/^let s:tlist_def_slang_settings = 'slang;n:namespace;f:function'$/;"	v
s:tlist_def_sml_settings	taglist.vim	/^let s:tlist_def_sml_settings = 'sml;e:exception;c:functor;s:signature;' .$/;"	v
s:tlist_def_sql_settings	taglist.vim	/^let s:tlist_def_sql_settings = 'sql;c:cursor;F:field;P:package;r:record;' .$/;"	v
s:tlist_def_tcl_settings	taglist.vim	/^let s:tlist_def_tcl_settings = 'tcl;c:class;f:method;m:method;p:procedure'$/;"	v
s:tlist_def_vera_settings	taglist.vim	/^let s:tlist_def_vera_settings = 'vera;c:class;d:macro;e:enumerator;' .$/;"	v
s:tlist_def_verilog_settings	taglist.vim	/^let s:tlist_def_verilog_settings = 'verilog;m:module;c:constant;P:parameter;' .$/;"	v
s:tlist_def_vim_settings	taglist.vim	/^let s:tlist_def_vim_settings = 'vim;a:autocmds;v:variable;f:function'$/;"	v
s:tlist_def_yacc_settings	taglist.vim	/^let s:tlist_def_yacc_settings = 'yacc;l:label'$/;"	v
s:tlist_def_zsh_settings	taglist.vim	/^let s:tlist_def_zsh_settings = 'sh;f:function'$/;"	v
s:tlist_file_count	taglist.vim	/^let s:tlist_file_count = 0$/;"	v
s:tlist_file_lnum_idx_cache	taglist.vim	/^let s:tlist_file_lnum_idx_cache = -1$/;"	v
s:tlist_file_name_idx_cache	taglist.vim	/^let s:tlist_file_name_idx_cache = -1$/;"	v
s:tlist_file_names	taglist.vim	/^let s:tlist_file_names=''$/;"	v
s:tlist_ftype_count	taglist.vim	/^let s:tlist_ftype_count = 0$/;"	v
s:tlist_menu_empty	taglist.vim	/^let s:tlist_menu_empty = 1$/;"	v
s:tlist_msg	taglist.vim	/^    let s:tlist_msg = ''$/;"	v
s:tlist_removed_flist	taglist.vim	/^let s:tlist_removed_flist = ""$/;"	v
s:tlist_sid	taglist.vim	/^    let s:tlist_sid = substitute(maparg('<SID>xx'), '<SNR>\\(\\d\\+_\\)xx$',$/;"	v
s:tlist_win_maximized	taglist.vim	/^let s:tlist_win_maximized = 0$/;"	v
s:tlist_winsize_chgd	taglist.vim	/^let s:tlist_winsize_chgd = -1$/;"	v
s:tree_markup_reg	NERD_tree.vim	/^let s:tree_markup_reg = '^[ `|]*[\\-+~]'$/;"	v
s:tree_up_dir_line	NERD_tree.vim	/^let s:tree_up_dir_line = '.. (up a dir)'$/;"	v
s:tree_wid	NERD_tree.vim	/^let s:tree_wid = 2$/;"	v
saveScreenState	NERD_tree.vim	/^function! s:saveScreenState()$/;"	f
save_breakpoints_to_file	VimPdb.py	/^	def save_breakpoints_to_file(self, filename):$/;"	m	class:PdbIDE	access:public
set_breakpoints	VimPdb.py	/^	def set_breakpoints(self, breakpoints):$/;"	m	class:PdbIDE	access:public
set_cursor_position	VimPdb.py	/^	def set_cursor_position(self, row, column):$/;"	m	class:PdbIDE	access:public
set_cursor_position	VimPdb.py	/^	def set_cursor_position(self, row, column):$/;"	m	class:VimPdb	access:public
set_cursor_to_current_line	VimPdb.py	/^	def set_cursor_to_current_line(self):$/;"	m	class:VimPdb	access:public
setupStatusline	NERD_tree.vim	/^function! s:setupStatusline()$/;"	f
setupSyntaxHighlighting	NERD_tree.vim	/^function! s:setupSyntaxHighlighting()$/;"	f
shellesc	fugitive.vim	/^function! s:shellesc(arg) abort$/;"	f
shellslash	fugitive.vim	/^function! s:shellslash(path)$/;"	f
showFileSystemMenu	NERD_tree.vim	/^function! s:showFileSystemMenu()$/;"	f
start_debugging	VimPdb.py	/^	def start_debugging(self, filename, stop_immediately = True, args = []):$/;"	m	class:PdbIDE	access:public
stop_debugging	VimPdb.py	/^	def stop_debugging(self):$/;"	m	class:PdbIDE	access:public
stripMarkupFromLine	NERD_tree.vim	/^function! s:stripMarkupFromLine(line, removeLeadingSpaces)$/;"	f
sub	fugitive.vim	/^function! s:sub(str,pat,rep) abort$/;"	f
svkFunctions.Add	vcssvk.vim	/^function! s:svkFunctions.Add(argList)$/;"	f
svkFunctions.Annotate	vcssvk.vim	/^function! s:svkFunctions.Annotate(argList)$/;"	f
svkFunctions.Commit	vcssvk.vim	/^function! s:svkFunctions.Commit(argList)$/;"	f
svkFunctions.Delete	vcssvk.vim	/^function! s:svkFunctions.Delete(argList)$/;"	f
svkFunctions.Diff	vcssvk.vim	/^function! s:svkFunctions.Diff(argList)$/;"	f
svkFunctions.GetBufferInfo	vcssvk.vim	/^function! s:svkFunctions.GetBufferInfo()$/;"	f
svkFunctions.Identify	vcssvk.vim	/^function! s:svkFunctions.Identify(buffer)$/;"	f
svkFunctions.Info	vcssvk.vim	/^function! s:svkFunctions.Info(argList)$/;"	f
svkFunctions.Lock	vcssvk.vim	/^function! s:svkFunctions.Lock(argList)$/;"	f
svkFunctions.Log	vcssvk.vim	/^function! s:svkFunctions.Log(argList)$/;"	f
svkFunctions.Revert	vcssvk.vim	/^function! s:svkFunctions.Revert(argList)$/;"	f
svkFunctions.Review	vcssvk.vim	/^function! s:svkFunctions.Review(argList)$/;"	f
svkFunctions.Status	vcssvk.vim	/^function! s:svkFunctions.Status(argList)$/;"	f
svkFunctions.Unlock	vcssvk.vim	/^function! s:svkFunctions.Unlock(argList)$/;"	f
svkFunctions.Update	vcssvk.vim	/^function! s:svkFunctions.Update(argList)$/;"	f
svnFunctions.Add	vcssvn.vim	/^function! s:svnFunctions.Add(argList)$/;"	f
svnFunctions.Annotate	vcssvn.vim	/^function! s:svnFunctions.Annotate(argList)$/;"	f
svnFunctions.Commit	vcssvn.vim	/^function! s:svnFunctions.Commit(argList)$/;"	f
svnFunctions.Delete	vcssvn.vim	/^function! s:svnFunctions.Delete(argList)$/;"	f
svnFunctions.Diff	vcssvn.vim	/^function! s:svnFunctions.Diff(argList)$/;"	f
svnFunctions.GetBufferInfo	vcssvn.vim	/^function! s:svnFunctions.GetBufferInfo()$/;"	f
svnFunctions.Identify	vcssvn.vim	/^function! s:svnFunctions.Identify(buffer)$/;"	f
svnFunctions.Info	vcssvn.vim	/^function! s:svnFunctions.Info(argList)$/;"	f
svnFunctions.Lock	vcssvn.vim	/^function! s:svnFunctions.Lock(argList)$/;"	f
svnFunctions.Log	vcssvn.vim	/^function! s:svnFunctions.Log(argList)$/;"	f
svnFunctions.Revert	vcssvn.vim	/^function! s:svnFunctions.Revert(argList)$/;"	f
svnFunctions.Review	vcssvn.vim	/^function! s:svnFunctions.Review(argList)$/;"	f
svnFunctions.Status	vcssvn.vim	/^function! s:svnFunctions.Status(argList)$/;"	f
svnFunctions.Unlock	vcssvn.vim	/^function! s:svnFunctions.Unlock(argList)$/;"	f
svnFunctions.Update	vcssvn.vim	/^function! s:svnFunctions.Update(argList)$/;"	f
sys	VimPdb.py	/^import sys$/;"	i
tabpagevar	NERD_tree.vim	/^function! s:tabpagevar(tabnr, var)$/;"	f
tar	tarPlugin.vim	/^augroup tar$/;"	a
throw	fugitive.vim	/^function! s:throw(string) abort$/;"	f
time	VimPdb.py	/^import time$/;"	i
toggle	NERD_tree.vim	/^function! s:toggle(dir)$/;"	f
toggleIgnoreFilter	NERD_tree.vim	/^function! s:toggleIgnoreFilter()$/;"	f
toggleShowBookmarks	NERD_tree.vim	/^function! s:toggleShowBookmarks()$/;"	f
toggleShowFiles	NERD_tree.vim	/^function! s:toggleShowFiles()$/;"	f
toggleShowHidden	NERD_tree.vim	/^function! s:toggleShowHidden()$/;"	f
treeExistsForBuf	NERD_tree.vim	/^function! s:treeExistsForBuf()$/;"	f
treeExistsForTab	NERD_tree.vim	/^function! s:treeExistsForTab()$/;"	f
unique	NERD_tree.vim	/^function! s:unique(list)$/;"	f
upDir	NERD_tree.vim	/^function! s:upDir(keepState)$/;"	f
user_call	VimPdb.py	/^	def user_call(self, frame, args):$/;"	m	class:PdbIDE	access:public
user_exception	VimPdb.py	/^	def user_exception(self, frame, (exc_type, exc_value, exc_traceback)):$/;"	m	class:PdbIDE	access:public
user_line	VimPdb.py	/^	def user_line(self, frame):$/;"	m	class:PdbIDE	access:public
user_return	VimPdb.py	/^	def user_return(self, frame, return_value):$/;"	m	class:PdbIDE	access:public
vim	VimPdb.py	/^import vim$/;"	i
wait_in_debug	VimPdb.py	/^	def wait_in_debug(self, frame, traceback = None):$/;"	m	class:PdbIDE	access:public
warn	fugitive.vim	/^function! s:warn(str)$/;"	f
zip	zipPlugin.vim	/^augroup zip$/;"	a
