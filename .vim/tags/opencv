!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	/usr/include/opencv/cvcompat.h	/^                                const float* A, const float* k,$/;"	v
All	/usr/include/opencv/cvaux.h	/^    int** All;$/;"	m	struct:CvCliqueFinder	access:public
BACKPROP	/usr/include/opencv/ml.h	/^    enum { BACKPROP=0, RPROP=1 };$/;"	e	enum:CvANN_MLP_TrainParams::__anon21
BITMAPINFOHEADER	/usr/include/opencv/cxcore.h	/^        typedef struct tagBITMAPINFOHEADER BITMAPINFOHEADER;$/;"	t	typeref:struct:tagBITMAPINFOHEADER
BOOL	/usr/include/opencv/cxcore.h	/^        typedef int BOOL;$/;"	t
BorderConst	/usr/include/opencv/cxtypes.h	/^    int  BorderConst[4];    \/* Ditto.                                 *\/$/;"	m	struct:_IplImage	access:public
BorderMode	/usr/include/opencv/cxtypes.h	/^    int  BorderMode[4];     \/* Ignored by OpenCV.                     *\/$/;"	m	struct:_IplImage	access:public
C	/usr/include/opencv/ml.h	/^    double      C;  \/\/ for CV_SVM_C_SVC, CV_SVM_EPS_SVR and CV_SVM_NU_SVR$/;"	m	struct:CvSVMParams	access:public
CALC_J	/usr/include/opencv/cv.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon1
CHECK_ERR	/usr/include/opencv/cv.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon1
CImage	/usr/include/opencv/highgui.h	434;"	d
CLIQUE_END	/usr/include/opencv/cvaux.h	340;"	d
CLIQUE_FOUND	/usr/include/opencv/cvaux.h	339;"	d
CLIQUE_TIME_OFF	/usr/include/opencv/cvaux.h	338;"	d
CP	/usr/include/opencv/cvtypes.h	/^    int CP;                     \/* number of control vector dimensions *\/$/;"	m	struct:CvKalman	access:public
CVAPI	/usr/include/opencv/cxtypes.h	138;"	d
CVAPI	/usr/include/opencv/highgui.h	97;"	d
CVAPI	/usr/include/opencv/ml.h	103;"	d
CVStatus	/usr/include/opencv/cxerror.h	/^typedef int CVStatus;$/;"	t
CV_16S	/usr/include/opencv/cxtypes.h	471;"	d
CV_16SC	/usr/include/opencv/cxtypes.h	502;"	d
CV_16SC1	/usr/include/opencv/cxtypes.h	498;"	d
CV_16SC2	/usr/include/opencv/cxtypes.h	499;"	d
CV_16SC3	/usr/include/opencv/cxtypes.h	500;"	d
CV_16SC4	/usr/include/opencv/cxtypes.h	501;"	d
CV_16U	/usr/include/opencv/cxtypes.h	470;"	d
CV_16UC	/usr/include/opencv/cxtypes.h	496;"	d
CV_16UC1	/usr/include/opencv/cxtypes.h	492;"	d
CV_16UC2	/usr/include/opencv/cxtypes.h	493;"	d
CV_16UC3	/usr/include/opencv/cxtypes.h	494;"	d
CV_16UC4	/usr/include/opencv/cxtypes.h	495;"	d
CV_1F	/usr/include/opencv/cxmisc.h	165;"	d
CV_32F	/usr/include/opencv/cxtypes.h	473;"	d
CV_32FC	/usr/include/opencv/cxtypes.h	514;"	d
CV_32FC1	/usr/include/opencv/cxtypes.h	510;"	d
CV_32FC2	/usr/include/opencv/cxtypes.h	511;"	d
CV_32FC3	/usr/include/opencv/cxtypes.h	512;"	d
CV_32FC4	/usr/include/opencv/cxtypes.h	513;"	d
CV_32S	/usr/include/opencv/cxtypes.h	472;"	d
CV_32SC	/usr/include/opencv/cxtypes.h	508;"	d
CV_32SC1	/usr/include/opencv/cxtypes.h	504;"	d
CV_32SC2	/usr/include/opencv/cxtypes.h	505;"	d
CV_32SC3	/usr/include/opencv/cxtypes.h	506;"	d
CV_32SC4	/usr/include/opencv/cxtypes.h	507;"	d
CV_64F	/usr/include/opencv/cxtypes.h	474;"	d
CV_64FC	/usr/include/opencv/cxtypes.h	520;"	d
CV_64FC1	/usr/include/opencv/cxtypes.h	516;"	d
CV_64FC2	/usr/include/opencv/cxtypes.h	517;"	d
CV_64FC3	/usr/include/opencv/cxtypes.h	518;"	d
CV_64FC4	/usr/include/opencv/cxtypes.h	519;"	d
CV_8S	/usr/include/opencv/cxtypes.h	469;"	d
CV_8SC	/usr/include/opencv/cxtypes.h	490;"	d
CV_8SC1	/usr/include/opencv/cxtypes.h	486;"	d
CV_8SC2	/usr/include/opencv/cxtypes.h	487;"	d
CV_8SC3	/usr/include/opencv/cxtypes.h	488;"	d
CV_8SC4	/usr/include/opencv/cxtypes.h	489;"	d
CV_8U	/usr/include/opencv/cxtypes.h	468;"	d
CV_8UC	/usr/include/opencv/cxtypes.h	484;"	d
CV_8UC1	/usr/include/opencv/cxtypes.h	480;"	d
CV_8UC2	/usr/include/opencv/cxtypes.h	481;"	d
CV_8UC3	/usr/include/opencv/cxtypes.h	482;"	d
CV_8UC4	/usr/include/opencv/cxtypes.h	483;"	d
CV_AA	/usr/include/opencv/cxcore.h	1283;"	d
CV_ADAPTIVE_THRESH_GAUSSIAN_C	/usr/include/opencv/cv.h	958;"	d
CV_ADAPTIVE_THRESH_MEAN_C	/usr/include/opencv/cv.h	957;"	d
CV_ADD	/usr/include/opencv/cxmisc.h	171;"	d
CV_AND	/usr/include/opencv/cxmisc.h	174;"	d
CV_ANDMASK	/usr/include/opencv/cxmisc.h	209;"	d
CV_ANDN	/usr/include/opencv/cxmisc.h	177;"	d
CV_ARE_CNS_EQ	/usr/include/opencv/cxtypes.h	596;"	d
CV_ARE_DEPTHS_EQ	/usr/include/opencv/cxtypes.h	599;"	d
CV_ARE_SIZES_EQ	/usr/include/opencv/cxtypes.h	602;"	d
CV_ARE_TYPES_EQ	/usr/include/opencv/cxtypes.h	593;"	d
CV_ARRAY	/usr/include/opencv/cv.h	915;"	d
CV_ASSERT	/usr/include/opencv/cxerror.h	176;"	d
CV_AUTOSTEP	/usr/include/opencv/cxcore.h	135;"	d
CV_AUTO_STEP	/usr/include/opencv/cxtypes.h	522;"	d
CV_BACK	/usr/include/opencv/cxcore.h	987;"	d
CV_BADARG_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADARG_ERR      = -49,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADCHANNELS_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADCHANNELS_ERR = -47,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADCOEF_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADCOEF_ERR     =  -10,$/;"	e	enum:CvStatus
CV_BADCONVERGENCE_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADCONVERGENCE_ERR       = -109,$/;"	e	enum:CvStatus
CV_BADDEPTH_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADDEPTH_ERR             = -107,$/;"	e	enum:CvStatus
CV_BADFACTOR_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADFACTOR_ERR   =  -7,$/;"	e	enum:CvStatus
CV_BADFLAG_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADFLAG_ERR     =  -12,$/;"	e	enum:CvStatus
CV_BADHEADER_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADHEADER_ERR            = -105,$/;"	e	enum:CvStatus
CV_BADMEMBLOCK_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADMEMBLOCK_ERR          = -113,$/;"	e	enum:CvStatus
CV_BADPOINT_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADPOINT_ERR    =  -6,$/;"	e	enum:CvStatus
CV_BADRANGE_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADRANGE_ERR    = -44,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BADROI_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADROI_ERR               = -106,$/;"	e	enum:CvStatus
CV_BADSCALE_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADSCALE_ERR    =  -4,$/;"	e	enum:CvStatus
CV_BADSIZE_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADSIZE_ERR     =  -1,$/;"	e	enum:CvStatus
CV_BADSTEP_ERR	/usr/include/opencv/cxmisc.h	/^    CV_BADSTEP_ERR     = -29,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_BGFG_FGD_ALPHA_1	/usr/include/opencv/cvaux.h	1217;"	d
CV_BGFG_FGD_ALPHA_2	/usr/include/opencv/cvaux.h	1222;"	d
CV_BGFG_FGD_ALPHA_3	/usr/include/opencv/cvaux.h	1225;"	d
CV_BGFG_FGD_BG_UPDATE_TRESH	/usr/include/opencv/cvaux.h	1233;"	d
CV_BGFG_FGD_DELTA	/usr/include/opencv/cvaux.h	1227;"	d
CV_BGFG_FGD_LC	/usr/include/opencv/cvaux.h	1208;"	d
CV_BGFG_FGD_LCC	/usr/include/opencv/cvaux.h	1212;"	d
CV_BGFG_FGD_MINAREA	/usr/include/opencv/cvaux.h	1231;"	d
CV_BGFG_FGD_N1C	/usr/include/opencv/cvaux.h	1209;"	d
CV_BGFG_FGD_N1CC	/usr/include/opencv/cvaux.h	1213;"	d
CV_BGFG_FGD_N2C	/usr/include/opencv/cvaux.h	1210;"	d
CV_BGFG_FGD_N2CC	/usr/include/opencv/cvaux.h	1214;"	d
CV_BGFG_FGD_T	/usr/include/opencv/cvaux.h	1229;"	d
CV_BGFG_MOG_BACKGROUND_THRESHOLD	/usr/include/opencv/cvaux.h	1329;"	d
CV_BGFG_MOG_MAX_NGAUSSIANS	/usr/include/opencv/cvaux.h	1326;"	d
CV_BGFG_MOG_MINAREA	/usr/include/opencv/cvaux.h	1335;"	d
CV_BGFG_MOG_NCOLORS	/usr/include/opencv/cvaux.h	1338;"	d
CV_BGFG_MOG_NGAUSSIANS	/usr/include/opencv/cvaux.h	1332;"	d
CV_BGFG_MOG_SIGMA_INIT	/usr/include/opencv/cvaux.h	1334;"	d
CV_BGFG_MOG_STD_THRESHOLD	/usr/include/opencv/cvaux.h	1330;"	d
CV_BGFG_MOG_WEIGHT_INIT	/usr/include/opencv/cvaux.h	1333;"	d
CV_BGFG_MOG_WINDOW_SIZE	/usr/include/opencv/cvaux.h	1331;"	d
CV_BGR2BGR555	/usr/include/opencv/cv.h	202;"	d
CV_BGR2BGR565	/usr/include/opencv/cv.h	190;"	d
CV_BGR2BGRA	/usr/include/opencv/cv.h	163;"	d
CV_BGR2GRAY	/usr/include/opencv/cv.h	181;"	d
CV_BGR2HLS	/usr/include/opencv/cv.h	242;"	d
CV_BGR2HSV	/usr/include/opencv/cv.h	224;"	d
CV_BGR2Lab	/usr/include/opencv/cv.h	227;"	d
CV_BGR2Luv	/usr/include/opencv/cv.h	240;"	d
CV_BGR2RGB	/usr/include/opencv/cv.h	175;"	d
CV_BGR2RGBA	/usr/include/opencv/cv.h	169;"	d
CV_BGR2XYZ	/usr/include/opencv/cv.h	214;"	d
CV_BGR2YCrCb	/usr/include/opencv/cv.h	219;"	d
CV_BGR5552BGR	/usr/include/opencv/cv.h	204;"	d
CV_BGR5552BGRA	/usr/include/opencv/cv.h	208;"	d
CV_BGR5552GRAY	/usr/include/opencv/cv.h	212;"	d
CV_BGR5552RGB	/usr/include/opencv/cv.h	205;"	d
CV_BGR5552RGBA	/usr/include/opencv/cv.h	209;"	d
CV_BGR5652BGR	/usr/include/opencv/cv.h	192;"	d
CV_BGR5652BGRA	/usr/include/opencv/cv.h	196;"	d
CV_BGR5652GRAY	/usr/include/opencv/cv.h	200;"	d
CV_BGR5652RGB	/usr/include/opencv/cv.h	193;"	d
CV_BGR5652RGBA	/usr/include/opencv/cv.h	197;"	d
CV_BGRA2BGR	/usr/include/opencv/cv.h	166;"	d
CV_BGRA2BGR555	/usr/include/opencv/cv.h	206;"	d
CV_BGRA2BGR565	/usr/include/opencv/cv.h	194;"	d
CV_BGRA2GRAY	/usr/include/opencv/cv.h	187;"	d
CV_BGRA2RGB	/usr/include/opencv/cv.h	173;"	d
CV_BGRA2RGBA	/usr/include/opencv/cv.h	178;"	d
CV_BG_MODEL_FGD	/usr/include/opencv/cvaux.h	1150;"	d
CV_BG_MODEL_FGD_SIMPLE	/usr/include/opencv/cvaux.h	1152;"	d
CV_BG_MODEL_MOG	/usr/include/opencv/cvaux.h	1151;"	d
CV_BG_STAT_MODEL_FIELDS	/usr/include/opencv/cvaux.h	1159;"	d
CV_BIG_INT	/usr/include/opencv/cxmisc.h	141;"	d
CV_BIG_INT	/usr/include/opencv/cxmisc.h	144;"	d
CV_BIG_UINT	/usr/include/opencv/cxmisc.h	142;"	d
CV_BIG_UINT	/usr/include/opencv/cxmisc.h	145;"	d
CV_BILATERAL	/usr/include/opencv/cv.h	78;"	d
CV_BLOB_CENTER	/usr/include/opencv/cvvidsurv.hpp	442;"	d
CV_BLOB_ID	/usr/include/opencv/cvvidsurv.hpp	441;"	d
CV_BLOB_MINH	/usr/include/opencv/cvvidsurv.hpp	440;"	d
CV_BLOB_MINW	/usr/include/opencv/cvvidsurv.hpp	439;"	d
CV_BLOB_RECT	/usr/include/opencv/cvvidsurv.hpp	449;"	d
CV_BLOB_RX	/usr/include/opencv/cvvidsurv.hpp	447;"	d
CV_BLOB_RY	/usr/include/opencv/cvvidsurv.hpp	448;"	d
CV_BLOB_WX	/usr/include/opencv/cvvidsurv.hpp	445;"	d
CV_BLOB_WY	/usr/include/opencv/cvvidsurv.hpp	446;"	d
CV_BLOB_X	/usr/include/opencv/cvvidsurv.hpp	443;"	d
CV_BLOB_Y	/usr/include/opencv/cvvidsurv.hpp	444;"	d
CV_BLUR	/usr/include/opencv/cv.h	75;"	d
CV_BLUR_NO_SCALE	/usr/include/opencv/cv.h	74;"	d
CV_BT_HIST_TYPE_H	/usr/include/opencv/cvvidsurv.hpp	1249;"	d
CV_BT_HIST_TYPE_MG	/usr/include/opencv/cvvidsurv.hpp	1247;"	d
CV_BT_HIST_TYPE_MG2	/usr/include/opencv/cvvidsurv.hpp	1248;"	d
CV_BT_HIST_TYPE_S	/usr/include/opencv/cvvidsurv.hpp	1246;"	d
CV_BadAlign	/usr/include/opencv/cxerror.h	74;"	d
CV_BadAlphaChannel	/usr/include/opencv/cxerror.h	71;"	d
CV_BadCOI	/usr/include/opencv/cxerror.h	77;"	d
CV_BadCallBack	/usr/include/opencv/cxerror.h	75;"	d
CV_BadDataPtr	/usr/include/opencv/cxerror.h	65;"	d
CV_BadDepth	/usr/include/opencv/cxerror.h	70;"	d
CV_BadImageSize	/usr/include/opencv/cxerror.h	63;"	d
CV_BadModelOrChSeq	/usr/include/opencv/cxerror.h	67;"	d
CV_BadNumChannel1U	/usr/include/opencv/cxerror.h	69;"	d
CV_BadNumChannels	/usr/include/opencv/cxerror.h	68;"	d
CV_BadOffset	/usr/include/opencv/cxerror.h	64;"	d
CV_BadOrder	/usr/include/opencv/cxerror.h	72;"	d
CV_BadOrigin	/usr/include/opencv/cxerror.h	73;"	d
CV_BadROISize	/usr/include/opencv/cxerror.h	78;"	d
CV_BadStep	/usr/include/opencv/cxerror.h	66;"	d
CV_BadTileSize	/usr/include/opencv/cxerror.h	76;"	d
CV_BayerBG2BGR	/usr/include/opencv/cv.h	230;"	d
CV_BayerBG2RGB	/usr/include/opencv/cv.h	235;"	d
CV_BayerGB2BGR	/usr/include/opencv/cv.h	231;"	d
CV_BayerGB2RGB	/usr/include/opencv/cv.h	236;"	d
CV_BayerGR2BGR	/usr/include/opencv/cv.h	233;"	d
CV_BayerGR2RGB	/usr/include/opencv/cv.h	238;"	d
CV_BayerRG2BGR	/usr/include/opencv/cv.h	232;"	d
CV_BayerRG2RGB	/usr/include/opencv/cv.h	237;"	d
CV_C	/usr/include/opencv/cxcore.h	855;"	d
CV_CALIB_CB_ADAPTIVE_THRESH	/usr/include/opencv/cv.h	1245;"	d
CV_CALIB_CB_FILTER_QUADS	/usr/include/opencv/cv.h	1247;"	d
CV_CALIB_CB_NORMALIZE_IMAGE	/usr/include/opencv/cv.h	1246;"	d
CV_CALIB_ETALON_CHECKERBOARD	/usr/include/opencv/cvaux.h	/^    CV_CALIB_ETALON_CHECKERBOARD = CV_CALIB_ETALON_CHESSBOARD$/;"	e	enum:CvCalibEtalonType
CV_CALIB_ETALON_CHESSBOARD	/usr/include/opencv/cvaux.h	/^    CV_CALIB_ETALON_CHESSBOARD = 0,$/;"	e	enum:CvCalibEtalonType
CV_CALIB_ETALON_USER	/usr/include/opencv/cvaux.h	/^    CV_CALIB_ETALON_USER = -1,$/;"	e	enum:CvCalibEtalonType
CV_CALIB_FIX_ASPECT_RATIO	/usr/include/opencv/cv.h	1262;"	d
CV_CALIB_FIX_FOCAL_LENGTH	/usr/include/opencv/cv.h	1265;"	d
CV_CALIB_FIX_INTRINSIC	/usr/include/opencv/cv.h	1294;"	d
CV_CALIB_FIX_K1	/usr/include/opencv/cv.h	1266;"	d
CV_CALIB_FIX_K2	/usr/include/opencv/cv.h	1267;"	d
CV_CALIB_FIX_K3	/usr/include/opencv/cv.h	1268;"	d
CV_CALIB_FIX_PRINCIPAL_POINT	/usr/include/opencv/cv.h	1263;"	d
CV_CALIB_SAME_FOCAL_LENGTH	/usr/include/opencv/cv.h	1295;"	d
CV_CALIB_USE_INTRINSIC_GUESS	/usr/include/opencv/cv.h	1261;"	d
CV_CALIB_ZERO_DISPARITY	/usr/include/opencv/cv.h	1310;"	d
CV_CALIB_ZERO_TANGENT_DIST	/usr/include/opencv/cv.h	1264;"	d
CV_CALL	/usr/include/opencv/cxerror.h	168;"	d
CV_CAMERA_TO_WARP	/usr/include/opencv/cvaux.h	550;"	d
CV_CANNY_L2_GRADIENT	/usr/include/opencv/cv.h	986;"	d
CV_CAP_ANY	/usr/include/opencv/highgui.h	221;"	d
CV_CAP_CMU1394	/usr/include/opencv/highgui.h	233;"	d
CV_CAP_DC1394	/usr/include/opencv/highgui.h	232;"	d
CV_CAP_DSHOW	/usr/include/opencv/highgui.h	246;"	d
CV_CAP_FIREWARE	/usr/include/opencv/highgui.h	229;"	d
CV_CAP_FIREWIRE	/usr/include/opencv/highgui.h	230;"	d
CV_CAP_IEEE1394	/usr/include/opencv/highgui.h	231;"	d
CV_CAP_MIL	/usr/include/opencv/highgui.h	223;"	d
CV_CAP_PROP_BRIGHTNESS	/usr/include/opencv/highgui.h	278;"	d
CV_CAP_PROP_CONTRAST	/usr/include/opencv/highgui.h	279;"	d
CV_CAP_PROP_CONVERT_RGB	/usr/include/opencv/highgui.h	283;"	d
CV_CAP_PROP_FORMAT	/usr/include/opencv/highgui.h	276;"	d
CV_CAP_PROP_FOURCC	/usr/include/opencv/highgui.h	274;"	d
CV_CAP_PROP_FPS	/usr/include/opencv/highgui.h	273;"	d
CV_CAP_PROP_FRAME_COUNT	/usr/include/opencv/highgui.h	275;"	d
CV_CAP_PROP_FRAME_HEIGHT	/usr/include/opencv/highgui.h	272;"	d
CV_CAP_PROP_FRAME_WIDTH	/usr/include/opencv/highgui.h	271;"	d
CV_CAP_PROP_GAIN	/usr/include/opencv/highgui.h	282;"	d
CV_CAP_PROP_HUE	/usr/include/opencv/highgui.h	281;"	d
CV_CAP_PROP_MODE	/usr/include/opencv/highgui.h	277;"	d
CV_CAP_PROP_POS_AVI_RATIO	/usr/include/opencv/highgui.h	270;"	d
CV_CAP_PROP_POS_FRAMES	/usr/include/opencv/highgui.h	269;"	d
CV_CAP_PROP_POS_MSEC	/usr/include/opencv/highgui.h	268;"	d
CV_CAP_PROP_SATURATION	/usr/include/opencv/highgui.h	280;"	d
CV_CAP_QT	/usr/include/opencv/highgui.h	242;"	d
CV_CAP_STEREO	/usr/include/opencv/highgui.h	235;"	d
CV_CAP_TYZX	/usr/include/opencv/highgui.h	236;"	d
CV_CAP_UNICAP	/usr/include/opencv/highgui.h	244;"	d
CV_CAP_V4L	/usr/include/opencv/highgui.h	226;"	d
CV_CAP_V4L2	/usr/include/opencv/highgui.h	227;"	d
CV_CAP_VFW	/usr/include/opencv/highgui.h	225;"	d
CV_CAST_16S	/usr/include/opencv/cxmisc.h	195;"	d
CV_CAST_16U	/usr/include/opencv/cxmisc.h	194;"	d
CV_CAST_32F	/usr/include/opencv/cxmisc.h	198;"	d
CV_CAST_32S	/usr/include/opencv/cxmisc.h	196;"	d
CV_CAST_64F	/usr/include/opencv/cxmisc.h	199;"	d
CV_CAST_64S	/usr/include/opencv/cxmisc.h	197;"	d
CV_CAST_8S	/usr/include/opencv/cxmisc.h	193;"	d
CV_CAST_8U	/usr/include/opencv/cxmisc.h	192;"	d
CV_CDECL	/usr/include/opencv/cxtypes.h	96;"	d
CV_CDECL	/usr/include/opencv/cxtypes.h	99;"	d
CV_CDECL	/usr/include/opencv/highgui.h	55;"	d
CV_CDECL	/usr/include/opencv/highgui.h	58;"	d
CV_CDECL	/usr/include/opencv/ml.h	61;"	d
CV_CDECL	/usr/include/opencv/ml.h	64;"	d
CV_CHAIN_APPROX_NONE	/usr/include/opencv/cvtypes.h	92;"	d
CV_CHAIN_APPROX_SIMPLE	/usr/include/opencv/cvtypes.h	93;"	d
CV_CHAIN_APPROX_TC89_KCOS	/usr/include/opencv/cvtypes.h	95;"	d
CV_CHAIN_APPROX_TC89_L1	/usr/include/opencv/cvtypes.h	94;"	d
CV_CHAIN_CODE	/usr/include/opencv/cvtypes.h	91;"	d
CV_CHECK	/usr/include/opencv/cxerror.h	156;"	d
CV_CHECK_NANS	/usr/include/opencv/cxmisc.h	114;"	d
CV_CHECK_QUIET	/usr/include/opencv/cxcore.h	666;"	d
CV_CHECK_RANGE	/usr/include/opencv/cxcore.h	665;"	d
CV_CLOCKWISE	/usr/include/opencv/cv.h	781;"	d
CV_CMP	/usr/include/opencv/cxtypes.h	207;"	d
CV_CMP_EQ	/usr/include/opencv/cxcore.h	589;"	d
CV_CMP_GE	/usr/include/opencv/cxcore.h	591;"	d
CV_CMP_GT	/usr/include/opencv/cxcore.h	590;"	d
CV_CMP_LE	/usr/include/opencv/cxcore.h	593;"	d
CV_CMP_LT	/usr/include/opencv/cxcore.h	592;"	d
CV_CMP_NE	/usr/include/opencv/cxcore.h	594;"	d
CV_CN_MAX	/usr/include/opencv/cxtypes.h	464;"	d
CV_CN_SHIFT	/usr/include/opencv/cxtypes.h	465;"	d
CV_COLORCVT_MAX	/usr/include/opencv/cv.h	255;"	d
CV_COL_SAMPLE	/usr/include/opencv/ml.h	123;"	d
CV_COMP_BHATTACHARYYA	/usr/include/opencv/cv.h	862;"	d
CV_COMP_CHISQR	/usr/include/opencv/cv.h	860;"	d
CV_COMP_CORREL	/usr/include/opencv/cv.h	859;"	d
CV_COMP_INTERSECT	/usr/include/opencv/cv.h	861;"	d
CV_CONTOURS_MATCH_I1	/usr/include/opencv/cv.h	753;"	d
CV_CONTOURS_MATCH_I2	/usr/include/opencv/cv.h	754;"	d
CV_CONTOURS_MATCH_I3	/usr/include/opencv/cv.h	755;"	d
CV_CONTOUR_FIELDS	/usr/include/opencv/cxtypes.h	1341;"	d
CV_CONTOUR_TREES_MATCH_I1	/usr/include/opencv/cv.h	772;"	d
CV_COUNTER_CLOCKWISE	/usr/include/opencv/cv.h	782;"	d
CV_COUNT_OBS	/usr/include/opencv/cvaux.h	174;"	d
CV_COVAR_COLS	/usr/include/opencv/cxcore.h	810;"	d
CV_COVAR_NORMAL	/usr/include/opencv/cxcore.h	797;"	d
CV_COVAR_ROWS	/usr/include/opencv/cxcore.h	807;"	d
CV_COVAR_SCALE	/usr/include/opencv/cxcore.h	804;"	d
CV_COVAR_SCRAMBLED	/usr/include/opencv/cxcore.h	794;"	d
CV_COVAR_USE_AVG	/usr/include/opencv/cxcore.h	801;"	d
CV_CURRENT_INT	/usr/include/opencv/cvaux.h	276;"	d
CV_CURRENT_POINT	/usr/include/opencv/cxtypes.h	1601;"	d
CV_CVTIMG_FLIP	/usr/include/opencv/highgui.h	202;"	d
CV_CVTIMG_SWAP_RB	/usr/include/opencv/highgui.h	203;"	d
CV_DBG_BREAK	/usr/include/opencv/cxmisc.h	150;"	d
CV_DEFAULT	/usr/include/opencv/cxtypes.h	106;"	d
CV_DEFAULT	/usr/include/opencv/cxtypes.h	109;"	d
CV_DEFAULT	/usr/include/opencv/highgui.h	65;"	d
CV_DEFAULT	/usr/include/opencv/highgui.h	68;"	d
CV_DEFAULT	/usr/include/opencv/ml.h	71;"	d
CV_DEFAULT	/usr/include/opencv/ml.h	74;"	d
CV_DEFAULT_IMAGE_ROW_ALIGN	/usr/include/opencv/cxmisc.h	74;"	d
CV_DEFAULT_MAT_ROW_ALIGN	/usr/include/opencv/cxmisc.h	77;"	d
CV_DEFINE_MASK	/usr/include/opencv/cxmisc.h	207;"	d
CV_DEF_INIT_BIG_FUNC_TAB_2D	/usr/include/opencv/cxmisc.h	840;"	d
CV_DEF_INIT_FUNC_TAB_0D	/usr/include/opencv/cxmisc.h	881;"	d
CV_DEF_INIT_FUNC_TAB_1D	/usr/include/opencv/cxmisc.h	893;"	d
CV_DEF_INIT_FUNC_TAB_2D	/usr/include/opencv/cxmisc.h	825;"	d
CV_DEF_INIT_PIXSIZE_TAB_2D	/usr/include/opencv/cxmisc.h	896;"	d
CV_DEPTH_MAX	/usr/include/opencv/cxtypes.h	466;"	d
CV_DESCALE	/usr/include/opencv/cxmisc.h	253;"	d
CV_DIFF	/usr/include/opencv/cxcore.h	860;"	d
CV_DIFF_C	/usr/include/opencv/cxcore.h	863;"	d
CV_DIFF_L1	/usr/include/opencv/cxcore.h	864;"	d
CV_DIFF_L2	/usr/include/opencv/cxcore.h	865;"	d
CV_DIM	/usr/include/opencv/cxmisc.h	219;"	d
CV_DISPARITY_BIRCHFIELD	/usr/include/opencv/cvaux.h	453;"	d
CV_DIST_C	/usr/include/opencv/cvtypes.h	208;"	d
CV_DIST_FAIR	/usr/include/opencv/cvtypes.h	210;"	d
CV_DIST_HUBER	/usr/include/opencv/cvtypes.h	212;"	d
CV_DIST_L1	/usr/include/opencv/cvtypes.h	206;"	d
CV_DIST_L12	/usr/include/opencv/cvtypes.h	209;"	d
CV_DIST_L2	/usr/include/opencv/cvtypes.h	207;"	d
CV_DIST_MASK_3	/usr/include/opencv/cv.h	928;"	d
CV_DIST_MASK_5	/usr/include/opencv/cv.h	929;"	d
CV_DIST_MASK_PRECISE	/usr/include/opencv/cv.h	930;"	d
CV_DIST_USER	/usr/include/opencv/cvtypes.h	205;"	d
CV_DIST_WELSCH	/usr/include/opencv/cvtypes.h	211;"	d
CV_DIV_BY_ZERO_ERR	/usr/include/opencv/cxmisc.h	/^    CV_DIV_BY_ZERO_ERR =  -11, \/\/ipp comp$/;"	e	enum:CvStatus
CV_DOMINANT_IPAN	/usr/include/opencv/cv.h	721;"	d
CV_DTREE_CAT_DIR	/usr/include/opencv/ml.h	649;"	d
CV_DXT_FORWARD	/usr/include/opencv/cxcore.h	893;"	d
CV_DXT_INVERSE	/usr/include/opencv/cxcore.h	894;"	d
CV_DXT_INVERSE_SCALE	/usr/include/opencv/cxcore.h	897;"	d
CV_DXT_INV_SCALE	/usr/include/opencv/cxcore.h	896;"	d
CV_DXT_MUL_CONJ	/usr/include/opencv/cxcore.h	899;"	d
CV_DXT_ROWS	/usr/include/opencv/cxcore.h	898;"	d
CV_DXT_SCALE	/usr/include/opencv/cxcore.h	895;"	d
CV_EIGOBJ_BOTH_CALLBACK	/usr/include/opencv/cvaux.h	71;"	d
CV_EIGOBJ_INPUT_CALLBACK	/usr/include/opencv/cvaux.h	69;"	d
CV_EIGOBJ_NO_CALLBACK	/usr/include/opencv/cvaux.h	68;"	d
CV_EIGOBJ_OUTPUT_CALLBACK	/usr/include/opencv/cvaux.h	70;"	d
CV_ELEM_SIZE	/usr/include/opencv/cxtypes.h	614;"	d
CV_ELEM_SIZE1	/usr/include/opencv/cxtypes.h	610;"	d
CV_EMPTY	/usr/include/opencv/cxmisc.h	204;"	d
CV_END	/usr/include/opencv/cv.hpp	53;"	d
CV_EQ	/usr/include/opencv/cxmisc.h	183;"	d
CV_ERROR	/usr/include/opencv/cxerror.h	141;"	d
CV_ERROR_FROM_CODE	/usr/include/opencv/cxerror.h	148;"	d
CV_ERROR_FROM_STATUS	/usr/include/opencv/cxmisc.h	632;"	d
CV_EVENT_FLAG_ALTKEY	/usr/include/opencv/highgui.h	171;"	d
CV_EVENT_FLAG_CTRLKEY	/usr/include/opencv/highgui.h	169;"	d
CV_EVENT_FLAG_LBUTTON	/usr/include/opencv/highgui.h	166;"	d
CV_EVENT_FLAG_MBUTTON	/usr/include/opencv/highgui.h	168;"	d
CV_EVENT_FLAG_RBUTTON	/usr/include/opencv/highgui.h	167;"	d
CV_EVENT_FLAG_SHIFTKEY	/usr/include/opencv/highgui.h	170;"	d
CV_EVENT_LBUTTONDBLCLK	/usr/include/opencv/highgui.h	162;"	d
CV_EVENT_LBUTTONDOWN	/usr/include/opencv/highgui.h	156;"	d
CV_EVENT_LBUTTONUP	/usr/include/opencv/highgui.h	159;"	d
CV_EVENT_MBUTTONDBLCLK	/usr/include/opencv/highgui.h	164;"	d
CV_EVENT_MBUTTONDOWN	/usr/include/opencv/highgui.h	158;"	d
CV_EVENT_MBUTTONUP	/usr/include/opencv/highgui.h	161;"	d
CV_EVENT_MOUSEMOVE	/usr/include/opencv/highgui.h	155;"	d
CV_EVENT_RBUTTONDBLCLK	/usr/include/opencv/highgui.h	163;"	d
CV_EVENT_RBUTTONDOWN	/usr/include/opencv/highgui.h	157;"	d
CV_EVENT_RBUTTONUP	/usr/include/opencv/highgui.h	160;"	d
CV_EXPORTS	/usr/include/opencv/cxtypes.h	132;"	d
CV_EXPORTS	/usr/include/opencv/cxtypes.h	134;"	d
CV_EXPORTS	/usr/include/opencv/highgui.h	91;"	d
CV_EXPORTS	/usr/include/opencv/highgui.h	93;"	d
CV_EXPORTS	/usr/include/opencv/ml.h	97;"	d
CV_EXPORTS	/usr/include/opencv/ml.h	99;"	d
CV_EXTERN_C	/usr/include/opencv/cxtypes.h	105;"	d
CV_EXTERN_C	/usr/include/opencv/cxtypes.h	108;"	d
CV_EXTERN_C	/usr/include/opencv/highgui.h	64;"	d
CV_EXTERN_C	/usr/include/opencv/highgui.h	67;"	d
CV_EXTERN_C	/usr/include/opencv/ml.h	70;"	d
CV_EXTERN_C	/usr/include/opencv/ml.h	73;"	d
CV_EXTERN_C_FUNCPTR	/usr/include/opencv/cxtypes.h	115;"	d
CV_EXTERN_C_FUNCPTR	/usr/include/opencv/cxtypes.h	117;"	d
CV_EXTERN_C_FUNCPTR	/usr/include/opencv/highgui.h	74;"	d
CV_EXTERN_C_FUNCPTR	/usr/include/opencv/highgui.h	76;"	d
CV_EXTERN_C_FUNCPTR	/usr/include/opencv/ml.h	80;"	d
CV_EXTERN_C_FUNCPTR	/usr/include/opencv/ml.h	82;"	d
CV_ErrModeLeaf	/usr/include/opencv/cxcore.h	1498;"	d
CV_ErrModeParent	/usr/include/opencv/cxcore.h	1499;"	d
CV_ErrModeSilent	/usr/include/opencv/cxcore.h	1500;"	d
CV_FACE_ELEMENTS	/usr/include/opencv/cvaux.h	/^enum CV_FACE_ELEMENTS$/;"	g
CV_FACE_LEFT_EYE	/usr/include/opencv/cvaux.h	/^    CV_FACE_LEFT_EYE = 1,$/;"	e	enum:CV_FACE_ELEMENTS
CV_FACE_MOUTH	/usr/include/opencv/cvaux.h	/^    CV_FACE_MOUTH = 0,$/;"	e	enum:CV_FACE_ELEMENTS
CV_FACE_RIGHT_EYE	/usr/include/opencv/cvaux.h	/^    CV_FACE_RIGHT_EYE = 2$/;"	e	enum:CV_FACE_ELEMENTS
CV_FILLED	/usr/include/opencv/cxcore.h	1281;"	d
CV_FIRST_VORONOIEDGE2D	/usr/include/opencv/cvaux.h	934;"	d
CV_FLOODFILL_FIXED_RANGE	/usr/include/opencv/cv.h	971;"	d
CV_FLOODFILL_MASK_ONLY	/usr/include/opencv/cv.h	972;"	d
CV_FLT_TO_FIX	/usr/include/opencv/cxmisc.h	254;"	d
CV_FM_7POINT	/usr/include/opencv/cv.h	1350;"	d
CV_FM_8POINT	/usr/include/opencv/cv.h	1351;"	d
CV_FM_LMEDS	/usr/include/opencv/cv.h	1354;"	d
CV_FM_LMEDS_ONLY	/usr/include/opencv/cv.h	1352;"	d
CV_FM_RANSAC	/usr/include/opencv/cv.h	1355;"	d
CV_FM_RANSAC_ONLY	/usr/include/opencv/cv.h	1353;"	d
CV_FONT_HERSHEY_COMPLEX	/usr/include/opencv/cxcore.h	1370;"	d
CV_FONT_HERSHEY_COMPLEX_SMALL	/usr/include/opencv/cxcore.h	1372;"	d
CV_FONT_HERSHEY_DUPLEX	/usr/include/opencv/cxcore.h	1369;"	d
CV_FONT_HERSHEY_PLAIN	/usr/include/opencv/cxcore.h	1368;"	d
CV_FONT_HERSHEY_SCRIPT_COMPLEX	/usr/include/opencv/cxcore.h	1374;"	d
CV_FONT_HERSHEY_SCRIPT_SIMPLEX	/usr/include/opencv/cxcore.h	1373;"	d
CV_FONT_HERSHEY_SIMPLEX	/usr/include/opencv/cxcore.h	1367;"	d
CV_FONT_HERSHEY_TRIPLEX	/usr/include/opencv/cxcore.h	1371;"	d
CV_FONT_ITALIC	/usr/include/opencv/cxcore.h	1377;"	d
CV_FONT_VECTOR0	/usr/include/opencv/cxcore.h	1379;"	d
CV_FOURCC	/usr/include/opencv/highgui.h	293;"	d
CV_FOURCC_DEFAULT	/usr/include/opencv/highgui.h	297;"	d
CV_FOURCC_PROMPT	/usr/include/opencv/highgui.h	296;"	d
CV_FRONT	/usr/include/opencv/cxcore.h	986;"	d
CV_FUNCNAME	/usr/include/opencv/cxerror.h	129;"	d
CV_FUNCNAME	/usr/include/opencv/cxerror.h	132;"	d
CV_GAUSSIAN	/usr/include/opencv/cv.h	76;"	d
CV_GAUSSIAN_5x5	/usr/include/opencv/cvtypes.h	/^    CV_GAUSSIAN_5x5 = 7$/;"	e	enum:CvFilter
CV_GE	/usr/include/opencv/cxmisc.h	186;"	d
CV_GEMM_A_T	/usr/include/opencv/cxcore.h	706;"	d
CV_GEMM_B_T	/usr/include/opencv/cxcore.h	707;"	d
CV_GEMM_C_T	/usr/include/opencv/cxcore.h	708;"	d
CV_GET_CURRENT	/usr/include/opencv/cvcompat.h	975;"	d
CV_GET_FUNC_PTR	/usr/include/opencv/cxmisc.h	911;"	d
CV_GET_SEQ_ELEM	/usr/include/opencv/cxtypes.h	1527;"	d
CV_GLCMDESC_CLUSTERSHADE	/usr/include/opencv/cvaux.h	783;"	d
CV_GLCMDESC_CLUSTERTENDENCY	/usr/include/opencv/cvaux.h	782;"	d
CV_GLCMDESC_CONTRAST	/usr/include/opencv/cvaux.h	781;"	d
CV_GLCMDESC_CORRELATION	/usr/include/opencv/cvaux.h	784;"	d
CV_GLCMDESC_CORRELATIONINFO1	/usr/include/opencv/cvaux.h	785;"	d
CV_GLCMDESC_CORRELATIONINFO2	/usr/include/opencv/cvaux.h	786;"	d
CV_GLCMDESC_ENERGY	/usr/include/opencv/cvaux.h	779;"	d
CV_GLCMDESC_ENTROPY	/usr/include/opencv/cvaux.h	778;"	d
CV_GLCMDESC_HOMOGENITY	/usr/include/opencv/cvaux.h	780;"	d
CV_GLCMDESC_MAXIMUMPROBABILITY	/usr/include/opencv/cvaux.h	787;"	d
CV_GLCMDESC_OPTIMIZATION_ALLOWDOUBLENEST	/usr/include/opencv/cvaux.h	774;"	d
CV_GLCMDESC_OPTIMIZATION_ALLOWTRIPLENEST	/usr/include/opencv/cvaux.h	775;"	d
CV_GLCMDESC_OPTIMIZATION_HISTOGRAM	/usr/include/opencv/cvaux.h	776;"	d
CV_GLCM_ALL	/usr/include/opencv/cvaux.h	789;"	d
CV_GLCM_DESC	/usr/include/opencv/cvaux.h	791;"	d
CV_GLCM_GLCM	/usr/include/opencv/cvaux.h	790;"	d
CV_GLCM_OPTIMIZATION_HISTOGRAM	/usr/include/opencv/cvaux.h	772;"	d
CV_GLCM_OPTIMIZATION_LUT	/usr/include/opencv/cvaux.h	771;"	d
CV_GLCM_OPTIMIZATION_NONE	/usr/include/opencv/cvaux.h	770;"	d
CV_GRAPH	/usr/include/opencv/cxtypes.h	1406;"	d
CV_GRAPH_ALL_ITEMS	/usr/include/opencv/cxcore.h	1228;"	d
CV_GRAPH_ANY_EDGE	/usr/include/opencv/cxcore.h	1223;"	d
CV_GRAPH_BACKTRACKING	/usr/include/opencv/cxcore.h	1225;"	d
CV_GRAPH_BACK_EDGE	/usr/include/opencv/cxcore.h	1220;"	d
CV_GRAPH_CROSS_EDGE	/usr/include/opencv/cxcore.h	1222;"	d
CV_GRAPH_EDGE_FIELDS	/usr/include/opencv/cxtypes.h	1285;"	d
CV_GRAPH_FIELDS	/usr/include/opencv/cxtypes.h	1320;"	d
CV_GRAPH_FLAG_ORIENTED	/usr/include/opencv/cxtypes.h	1404;"	d
CV_GRAPH_FORWARD_EDGE	/usr/include/opencv/cxcore.h	1221;"	d
CV_GRAPH_FORWARD_EDGE_FLAG	/usr/include/opencv/cxcore.h	1237;"	d
CV_GRAPH_ITEM_VISITED_FLAG	/usr/include/opencv/cxcore.h	1231;"	d
CV_GRAPH_NEW_TREE	/usr/include/opencv/cxcore.h	1224;"	d
CV_GRAPH_OVER	/usr/include/opencv/cxcore.h	1226;"	d
CV_GRAPH_SEARCH_TREE_NODE_FLAG	/usr/include/opencv/cxcore.h	1236;"	d
CV_GRAPH_TREE_EDGE	/usr/include/opencv/cxcore.h	1219;"	d
CV_GRAPH_VERTEX	/usr/include/opencv/cxcore.h	1218;"	d
CV_GRAPH_VERTEX_FIELDS	/usr/include/opencv/cxtypes.h	1292;"	d
CV_GRAPH_WEIGHTED_EDGE_FIELDS	/usr/include/opencv/cvaux.h	282;"	d
CV_GRAPH_WEIGHTED_VERTEX_FIELDS	/usr/include/opencv/cvaux.h	279;"	d
CV_GRAY2BGR	/usr/include/opencv/cv.h	183;"	d
CV_GRAY2BGR555	/usr/include/opencv/cv.h	211;"	d
CV_GRAY2BGR565	/usr/include/opencv/cv.h	199;"	d
CV_GRAY2BGRA	/usr/include/opencv/cv.h	185;"	d
CV_GRAY2RGB	/usr/include/opencv/cv.h	184;"	d
CV_GRAY2RGBA	/usr/include/opencv/cv.h	186;"	d
CV_GT	/usr/include/opencv/cxmisc.h	185;"	d
CV_HAAR_DO_CANNY_PRUNING	/usr/include/opencv/cv.h	1126;"	d
CV_HAAR_DO_ROUGH_SEARCH	/usr/include/opencv/cv.h	1129;"	d
CV_HAAR_FEATURE_MAX	/usr/include/opencv/cvtypes.h	325;"	d
CV_HAAR_FIND_BIGGEST_OBJECT	/usr/include/opencv/cv.h	1128;"	d
CV_HAAR_MAGIC_VAL	/usr/include/opencv/cvtypes.h	318;"	d
CV_HAAR_SCALE_IMAGE	/usr/include/opencv/cv.h	1127;"	d
CV_HIST_ARRAY	/usr/include/opencv/cxtypes.h	801;"	d
CV_HIST_HAS_RANGES	/usr/include/opencv/cxtypes.h	830;"	d
CV_HIST_MAGIC_VAL	/usr/include/opencv/cxtypes.h	795;"	d
CV_HIST_RANGES_FLAG	/usr/include/opencv/cxtypes.h	799;"	d
CV_HIST_SPARSE	/usr/include/opencv/cxtypes.h	802;"	d
CV_HIST_TREE	/usr/include/opencv/cxtypes.h	803;"	d
CV_HIST_UNIFORM	/usr/include/opencv/cxtypes.h	807;"	d
CV_HIST_UNIFORM_FLAG	/usr/include/opencv/cxtypes.h	796;"	d
CV_HLS2BGR	/usr/include/opencv/cv.h	252;"	d
CV_HLS2RGB	/usr/include/opencv/cv.h	253;"	d
CV_HOUGH_GRADIENT	/usr/include/opencv/cv.h	1033;"	d
CV_HOUGH_MULTI_SCALE	/usr/include/opencv/cv.h	1032;"	d
CV_HOUGH_PROBABILISTIC	/usr/include/opencv/cv.h	1031;"	d
CV_HOUGH_STANDARD	/usr/include/opencv/cv.h	1030;"	d
CV_HSV2BGR	/usr/include/opencv/cv.h	245;"	d
CV_HSV2RGB	/usr/include/opencv/cv.h	246;"	d
CV_HeaderIsNull	/usr/include/opencv/cxerror.h	62;"	d
CV_IABS	/usr/include/opencv/cxtypes.h	203;"	d
CV_IABS	/usr/include/opencv/cxtypes.h	205;"	d
CV_ICC	/usr/include/opencv/cxtypes.h	56;"	d
CV_ICC	/usr/include/opencv/cxtypes.h	58;"	d
CV_ICC	/usr/include/opencv/cxtypes.h	60;"	d
CV_ICC	/usr/include/opencv/cxtypes.h	62;"	d
CV_IDP_BIRCHFIELD_PARAM1	/usr/include/opencv/cvaux.h	446;"	d
CV_IDP_BIRCHFIELD_PARAM2	/usr/include/opencv/cvaux.h	447;"	d
CV_IDP_BIRCHFIELD_PARAM3	/usr/include/opencv/cvaux.h	448;"	d
CV_IDP_BIRCHFIELD_PARAM4	/usr/include/opencv/cvaux.h	449;"	d
CV_IDP_BIRCHFIELD_PARAM5	/usr/include/opencv/cvaux.h	450;"	d
CV_IMAGE_ELEM	/usr/include/opencv/cxtypes.h	457;"	d
CV_IMAX	/usr/include/opencv/cxtypes.h	199;"	d
CV_IMIN	/usr/include/opencv/cxtypes.h	197;"	d
CV_IMPL	/usr/include/opencv/cxmisc.h	148;"	d
CV_IMPLEMENT_QSORT	/usr/include/opencv/cxmisc.h	585;"	d
CV_IMPLEMENT_QSORT_EX	/usr/include/opencv/cxmisc.h	421;"	d
CV_INIT_3X3_DELTAS	/usr/include/opencv/cvtypes.h	109;"	d
CV_INIT_PIXEL_POS	/usr/include/opencv/cvcompat.h	949;"	d
CV_INLINE	/usr/include/opencv/cxtypes.h	123;"	d
CV_INLINE	/usr/include/opencv/cxtypes.h	125;"	d
CV_INLINE	/usr/include/opencv/cxtypes.h	127;"	d
CV_INLINE	/usr/include/opencv/highgui.h	82;"	d
CV_INLINE	/usr/include/opencv/highgui.h	84;"	d
CV_INLINE	/usr/include/opencv/highgui.h	86;"	d
CV_INLINE	/usr/include/opencv/ml.h	88;"	d
CV_INLINE	/usr/include/opencv/ml.h	90;"	d
CV_INLINE	/usr/include/opencv/ml.h	92;"	d
CV_INPAINT_NS	/usr/include/opencv/cv.h	141;"	d
CV_INPAINT_TELEA	/usr/include/opencv/cv.h	142;"	d
CV_INPLACE_NOT_SUPPORTED_ERR	/usr/include/opencv/cxmisc.h	/^    CV_INPLACE_NOT_SUPPORTED_ERR= -112,$/;"	e	enum:CvStatus
CV_INTER_AREA	/usr/include/opencv/cv.h	263;"	d
CV_INTER_CUBIC	/usr/include/opencv/cv.h	262;"	d
CV_INTER_LINEAR	/usr/include/opencv/cv.h	261;"	d
CV_INTER_NN	/usr/include/opencv/cv.h	260;"	d
CV_ISOLATED_ROI	/usr/include/opencv/cv.hpp	55;"	d
CV_IS_CONT_MAT	/usr/include/opencv/cxtypes.h	534;"	d
CV_IS_GRAPH	/usr/include/opencv/cxtypes.h	1470;"	d
CV_IS_GRAPH_EDGE_VISITED	/usr/include/opencv/cxcore.h	1234;"	d
CV_IS_GRAPH_ORIENTED	/usr/include/opencv/cxtypes.h	1473;"	d
CV_IS_GRAPH_VERTEX_VISITED	/usr/include/opencv/cxcore.h	1232;"	d
CV_IS_HAAR_CLASSIFIER	/usr/include/opencv/cvtypes.h	321;"	d
CV_IS_HIST	/usr/include/opencv/cxtypes.h	819;"	d
CV_IS_IMAGE	/usr/include/opencv/cxtypes.h	448;"	d
CV_IS_IMAGE_HDR	/usr/include/opencv/cxtypes.h	445;"	d
CV_IS_MASK_ARR	/usr/include/opencv/cxtypes.h	590;"	d
CV_IS_MAT	/usr/include/opencv/cxtypes.h	587;"	d
CV_IS_MATND	/usr/include/opencv/cxtypes.h	733;"	d
CV_IS_MATND_HDR	/usr/include/opencv/cxtypes.h	730;"	d
CV_IS_MAT_CONST	/usr/include/opencv/cxtypes.h	605;"	d
CV_IS_MAT_CONT	/usr/include/opencv/cxtypes.h	533;"	d
CV_IS_MAT_HDR	/usr/include/opencv/cxtypes.h	582;"	d
CV_IS_ROW_SAMPLE	/usr/include/opencv/ml.h	128;"	d
CV_IS_SEQ	/usr/include/opencv/cxtypes.h	1361;"	d
CV_IS_SEQ_CHAIN	/usr/include/opencv/cxtypes.h	1457;"	d
CV_IS_SEQ_CHAIN_CONTOUR	/usr/include/opencv/cxtypes.h	1463;"	d
CV_IS_SEQ_CLOSED	/usr/include/opencv/cxtypes.h	1438;"	d
CV_IS_SEQ_CONTOUR	/usr/include/opencv/cxtypes.h	1460;"	d
CV_IS_SEQ_CONVEX	/usr/include/opencv/cxtypes.h	1439;"	d
CV_IS_SEQ_CURVE	/usr/include/opencv/cxtypes.h	1437;"	d
CV_IS_SEQ_HOLE	/usr/include/opencv/cxtypes.h	1440;"	d
CV_IS_SEQ_INDEX	/usr/include/opencv/cxtypes.h	1434;"	d
CV_IS_SEQ_POINT_SET	/usr/include/opencv/cxtypes.h	1445;"	d
CV_IS_SEQ_POINT_SUBSET	/usr/include/opencv/cxtypes.h	1448;"	d
CV_IS_SEQ_POLYGON	/usr/include/opencv/cxtypes.h	1454;"	d
CV_IS_SEQ_POLYGON_TREE	/usr/include/opencv/cxtypes.h	1466;"	d
CV_IS_SEQ_POLYLINE	/usr/include/opencv/cxtypes.h	1451;"	d
CV_IS_SEQ_SIMPLE	/usr/include/opencv/cxtypes.h	1441;"	d
CV_IS_SET	/usr/include/opencv/cxtypes.h	1365;"	d
CV_IS_SET_ELEM	/usr/include/opencv/cxtypes.h	1263;"	d
CV_IS_SET_ELEM_EXISTS	/usr/include/opencv/cvcompat.h	500;"	d
CV_IS_SPARSE_HIST	/usr/include/opencv/cxtypes.h	827;"	d
CV_IS_SPARSE_MAT	/usr/include/opencv/cxtypes.h	766;"	d
CV_IS_SPARSE_MAT_HDR	/usr/include/opencv/cxtypes.h	762;"	d
CV_IS_STORAGE	/usr/include/opencv/cxtypes.h	1171;"	d
CV_IS_SUBDIV2D	/usr/include/opencv/cxtypes.h	1476;"	d
CV_IS_TEMP_MAT	/usr/include/opencv/cxtypes.h	537;"	d
CV_IS_UNIFORM_HIST	/usr/include/opencv/cxtypes.h	824;"	d
CV_L1	/usr/include/opencv/cxcore.h	856;"	d
CV_L2	/usr/include/opencv/cxcore.h	857;"	d
CV_LAST_VORONOIEDGE2D	/usr/include/opencv/cvaux.h	935;"	d
CV_LE	/usr/include/opencv/cxmisc.h	182;"	d
CV_LEE_AUTO	/usr/include/opencv/cvaux.h	/^    CV_LEE_AUTO = -1,$/;"	e	enum:CvLeeParameters
CV_LEE_DOUBLE	/usr/include/opencv/cvaux.h	/^    CV_LEE_DOUBLE = 2,$/;"	e	enum:CvLeeParameters
CV_LEE_ERODE	/usr/include/opencv/cvaux.h	/^    CV_LEE_ERODE = 0,$/;"	e	enum:CvLeeParameters
CV_LEE_FLOAT	/usr/include/opencv/cvaux.h	/^    CV_LEE_FLOAT = 1,$/;"	e	enum:CvLeeParameters
CV_LEE_INT	/usr/include/opencv/cvaux.h	/^    CV_LEE_INT = 0,$/;"	e	enum:CvLeeParameters
CV_LEE_NON	/usr/include/opencv/cvaux.h	/^    CV_LEE_NON = 2$/;"	e	enum:CvLeeParameters
CV_LEE_ZOOM	/usr/include/opencv/cvaux.h	/^    CV_LEE_ZOOM = 1,$/;"	e	enum:CvLeeParameters
CV_LINK_RUNS	/usr/include/opencv/cvtypes.h	96;"	d
CV_LKFLOW_GET_MIN_EIGENVALS	/usr/include/opencv/cv.h	481;"	d
CV_LKFLOW_INITIAL_GUESSES	/usr/include/opencv/cv.h	480;"	d
CV_LKFLOW_PYR_A_READY	/usr/include/opencv/cv.h	478;"	d
CV_LKFLOW_PYR_B_READY	/usr/include/opencv/cv.h	479;"	d
CV_LMEDS	/usr/include/opencv/cv.h	1179;"	d
CV_LOAD_IMAGE_ANYCOLOR	/usr/include/opencv/highgui.h	188;"	d
CV_LOAD_IMAGE_ANYDEPTH	/usr/include/opencv/highgui.h	186;"	d
CV_LOAD_IMAGE_COLOR	/usr/include/opencv/highgui.h	184;"	d
CV_LOAD_IMAGE_GRAYSCALE	/usr/include/opencv/highgui.h	182;"	d
CV_LOAD_IMAGE_UNCHANGED	/usr/include/opencv/highgui.h	180;"	d
CV_LOG2	/usr/include/opencv/cxtypes.h	184;"	d
CV_LOG2PI	/usr/include/opencv/ml.h	120;"	d
CV_LSQ	/usr/include/opencv/cxcore.h	764;"	d
CV_LT	/usr/include/opencv/cxmisc.h	181;"	d
CV_LU	/usr/include/opencv/cxcore.h	761;"	d
CV_Lab2BGR	/usr/include/opencv/cv.h	248;"	d
CV_Lab2RGB	/usr/include/opencv/cv.h	249;"	d
CV_Luv2BGR	/usr/include/opencv/cv.h	250;"	d
CV_Luv2RGB	/usr/include/opencv/cv.h	251;"	d
CV_MAGIC_MASK	/usr/include/opencv/cxtypes.h	539;"	d
CV_MAJOR_VERSION	/usr/include/opencv/cvver.h	50;"	d
CV_MAKETYPE	/usr/include/opencv/cxtypes.h	477;"	d
CV_MAKE_STR	/usr/include/opencv/cxmisc.h	205;"	d
CV_MAKE_TYPE	/usr/include/opencv/cxtypes.h	478;"	d
CV_MALLOC_ALIGN	/usr/include/opencv/cxmisc.h	84;"	d
CV_MAT32F	/usr/include/opencv/cvcompat.h	81;"	d
CV_MAT3x1_32F	/usr/include/opencv/cvcompat.h	82;"	d
CV_MAT3x1_64D	/usr/include/opencv/cvcompat.h	88;"	d
CV_MAT3x3_32F	/usr/include/opencv/cvcompat.h	84;"	d
CV_MAT3x3_64D	/usr/include/opencv/cvcompat.h	90;"	d
CV_MAT4x1_32F	/usr/include/opencv/cvcompat.h	83;"	d
CV_MAT4x1_64D	/usr/include/opencv/cvcompat.h	89;"	d
CV_MAT4x4_32F	/usr/include/opencv/cvcompat.h	85;"	d
CV_MAT4x4_64D	/usr/include/opencv/cvcompat.h	91;"	d
CV_MAT64D	/usr/include/opencv/cvcompat.h	87;"	d
CV_MATND_MAGIC_VAL	/usr/include/opencv/cxtypes.h	698;"	d
CV_MAT_CN	/usr/include/opencv/cxtypes.h	526;"	d
CV_MAT_CN_MASK	/usr/include/opencv/cxtypes.h	525;"	d
CV_MAT_CONT_FLAG	/usr/include/opencv/cxtypes.h	532;"	d
CV_MAT_CONT_FLAG_SHIFT	/usr/include/opencv/cxtypes.h	531;"	d
CV_MAT_DEPTH	/usr/include/opencv/cxtypes.h	528;"	d
CV_MAT_DEPTH_MASK	/usr/include/opencv/cxtypes.h	527;"	d
CV_MAT_ELEM	/usr/include/opencv/cxtypes.h	647;"	d
CV_MAT_ELEM_PTR	/usr/include/opencv/cxtypes.h	644;"	d
CV_MAT_ELEM_PTR_FAST	/usr/include/opencv/cxtypes.h	639;"	d
CV_MAT_MAGIC_VAL	/usr/include/opencv/cxtypes.h	540;"	d
CV_MAT_TEMP_FLAG	/usr/include/opencv/cxtypes.h	536;"	d
CV_MAT_TEMP_FLAG_SHIFT	/usr/include/opencv/cxtypes.h	535;"	d
CV_MAT_TYPE	/usr/include/opencv/cxtypes.h	530;"	d
CV_MAT_TYPE_MASK	/usr/include/opencv/cxtypes.h	529;"	d
CV_MAX_ALLOC_SIZE	/usr/include/opencv/cxmisc.h	81;"	d
CV_MAX_ARR	/usr/include/opencv/cxcore.h	291;"	d
CV_MAX_DIM	/usr/include/opencv/cxtypes.h	701;"	d
CV_MAX_DIM_HEAP	/usr/include/opencv/cxtypes.h	702;"	d
CV_MAX_INLINE_MAT_OP_SIZE	/usr/include/opencv/cxmisc.h	64;"	d
CV_MAX_LOCAL_MAT_SIZE	/usr/include/opencv/cxmisc.h	67;"	d
CV_MAX_LOCAL_SIZE	/usr/include/opencv/cxmisc.h	70;"	d
CV_MAX_SOBEL_KSIZE	/usr/include/opencv/cv.h	149;"	d
CV_MAX_STRLEN	/usr/include/opencv/cxmisc.h	102;"	d
CV_MAX_THREADS	/usr/include/opencv/cxmisc.h	106;"	d
CV_MAX_THREADS	/usr/include/opencv/cxmisc.h	108;"	d
CV_MEDIAN	/usr/include/opencv/cv.h	77;"	d
CV_MEMCPY_AUTO	/usr/include/opencv/cxmisc.h	314;"	d
CV_MEMCPY_CHAR	/usr/include/opencv/cxmisc.h	290;"	d
CV_MEMCPY_INT	/usr/include/opencv/cxmisc.h	301;"	d
CV_MIDDLE	/usr/include/opencv/cv.hpp	54;"	d
CV_MINMAX	/usr/include/opencv/cxcore.h	861;"	d
CV_MINOR_VERSION	/usr/include/opencv/cvver.h	51;"	d
CV_MOP_BLACKHAT	/usr/include/opencv/cv.h	340;"	d
CV_MOP_CLOSE	/usr/include/opencv/cv.h	337;"	d
CV_MOP_GRADIENT	/usr/include/opencv/cv.h	338;"	d
CV_MOP_OPEN	/usr/include/opencv/cv.h	336;"	d
CV_MOP_TOPHAT	/usr/include/opencv/cv.h	339;"	d
CV_MOVE_DOWN	/usr/include/opencv/cvcompat.h	994;"	d
CV_MOVE_DOWN_WRAP	/usr/include/opencv/cvcompat.h	1030;"	d
CV_MOVE_LD	/usr/include/opencv/cvcompat.h	1004;"	d
CV_MOVE_LD_WRAP	/usr/include/opencv/cvcompat.h	1039;"	d
CV_MOVE_LEFT	/usr/include/opencv/cvcompat.h	982;"	d
CV_MOVE_LEFT_WRAP	/usr/include/opencv/cvcompat.h	1017;"	d
CV_MOVE_LU	/usr/include/opencv/cvcompat.h	998;"	d
CV_MOVE_LU_WRAP	/usr/include/opencv/cvcompat.h	1035;"	d
CV_MOVE_PARAM	/usr/include/opencv/cvcompat.h	1058;"	d
CV_MOVE_PARAM_WRAP	/usr/include/opencv/cvcompat.h	1068;"	d
CV_MOVE_RD	/usr/include/opencv/cvcompat.h	1007;"	d
CV_MOVE_RD_WRAP	/usr/include/opencv/cvcompat.h	1041;"	d
CV_MOVE_RIGHT	/usr/include/opencv/cvcompat.h	986;"	d
CV_MOVE_RIGHT_WRAP	/usr/include/opencv/cvcompat.h	1021;"	d
CV_MOVE_RU	/usr/include/opencv/cvcompat.h	1001;"	d
CV_MOVE_RU_WRAP	/usr/include/opencv/cvcompat.h	1037;"	d
CV_MOVE_TO	/usr/include/opencv/cvcompat.h	967;"	d
CV_MOVE_UP	/usr/include/opencv/cvcompat.h	990;"	d
CV_MOVE_UP_WRAP	/usr/include/opencv/cvcompat.h	1025;"	d
CV_MUL	/usr/include/opencv/cxmisc.h	173;"	d
CV_MULMASK	/usr/include/opencv/cxmisc.h	212;"	d
CV_MULMASK1	/usr/include/opencv/cxmisc.h	215;"	d
CV_MaskIsTiled	/usr/include/opencv/cxerror.h	80;"	d
CV_NE	/usr/include/opencv/cxmisc.h	184;"	d
CV_NEG_INF	/usr/include/opencv/cxmisc.h	164;"	d
CV_NEXT_AROUND_DST	/usr/include/opencv/cvtypes.h	/^    CV_NEXT_AROUND_DST   = 0x22,$/;"	e	enum:CvNextEdgeType
CV_NEXT_AROUND_LEFT	/usr/include/opencv/cvtypes.h	/^    CV_NEXT_AROUND_LEFT  = 0x13,$/;"	e	enum:CvNextEdgeType
CV_NEXT_AROUND_ORG	/usr/include/opencv/cvtypes.h	/^    CV_NEXT_AROUND_ORG   = 0x00,$/;"	e	enum:CvNextEdgeType
CV_NEXT_AROUND_RIGHT	/usr/include/opencv/cvtypes.h	/^    CV_NEXT_AROUND_RIGHT = 0x31,$/;"	e	enum:CvNextEdgeType
CV_NEXT_GRAPH_EDGE	/usr/include/opencv/cxtypes.h	1618;"	d
CV_NEXT_LINE_POINT	/usr/include/opencv/cxcore.h	1356;"	d
CV_NEXT_SEQ_ELEM	/usr/include/opencv/cxtypes.h	1554;"	d
CV_NEXT_VORONOIEDGE2D	/usr/include/opencv/cvaux.h	936;"	d
CV_NEXT_VORONOISITE2D	/usr/include/opencv/cvaux.h	932;"	d
CV_NODE_EMPTY	/usr/include/opencv/cxtypes.h	1675;"	d
CV_NODE_FLOAT	/usr/include/opencv/cxtypes.h	1662;"	d
CV_NODE_FLOW	/usr/include/opencv/cxtypes.h	1673;"	d
CV_NODE_HAS_NAME	/usr/include/opencv/cxtypes.h	1687;"	d
CV_NODE_IDX	/usr/include/opencv/cxtypes.h	787;"	d
CV_NODE_INT	/usr/include/opencv/cxtypes.h	1659;"	d
CV_NODE_INTEGER	/usr/include/opencv/cxtypes.h	1660;"	d
CV_NODE_IS_COLLECTION	/usr/include/opencv/cxtypes.h	1683;"	d
CV_NODE_IS_EMPTY	/usr/include/opencv/cxtypes.h	1685;"	d
CV_NODE_IS_FLOW	/usr/include/opencv/cxtypes.h	1684;"	d
CV_NODE_IS_INT	/usr/include/opencv/cxtypes.h	1678;"	d
CV_NODE_IS_MAP	/usr/include/opencv/cxtypes.h	1682;"	d
CV_NODE_IS_REAL	/usr/include/opencv/cxtypes.h	1679;"	d
CV_NODE_IS_SEQ	/usr/include/opencv/cxtypes.h	1681;"	d
CV_NODE_IS_STRING	/usr/include/opencv/cxtypes.h	1680;"	d
CV_NODE_IS_USER	/usr/include/opencv/cxtypes.h	1686;"	d
CV_NODE_MAP	/usr/include/opencv/cxtypes.h	1667;"	d
CV_NODE_NAMED	/usr/include/opencv/cxtypes.h	1676;"	d
CV_NODE_NONE	/usr/include/opencv/cxtypes.h	1658;"	d
CV_NODE_REAL	/usr/include/opencv/cxtypes.h	1661;"	d
CV_NODE_REF	/usr/include/opencv/cxtypes.h	1665;"	d
CV_NODE_SEQ	/usr/include/opencv/cxtypes.h	1666;"	d
CV_NODE_SEQ_IS_SIMPLE	/usr/include/opencv/cxtypes.h	1690;"	d
CV_NODE_SEQ_SIMPLE	/usr/include/opencv/cxtypes.h	1689;"	d
CV_NODE_STR	/usr/include/opencv/cxtypes.h	1663;"	d
CV_NODE_STRING	/usr/include/opencv/cxtypes.h	1664;"	d
CV_NODE_TYPE	/usr/include/opencv/cxtypes.h	1670;"	d
CV_NODE_TYPE_MASK	/usr/include/opencv/cxtypes.h	1668;"	d
CV_NODE_USER	/usr/include/opencv/cxtypes.h	1674;"	d
CV_NODE_VAL	/usr/include/opencv/cxtypes.h	786;"	d
CV_NOISE_GAUSSIAN	/usr/include/opencv/cvvidsurv.hpp	1263;"	d
CV_NOISE_NONE	/usr/include/opencv/cvvidsurv.hpp	1262;"	d
CV_NOISE_SALT_AND_PEPPER	/usr/include/opencv/cvvidsurv.hpp	1266;"	d
CV_NOISE_SPECKLE	/usr/include/opencv/cvvidsurv.hpp	1265;"	d
CV_NOISE_UNIFORM	/usr/include/opencv/cvvidsurv.hpp	1264;"	d
CV_NONZERO	/usr/include/opencv/cxmisc.h	188;"	d
CV_NONZERO_FLT	/usr/include/opencv/cxmisc.h	189;"	d
CV_NOP	/usr/include/opencv/cxmisc.h	170;"	d
CV_NORM_MASK	/usr/include/opencv/cxcore.h	858;"	d
CV_NOTDEFINED_ERR	/usr/include/opencv/cxmisc.h	/^    CV_NOTDEFINED_ERR  = -48,  \/\/ipp comp$/;"	e	enum:CvStatus
CV_NOTFOUND_ERR	/usr/include/opencv/cxmisc.h	/^    CV_NOTFOUND_ERR             = -110,$/;"	e	enum:CvStatus
CV_NOTHROW	/usr/include/opencv/cxmisc.h	659;"	d
CV_NOT_WEIGHTED	/usr/include/opencv/cvaux.h	/^    CV_NOT_WEIGHTED,$/;"	e	enum:CvGraphWeightType
CV_NO_CN_CHECK	/usr/include/opencv/cxcore.h	306;"	d
CV_NO_DEPTH_CHECK	/usr/include/opencv/cxcore.h	305;"	d
CV_NO_ERR	/usr/include/opencv/cxmisc.h	/^    CV_NO_ERR          =   0,$/;"	e	enum:CvStatus
CV_NO_SIZE_CHECK	/usr/include/opencv/cxcore.h	307;"	d
CV_NULLPTR_ERR	/usr/include/opencv/cxmisc.h	/^    CV_NULLPTR_ERR     =  -2,$/;"	e	enum:CvStatus
CV_NUM_FACE_ELEMENTS	/usr/include/opencv/cvaux.h	821;"	d
CV_OK	/usr/include/opencv/cxmisc.h	/^    CV_OK              =   CV_NO_ERR$/;"	e	enum:CvStatus
CV_OR	/usr/include/opencv/cxmisc.h	175;"	d
CV_ORIENTED_GRAPH	/usr/include/opencv/cxtypes.h	1407;"	d
CV_ORIGIN_BL	/usr/include/opencv/cxmisc.h	160;"	d
CV_ORIGIN_TL	/usr/include/opencv/cxmisc.h	159;"	d
CV_ORN	/usr/include/opencv/cxmisc.h	178;"	d
CV_OUTOFMEM_ERR	/usr/include/opencv/cxmisc.h	/^    CV_OUTOFMEM_ERR    =  -3,$/;"	e	enum:CvStatus
CV_PASTE	/usr/include/opencv/cxmisc.h	202;"	d
CV_PASTE2	/usr/include/opencv/cxmisc.h	201;"	d
CV_PCA_DATA_AS_COL	/usr/include/opencv/cxcore.h	816;"	d
CV_PCA_DATA_AS_ROW	/usr/include/opencv/cxcore.h	815;"	d
CV_PCA_USE_AVG	/usr/include/opencv/cxcore.h	817;"	d
CV_PI	/usr/include/opencv/cxtypes.h	183;"	d
CV_PLUGINS1	/usr/include/opencv/cxmisc.h	655;"	d
CV_PLUGINS2	/usr/include/opencv/cxmisc.h	656;"	d
CV_PLUGINS3	/usr/include/opencv/cxmisc.h	657;"	d
CV_PLUGIN_IPPCC	/usr/include/opencv/cxmisc.h	650;"	d
CV_PLUGIN_IPPCV	/usr/include/opencv/cxmisc.h	646;"	d
CV_PLUGIN_IPPI	/usr/include/opencv/cxmisc.h	647;"	d
CV_PLUGIN_IPPS	/usr/include/opencv/cxmisc.h	648;"	d
CV_PLUGIN_IPPVM	/usr/include/opencv/cxmisc.h	649;"	d
CV_PLUGIN_MAX	/usr/include/opencv/cxmisc.h	653;"	d
CV_PLUGIN_MKL	/usr/include/opencv/cxmisc.h	651;"	d
CV_PLUGIN_NONE	/usr/include/opencv/cxmisc.h	644;"	d
CV_PLUGIN_OPTCV	/usr/include/opencv/cxmisc.h	645;"	d
CV_POLY_APPROX_DP	/usr/include/opencv/cv.h	712;"	d
CV_POS_INF	/usr/include/opencv/cxmisc.h	163;"	d
CV_PRETEND_WINDOWS	/usr/include/opencv/cxcore.h	53;"	d
CV_PREV_AROUND_DST	/usr/include/opencv/cvtypes.h	/^    CV_PREV_AROUND_DST   = 0x33,$/;"	e	enum:CvNextEdgeType
CV_PREV_AROUND_LEFT	/usr/include/opencv/cvtypes.h	/^    CV_PREV_AROUND_LEFT  = 0x20,$/;"	e	enum:CvNextEdgeType
CV_PREV_AROUND_ORG	/usr/include/opencv/cvtypes.h	/^    CV_PREV_AROUND_ORG   = 0x11,$/;"	e	enum:CvNextEdgeType
CV_PREV_AROUND_RIGHT	/usr/include/opencv/cvtypes.h	/^    CV_PREV_AROUND_RIGHT = 0x02$/;"	e	enum:CvNextEdgeType
CV_PREV_INT	/usr/include/opencv/cvaux.h	277;"	d
CV_PREV_POINT	/usr/include/opencv/cxtypes.h	1602;"	d
CV_PREV_SEQ_ELEM	/usr/include/opencv/cxtypes.h	1564;"	d
CV_PREV_VORONOIEDGE2D	/usr/include/opencv/cvaux.h	937;"	d
CV_PREV_VORONOISITE2D	/usr/include/opencv/cvaux.h	933;"	d
CV_PTLOC_ERROR	/usr/include/opencv/cvtypes.h	/^    CV_PTLOC_ERROR = -2,$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_INSIDE	/usr/include/opencv/cvtypes.h	/^    CV_PTLOC_INSIDE = 0,$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_ON_EDGE	/usr/include/opencv/cvtypes.h	/^    CV_PTLOC_ON_EDGE = 2$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_OUTSIDE_RECT	/usr/include/opencv/cvtypes.h	/^    CV_PTLOC_OUTSIDE_RECT = -1,$/;"	e	enum:CvSubdiv2DPointLocation
CV_PTLOC_VERTEX	/usr/include/opencv/cvtypes.h	/^    CV_PTLOC_VERTEX = 1,$/;"	e	enum:CvSubdiv2DPointLocation
CV_QUADEDGE2D_FIELDS	/usr/include/opencv/cvtypes.h	138;"	d
CV_RANDOM_INVERT	/usr/include/opencv/cvhaartraining.h	75;"	d
CV_RAND_NORMAL	/usr/include/opencv/cxcore.h	672;"	d
CV_RAND_UNI	/usr/include/opencv/cxcore.h	671;"	d
CV_RANSAC	/usr/include/opencv/cv.h	1180;"	d
CV_READ_CHAIN_POINT	/usr/include/opencv/cxtypes.h	1589;"	d
CV_READ_EDGE	/usr/include/opencv/cxtypes.h	1604;"	d
CV_READ_SEQ_ELEM	/usr/include/opencv/cxtypes.h	1573;"	d
CV_REDUCE_AVG	/usr/include/opencv/cxcore.h	882;"	d
CV_REDUCE_MAX	/usr/include/opencv/cxcore.h	883;"	d
CV_REDUCE_MIN	/usr/include/opencv/cxcore.h	884;"	d
CV_REDUCE_SUM	/usr/include/opencv/cxcore.h	881;"	d
CV_RELATIVE	/usr/include/opencv/cxcore.h	859;"	d
CV_RELATIVE_C	/usr/include/opencv/cxcore.h	866;"	d
CV_RELATIVE_L1	/usr/include/opencv/cxcore.h	867;"	d
CV_RELATIVE_L2	/usr/include/opencv/cxcore.h	868;"	d
CV_RETR_CCOMP	/usr/include/opencv/cvtypes.h	87;"	d
CV_RETR_EXTERNAL	/usr/include/opencv/cvtypes.h	85;"	d
CV_RETR_LIST	/usr/include/opencv/cvtypes.h	86;"	d
CV_RETR_TREE	/usr/include/opencv/cvtypes.h	88;"	d
CV_REV_READ_SEQ_ELEM	/usr/include/opencv/cxtypes.h	1581;"	d
CV_RGB	/usr/include/opencv/cxcore.h	1280;"	d
CV_RGB2BGR	/usr/include/opencv/cv.h	176;"	d
CV_RGB2BGR555	/usr/include/opencv/cv.h	203;"	d
CV_RGB2BGR565	/usr/include/opencv/cv.h	191;"	d
CV_RGB2BGRA	/usr/include/opencv/cv.h	170;"	d
CV_RGB2GRAY	/usr/include/opencv/cv.h	182;"	d
CV_RGB2HLS	/usr/include/opencv/cv.h	243;"	d
CV_RGB2HSV	/usr/include/opencv/cv.h	225;"	d
CV_RGB2Lab	/usr/include/opencv/cv.h	228;"	d
CV_RGB2Luv	/usr/include/opencv/cv.h	241;"	d
CV_RGB2RGBA	/usr/include/opencv/cv.h	164;"	d
CV_RGB2XYZ	/usr/include/opencv/cv.h	215;"	d
CV_RGB2YCrCb	/usr/include/opencv/cv.h	220;"	d
CV_RGBA2BGR	/usr/include/opencv/cv.h	172;"	d
CV_RGBA2BGR555	/usr/include/opencv/cv.h	207;"	d
CV_RGBA2BGR565	/usr/include/opencv/cv.h	195;"	d
CV_RGBA2BGRA	/usr/include/opencv/cv.h	179;"	d
CV_RGBA2GRAY	/usr/include/opencv/cv.h	188;"	d
CV_RGBA2RGB	/usr/include/opencv/cv.h	167;"	d
CV_RODRIGUES_M2V	/usr/include/opencv/cvcompat.h	687;"	d
CV_RODRIGUES_V2M	/usr/include/opencv/cvcompat.h	688;"	d
CV_ROW_SAMPLE	/usr/include/opencv/ml.h	126;"	d
CV_SCHARR	/usr/include/opencv/cv.h	148;"	d
CV_SEQUENCE_FIELDS	/usr/include/opencv/cxtypes.h	1210;"	d
CV_SEQ_CHAIN	/usr/include/opencv/cxtypes.h	1418;"	d
CV_SEQ_CHAIN_CONTOUR	/usr/include/opencv/cxtypes.h	1419;"	d
CV_SEQ_CONNECTED_COMP	/usr/include/opencv/cxtypes.h	1425;"	d
CV_SEQ_CONTOUR	/usr/include/opencv/cxtypes.h	1414;"	d
CV_SEQ_ELEM	/usr/include/opencv/cxtypes.h	1519;"	d
CV_SEQ_ELTYPE	/usr/include/opencv/cxtypes.h	1430;"	d
CV_SEQ_ELTYPE_BITS	/usr/include/opencv/cxtypes.h	1368;"	d
CV_SEQ_ELTYPE_CODE	/usr/include/opencv/cxtypes.h	1372;"	d
CV_SEQ_ELTYPE_CONNECTED_COMP	/usr/include/opencv/cxtypes.h	1380;"	d
CV_SEQ_ELTYPE_GENERIC	/usr/include/opencv/cxtypes.h	1373;"	d
CV_SEQ_ELTYPE_GRAPH_EDGE	/usr/include/opencv/cxtypes.h	1377;"	d
CV_SEQ_ELTYPE_GRAPH_VERTEX	/usr/include/opencv/cxtypes.h	1378;"	d
CV_SEQ_ELTYPE_INDEX	/usr/include/opencv/cxtypes.h	1376;"	d
CV_SEQ_ELTYPE_MASK	/usr/include/opencv/cxtypes.h	1369;"	d
CV_SEQ_ELTYPE_POINT	/usr/include/opencv/cxtypes.h	1371;"	d
CV_SEQ_ELTYPE_POINT3D	/usr/include/opencv/cxtypes.h	1381;"	d
CV_SEQ_ELTYPE_PPOINT	/usr/include/opencv/cxtypes.h	1375;"	d
CV_SEQ_ELTYPE_PTR	/usr/include/opencv/cxtypes.h	1374;"	d
CV_SEQ_ELTYPE_TRIAN_ATR	/usr/include/opencv/cxtypes.h	1379;"	d
CV_SEQ_FLAG_CLOSED	/usr/include/opencv/cxtypes.h	1398;"	d
CV_SEQ_FLAG_CONVEX	/usr/include/opencv/cxtypes.h	1400;"	d
CV_SEQ_FLAG_HOLE	/usr/include/opencv/cxtypes.h	1401;"	d
CV_SEQ_FLAG_SHIFT	/usr/include/opencv/cxtypes.h	1395;"	d
CV_SEQ_FLAG_SIMPLE	/usr/include/opencv/cxtypes.h	1399;"	d
CV_SEQ_INDEX	/usr/include/opencv/cxtypes.h	1428;"	d
CV_SEQ_KIND	/usr/include/opencv/cxtypes.h	1431;"	d
CV_SEQ_KIND_BIN_TREE	/usr/include/opencv/cxtypes.h	1389;"	d
CV_SEQ_KIND_BITS	/usr/include/opencv/cxtypes.h	1383;"	d
CV_SEQ_KIND_CURVE	/usr/include/opencv/cxtypes.h	1388;"	d
CV_SEQ_KIND_GENERIC	/usr/include/opencv/cxtypes.h	1387;"	d
CV_SEQ_KIND_GRAPH	/usr/include/opencv/cxtypes.h	1392;"	d
CV_SEQ_KIND_MASK	/usr/include/opencv/cxtypes.h	1384;"	d
CV_SEQ_KIND_SUBDIV2D	/usr/include/opencv/cxtypes.h	1393;"	d
CV_SEQ_MAGIC_VAL	/usr/include/opencv/cxtypes.h	1359;"	d
CV_SEQ_POINT3D_SET	/usr/include/opencv/cxtypes.h	1411;"	d
CV_SEQ_POINT_SET	/usr/include/opencv/cxtypes.h	1410;"	d
CV_SEQ_POLYGON	/usr/include/opencv/cxtypes.h	1413;"	d
CV_SEQ_POLYGON_TREE	/usr/include/opencv/cxtypes.h	1422;"	d
CV_SEQ_POLYLINE	/usr/include/opencv/cxtypes.h	1412;"	d
CV_SEQ_READER_FIELDS	/usr/include/opencv/cxtypes.h	1498;"	d
CV_SEQ_SIMPLE_POLYGON	/usr/include/opencv/cxtypes.h	1415;"	d
CV_SEQ_WRITER_FIELDS	/usr/include/opencv/cxtypes.h	1483;"	d
CV_SET_ELEM_FIELDS	/usr/include/opencv/cxtypes.h	1237;"	d
CV_SET_ELEM_FREE_FLAG	/usr/include/opencv/cxtypes.h	1260;"	d
CV_SET_ELEM_IDX_MASK	/usr/include/opencv/cxtypes.h	1259;"	d
CV_SET_FIELDS	/usr/include/opencv/cxtypes.h	1247;"	d
CV_SET_IMAGE_IO_FUNCTIONS	/usr/include/opencv/cxcore.h	1771;"	d
CV_SET_MAGIC_VAL	/usr/include/opencv/cxtypes.h	1364;"	d
CV_SHAPE_CROSS	/usr/include/opencv/cv.h	312;"	d
CV_SHAPE_CUSTOM	/usr/include/opencv/cv.h	314;"	d
CV_SHAPE_ELLIPSE	/usr/include/opencv/cv.h	313;"	d
CV_SHAPE_RECT	/usr/include/opencv/cv.h	311;"	d
CV_SHIFT_DOWN	/usr/include/opencv/cvcompat.h	1048;"	d
CV_SHIFT_LD	/usr/include/opencv/cvcompat.h	1051;"	d
CV_SHIFT_LEFT	/usr/include/opencv/cvcompat.h	1045;"	d
CV_SHIFT_LU	/usr/include/opencv/cvcompat.h	1049;"	d
CV_SHIFT_NONE	/usr/include/opencv/cvcompat.h	1044;"	d
CV_SHIFT_RD	/usr/include/opencv/cvcompat.h	1052;"	d
CV_SHIFT_RIGHT	/usr/include/opencv/cvcompat.h	1046;"	d
CV_SHIFT_RU	/usr/include/opencv/cvcompat.h	1050;"	d
CV_SHIFT_UP	/usr/include/opencv/cvcompat.h	1047;"	d
CV_SIGN	/usr/include/opencv/cxtypes.h	208;"	d
CV_SIZEOF_FLOAT	/usr/include/opencv/cxmisc.h	156;"	d
CV_SIZEOF_SHORT	/usr/include/opencv/cxmisc.h	157;"	d
CV_SORT_ASCENDING	/usr/include/opencv/cxcore.h	681;"	d
CV_SORT_DESCENDING	/usr/include/opencv/cxcore.h	682;"	d
CV_SORT_EVERY_COLUMN	/usr/include/opencv/cxcore.h	680;"	d
CV_SORT_EVERY_ROW	/usr/include/opencv/cxcore.h	679;"	d
CV_SPARSE_HASH_RATIO	/usr/include/opencv/cxmisc.h	99;"	d
CV_SPARSE_HASH_SIZE0	/usr/include/opencv/cxmisc.h	96;"	d
CV_SPARSE_MAT_BLOCK	/usr/include/opencv/cxmisc.h	93;"	d
CV_SPARSE_MAT_MAGIC_VAL	/usr/include/opencv/cxtypes.h	741;"	d
CV_SQR	/usr/include/opencv/cxmisc.h	179;"	d
CV_SSE2	/usr/include/opencv/cxtypes.h	69;"	d
CV_SSE2	/usr/include/opencv/cxtypes.h	71;"	d
CV_START	/usr/include/opencv/cv.hpp	52;"	d
CV_STDCALL	/usr/include/opencv/cxtypes.h	100;"	d
CV_STDCALL	/usr/include/opencv/cxtypes.h	97;"	d
CV_STDCALL	/usr/include/opencv/highgui.h	56;"	d
CV_STDCALL	/usr/include/opencv/highgui.h	59;"	d
CV_STDCALL	/usr/include/opencv/ml.h	62;"	d
CV_STDCALL	/usr/include/opencv/ml.h	65;"	d
CV_STEREO_BM_BASIC	/usr/include/opencv/cv.h	1403;"	d
CV_STEREO_BM_FISH_EYE	/usr/include/opencv/cv.h	1404;"	d
CV_STEREO_BM_NARROW	/usr/include/opencv/cv.h	1405;"	d
CV_STEREO_BM_NORMALIZED_RESPONSE	/usr/include/opencv/cv.h	1372;"	d
CV_STEREO_GC_OCCLUDED	/usr/include/opencv/cv.h	1416;"	d
CV_STORAGE_APPEND	/usr/include/opencv/cxtypes.h	1636;"	d
CV_STORAGE_BLOCK_SIZE	/usr/include/opencv/cxmisc.h	90;"	d
CV_STORAGE_MAGIC_VAL	/usr/include/opencv/cxtypes.h	1158;"	d
CV_STORAGE_READ	/usr/include/opencv/cxtypes.h	1632;"	d
CV_STORAGE_WRITE	/usr/include/opencv/cxtypes.h	1633;"	d
CV_STORAGE_WRITE_BINARY	/usr/include/opencv/cxtypes.h	1635;"	d
CV_STORAGE_WRITE_TEXT	/usr/include/opencv/cxtypes.h	1634;"	d
CV_STRUCT_ALIGN	/usr/include/opencv/cxmisc.h	87;"	d
CV_STUB_STEP	/usr/include/opencv/cxmisc.h	154;"	d
CV_SUB	/usr/include/opencv/cxmisc.h	172;"	d
CV_SUBDIV2D_FIELDS	/usr/include/opencv/cvtypes.h	162;"	d
CV_SUBDIV2D_NEXT_EDGE	/usr/include/opencv/cvtypes.h	201;"	d
CV_SUBDIV2D_POINT_FIELDS	/usr/include/opencv/cvtypes.h	143;"	d
CV_SUBDIV2D_VIRTUAL_POINT_FLAG	/usr/include/opencv/cvtypes.h	148;"	d
CV_SUBMINOR_VERSION	/usr/include/opencv/cvver.h	52;"	d
CV_SVD	/usr/include/opencv/cxcore.h	762;"	d
CV_SVD_MODIFY_A	/usr/include/opencv/cxcore.h	747;"	d
CV_SVD_SYM	/usr/include/opencv/cxcore.h	763;"	d
CV_SVD_U_T	/usr/include/opencv/cxcore.h	748;"	d
CV_SVD_V_T	/usr/include/opencv/cxcore.h	749;"	d
CV_SWAP	/usr/include/opencv/cxtypes.h	186;"	d
CV_StsAutoTrace	/usr/include/opencv/cxerror.h	60;"	d
CV_StsBackTrace	/usr/include/opencv/cxerror.h	53;"	d
CV_StsBadArg	/usr/include/opencv/cxerror.h	57;"	d
CV_StsBadFlag	/usr/include/opencv/cxerror.h	94;"	d
CV_StsBadFunc	/usr/include/opencv/cxerror.h	58;"	d
CV_StsBadMask	/usr/include/opencv/cxerror.h	96;"	d
CV_StsBadMemBlock	/usr/include/opencv/cxerror.h	102;"	d
CV_StsBadPoint	/usr/include/opencv/cxerror.h	95;"	d
CV_StsBadSize	/usr/include/opencv/cxerror.h	89;"	d
CV_StsDivByZero	/usr/include/opencv/cxerror.h	90;"	d
CV_StsError	/usr/include/opencv/cxerror.h	54;"	d
CV_StsFilterOffsetErr	/usr/include/opencv/cxerror.h	86;"	d
CV_StsFilterStructContentErr	/usr/include/opencv/cxerror.h	84;"	d
CV_StsInplaceNotSupported	/usr/include/opencv/cxerror.h	91;"	d
CV_StsInternal	/usr/include/opencv/cxerror.h	55;"	d
CV_StsKernelStructContentErr	/usr/include/opencv/cxerror.h	85;"	d
CV_StsNoConv	/usr/include/opencv/cxerror.h	59;"	d
CV_StsNoMem	/usr/include/opencv/cxerror.h	56;"	d
CV_StsNotImplemented	/usr/include/opencv/cxerror.h	101;"	d
CV_StsNullPtr	/usr/include/opencv/cxerror.h	82;"	d
CV_StsObjectNotFound	/usr/include/opencv/cxerror.h	92;"	d
CV_StsOk	/usr/include/opencv/cxerror.h	52;"	d
CV_StsOutOfRange	/usr/include/opencv/cxerror.h	99;"	d
CV_StsParseError	/usr/include/opencv/cxerror.h	100;"	d
CV_StsUnmatchedFormats	/usr/include/opencv/cxerror.h	93;"	d
CV_StsUnmatchedSizes	/usr/include/opencv/cxerror.h	97;"	d
CV_StsUnsupportedFormat	/usr/include/opencv/cxerror.h	98;"	d
CV_StsVecLengthErr	/usr/include/opencv/cxerror.h	83;"	d
CV_TERMCRIT_EPS	/usr/include/opencv/cxtypes.h	883;"	d
CV_TERMCRIT_ITER	/usr/include/opencv/cxtypes.h	881;"	d
CV_TERMCRIT_NUMBER	/usr/include/opencv/cxtypes.h	882;"	d
CV_THRESH_BINARY	/usr/include/opencv/cv.h	941;"	d
CV_THRESH_BINARY_INV	/usr/include/opencv/cv.h	942;"	d
CV_THRESH_MASK	/usr/include/opencv/cv.h	946;"	d
CV_THRESH_OTSU	/usr/include/opencv/cv.h	948;"	d
CV_THRESH_TOZERO	/usr/include/opencv/cv.h	944;"	d
CV_THRESH_TOZERO_INV	/usr/include/opencv/cv.h	945;"	d
CV_THRESH_TRUNC	/usr/include/opencv/cv.h	943;"	d
CV_TM_CCOEFF	/usr/include/opencv/cv.h	385;"	d
CV_TM_CCOEFF_NORMED	/usr/include/opencv/cv.h	386;"	d
CV_TM_CCORR	/usr/include/opencv/cv.h	383;"	d
CV_TM_CCORR_NORMED	/usr/include/opencv/cv.h	384;"	d
CV_TM_SQDIFF	/usr/include/opencv/cv.h	381;"	d
CV_TM_SQDIFF_NORMED	/usr/include/opencv/cv.h	382;"	d
CV_TOGGLE_DBL	/usr/include/opencv/cxmisc.h	167;"	d
CV_TOGGLE_FLT	/usr/include/opencv/cxmisc.h	166;"	d
CV_TREE_NODE_FIELDS	/usr/include/opencv/cxtypes.h	1198;"	d
CV_TS_CONCENTRIC_SPHERES	/usr/include/opencv/ml.h	1548;"	d
CV_TURN_ON_IPL_COMPATIBILITY	/usr/include/opencv/cxcore.h	1572;"	d
CV_TWIN_VORONOISITE2D	/usr/include/opencv/cvaux.h	940;"	d
CV_TYPE_NAME_GRAPH	/usr/include/opencv/cxtypes.h	1330;"	d
CV_TYPE_NAME_HAAR	/usr/include/opencv/cvtypes.h	319;"	d
CV_TYPE_NAME_IMAGE	/usr/include/opencv/cxtypes.h	443;"	d
CV_TYPE_NAME_MAT	/usr/include/opencv/cxtypes.h	541;"	d
CV_TYPE_NAME_MATND	/usr/include/opencv/cxtypes.h	699;"	d
CV_TYPE_NAME_ML_ANN_MLP	/usr/include/opencv/ml.h	183;"	d
CV_TYPE_NAME_ML_BOOSTING	/usr/include/opencv/ml.h	181;"	d
CV_TYPE_NAME_ML_CNN	/usr/include/opencv/ml.h	184;"	d
CV_TYPE_NAME_ML_EM	/usr/include/opencv/ml.h	180;"	d
CV_TYPE_NAME_ML_KNN	/usr/include/opencv/ml.h	178;"	d
CV_TYPE_NAME_ML_NBAYES	/usr/include/opencv/ml.h	179;"	d
CV_TYPE_NAME_ML_RTREES	/usr/include/opencv/ml.h	185;"	d
CV_TYPE_NAME_ML_SVM	/usr/include/opencv/ml.h	177;"	d
CV_TYPE_NAME_ML_TREE	/usr/include/opencv/ml.h	182;"	d
CV_TYPE_NAME_SEQ	/usr/include/opencv/cxtypes.h	1227;"	d
CV_TYPE_NAME_SEQ_TREE	/usr/include/opencv/cxtypes.h	1228;"	d
CV_TYPE_NAME_SPARSE_MAT	/usr/include/opencv/cxtypes.h	742;"	d
CV_TYZX_COLOR	/usr/include/opencv/highgui.h	239;"	d
CV_TYZX_LEFT	/usr/include/opencv/highgui.h	237;"	d
CV_TYZX_RIGHT	/usr/include/opencv/highgui.h	238;"	d
CV_TYZX_Z	/usr/include/opencv/highgui.h	240;"	d
CV_UNDEF_SC_PARAM	/usr/include/opencv/cvaux.h	444;"	d
CV_UNMATCHED_FORMATS_ERR	/usr/include/opencv/cxmisc.h	/^    CV_UNMATCHED_FORMATS_ERR    = -104,$/;"	e	enum:CvStatus
CV_UNMATCHED_ROI_ERR	/usr/include/opencv/cxmisc.h	/^    CV_UNMATCHED_ROI_ERR        = -111,$/;"	e	enum:CvStatus
CV_UNREFERENCED	/usr/include/opencv/cvcompat.h	/^                                int CV_UNREFERENCED(interpolate) )$/;"	f
CV_UNREFERENCED	/usr/include/opencv/cvcompat.h	56;"	d
CV_UNREFERENCED	/usr/include/opencv/cvcompat.h	58;"	d
CV_UNSUPPORTED_CHANNELS_ERR	/usr/include/opencv/cxmisc.h	/^    CV_UNSUPPORTED_CHANNELS_ERR = -102,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_COI_ERR	/usr/include/opencv/cxmisc.h	/^    CV_UNSUPPORTED_COI_ERR      = -103,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_DEPTH_ERR	/usr/include/opencv/cxmisc.h	/^    CV_UNSUPPORTED_DEPTH_ERR    = -101,$/;"	e	enum:CvStatus
CV_UNSUPPORTED_FORMAT_ERR	/usr/include/opencv/cxmisc.h	/^    CV_UNSUPPORTED_FORMAT_ERR   = -100,$/;"	e	enum:CvStatus
CV_UN_ENTRY_C1	/usr/include/opencv/cxmisc.h	221;"	d
CV_UN_ENTRY_C2	/usr/include/opencv/cxmisc.h	224;"	d
CV_UN_ENTRY_C3	/usr/include/opencv/cxmisc.h	227;"	d
CV_UN_ENTRY_C4	/usr/include/opencv/cxmisc.h	230;"	d
CV_USRTYPE1	/usr/include/opencv/cxtypes.h	475;"	d
CV_VALUE	/usr/include/opencv/cv.h	914;"	d
CV_VAR_CATEGORICAL	/usr/include/opencv/ml.h	175;"	d
CV_VAR_NUMERICAL	/usr/include/opencv/ml.h	173;"	d
CV_VAR_ORDERED	/usr/include/opencv/ml.h	174;"	d
CV_VERSION	/usr/include/opencv/cvver.h	53;"	d
CV_VORONOIDIAGRAM2D_FIELDS	/usr/include/opencv/cvaux.h	972;"	d
CV_VORONOIEDGE2D_BEGINNODE	/usr/include/opencv/cvaux.h	938;"	d
CV_VORONOIEDGE2D_ENDNODE	/usr/include/opencv/cvaux.h	939;"	d
CV_VORONOIEDGE2D_FIELDS	/usr/include/opencv/cvaux.h	952;"	d
CV_VORONOINODE2D_FIELDS	/usr/include/opencv/cvaux.h	962;"	d
CV_VORONOISITE2D_FIELDS	/usr/include/opencv/cvaux.h	942;"	d
CV_WARP_FILL_OUTLIERS	/usr/include/opencv/cv.h	265;"	d
CV_WARP_INVERSE_MAP	/usr/include/opencv/cv.h	266;"	d
CV_WARP_TO_CAMERA	/usr/include/opencv/cvaux.h	551;"	d
CV_WEIGHTED_ALL	/usr/include/opencv/cvaux.h	/^    CV_WEIGHTED_ALL$/;"	e	enum:CvGraphWeightType
CV_WEIGHTED_EDGE	/usr/include/opencv/cvaux.h	/^    CV_WEIGHTED_EDGE,$/;"	e	enum:CvGraphWeightType
CV_WEIGHTED_VTX	/usr/include/opencv/cvaux.h	/^    CV_WEIGHTED_VTX,$/;"	e	enum:CvGraphWeightType
CV_WHOLE	/usr/include/opencv/cv.hpp	51;"	d
CV_WHOLE_ARR	/usr/include/opencv/cxtypes.h	523;"	d
CV_WHOLE_SEQ	/usr/include/opencv/cxtypes.h	1106;"	d
CV_WHOLE_SEQ_END_INDEX	/usr/include/opencv/cxtypes.h	1105;"	d
CV_WINDOW_AUTOSIZE	/usr/include/opencv/highgui.h	121;"	d
CV_WRITE_SEQ_ELEM	/usr/include/opencv/cxtypes.h	1540;"	d
CV_WRITE_SEQ_ELEM_VAR	/usr/include/opencv/cxtypes.h	1530;"	d
CV_XOR	/usr/include/opencv/cxmisc.h	176;"	d
CV_XYZ2BGR	/usr/include/opencv/cv.h	216;"	d
CV_XYZ2RGB	/usr/include/opencv/cv.h	217;"	d
CV_YCrCb2BGR	/usr/include/opencv/cv.h	221;"	d
CV_YCrCb2RGB	/usr/include/opencv/cv.h	222;"	d
CV_ZERO_CHAR	/usr/include/opencv/cxmisc.h	338;"	d
CV_ZERO_INT	/usr/include/opencv/cxmisc.h	348;"	d
CV_ZERO_OBJ	/usr/include/opencv/cxmisc.h	217;"	d
Calc	/usr/include/opencv/ml.h	/^    typedef void (CvSVMKernel::*Calc)( int vec_count, int vec_size, const float** vecs,$/;"	t	struct:CvSVMKernel	access:public
Cv1DObsInfo	/usr/include/opencv/cvaux.h	/^typedef CvImgObsInfo Cv1DObsInfo;$/;"	t
Cv32suf	/usr/include/opencv/cxtypes.h	/^Cv32suf;$/;"	t	typeref:union:Cv32suf
Cv32suf	/usr/include/opencv/cxtypes.h	/^typedef union Cv32suf$/;"	u
Cv32suf::f	/usr/include/opencv/cxtypes.h	/^    float f;$/;"	m	union:Cv32suf	access:public
Cv32suf::i	/usr/include/opencv/cxtypes.h	/^    int i;$/;"	m	union:Cv32suf	access:public
Cv32suf::u	/usr/include/opencv/cxtypes.h	/^    unsigned u;$/;"	m	union:Cv32suf	access:public
Cv3dTracker2dTrackedObject	/usr/include/opencv/cvaux.h	/^} Cv3dTracker2dTrackedObject;$/;"	t	typeref:struct:__anon12
Cv3dTrackerCameraInfo	/usr/include/opencv/cvaux.h	/^} Cv3dTrackerCameraInfo;$/;"	t	typeref:struct:__anon14
Cv3dTrackerCameraIntrinsics	/usr/include/opencv/cvaux.h	/^} Cv3dTrackerCameraIntrinsics;$/;"	t	typeref:struct:__anon15
Cv3dTrackerTrackedObject	/usr/include/opencv/cvaux.h	/^} Cv3dTrackerTrackedObject;$/;"	t	typeref:struct:__anon13
Cv64suf	/usr/include/opencv/cxtypes.h	/^Cv64suf;$/;"	t	typeref:union:Cv64suf
Cv64suf	/usr/include/opencv/cxtypes.h	/^typedef union Cv64suf$/;"	u
Cv64suf::f	/usr/include/opencv/cxtypes.h	/^    double f;$/;"	m	union:Cv64suf	access:public
Cv64suf::i	/usr/include/opencv/cxtypes.h	/^    int64 i;$/;"	m	union:Cv64suf	access:public
Cv64suf::u	/usr/include/opencv/cxtypes.h	/^    uint64 u;$/;"	m	union:Cv64suf	access:public
CvANN_MLP_TrainParams	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvANN_MLP_TrainParams$/;"	s
CvANN_MLP_TrainParams::BACKPROP	/usr/include/opencv/ml.h	/^    enum { BACKPROP=0, RPROP=1 };$/;"	e	enum:CvANN_MLP_TrainParams::__anon21
CvANN_MLP_TrainParams::RPROP	/usr/include/opencv/ml.h	/^    enum { BACKPROP=0, RPROP=1 };$/;"	e	enum:CvANN_MLP_TrainParams::__anon21
CvANN_MLP_TrainParams::bp_dw_scale	/usr/include/opencv/ml.h	/^    double bp_dw_scale, bp_moment_scale;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::bp_moment_scale	/usr/include/opencv/ml.h	/^    double bp_dw_scale, bp_moment_scale;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::rp_dw0	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::rp_dw_max	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::rp_dw_min	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::rp_dw_minus	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::rp_dw_plus	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvANN_MLP_TrainParams::train_method	/usr/include/opencv/ml.h	/^    int train_method;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
CvAdaptiveThreshMethod	/usr/include/opencv/cvcompat.h	66;"	d
CvAllocFunc	/usr/include/opencv/cxcore.h	/^typedef void* (CV_CDECL *CvAllocFunc)(size_t size, void* userdata);$/;"	t
CvArr	/usr/include/opencv/cxtypes.h	/^typedef void CvArr;$/;"	t
CvAttrList	/usr/include/opencv/cxtypes.h	/^CvAttrList;$/;"	t	typeref:struct:CvAttrList
CvAttrList	/usr/include/opencv/cxtypes.h	/^typedef struct CvAttrList$/;"	s
CvAttrList::attr	/usr/include/opencv/cxtypes.h	/^    const char** attr;         \/* NULL-terminated array of (attribute_name,attribute_value) pairs. *\/$/;"	m	struct:CvAttrList	access:public
CvAttrList::next	/usr/include/opencv/cxtypes.h	/^    struct CvAttrList* next;   \/* Pointer to next chunk of the attributes list.                    *\/$/;"	m	struct:CvAttrList	typeref:struct:CvAttrList::CvAttrList	access:public
CvAvgComp	/usr/include/opencv/cvtypes.h	/^CvAvgComp;$/;"	t	typeref:struct:CvAvgComp
CvAvgComp	/usr/include/opencv/cvtypes.h	/^typedef struct CvAvgComp$/;"	s
CvAvgComp::neighbors	/usr/include/opencv/cvtypes.h	/^    int neighbors;$/;"	m	struct:CvAvgComp	access:public
CvAvgComp::rect	/usr/include/opencv/cvtypes.h	/^    CvRect rect;$/;"	m	struct:CvAvgComp	access:public
CvBGCodeBookElem	/usr/include/opencv/cvaux.h	/^CvBGCodeBookElem;$/;"	t	typeref:struct:CvBGCodeBookElem
CvBGCodeBookElem	/usr/include/opencv/cvaux.h	/^typedef struct CvBGCodeBookElem$/;"	s
CvBGCodeBookElem::boxMax	/usr/include/opencv/cvaux.h	/^    uchar boxMax[3];$/;"	m	struct:CvBGCodeBookElem	access:public
CvBGCodeBookElem::boxMin	/usr/include/opencv/cvaux.h	/^    uchar boxMin[3];$/;"	m	struct:CvBGCodeBookElem	access:public
CvBGCodeBookElem::learnMax	/usr/include/opencv/cvaux.h	/^    uchar learnMax[3];$/;"	m	struct:CvBGCodeBookElem	access:public
CvBGCodeBookElem::learnMin	/usr/include/opencv/cvaux.h	/^    uchar learnMin[3];$/;"	m	struct:CvBGCodeBookElem	access:public
CvBGCodeBookElem::next	/usr/include/opencv/cvaux.h	/^    struct CvBGCodeBookElem* next;$/;"	m	struct:CvBGCodeBookElem	typeref:struct:CvBGCodeBookElem::CvBGCodeBookElem	access:public
CvBGCodeBookElem::stale	/usr/include/opencv/cvaux.h	/^    int stale;$/;"	m	struct:CvBGCodeBookElem	access:public
CvBGCodeBookElem::tLastUpdate	/usr/include/opencv/cvaux.h	/^    int tLastUpdate;$/;"	m	struct:CvBGCodeBookElem	access:public
CvBGCodeBookModel	/usr/include/opencv/cvaux.h	/^CvBGCodeBookModel;$/;"	t	typeref:struct:CvBGCodeBookModel
CvBGCodeBookModel	/usr/include/opencv/cvaux.h	/^typedef struct CvBGCodeBookModel$/;"	s
CvBGCodeBookModel::cbBounds	/usr/include/opencv/cvaux.h	/^    uchar cbBounds[3];$/;"	m	struct:CvBGCodeBookModel	access:public
CvBGCodeBookModel::cbmap	/usr/include/opencv/cvaux.h	/^    CvBGCodeBookElem** cbmap;$/;"	m	struct:CvBGCodeBookModel	access:public
CvBGCodeBookModel::freeList	/usr/include/opencv/cvaux.h	/^    CvBGCodeBookElem* freeList;$/;"	m	struct:CvBGCodeBookModel	access:public
CvBGCodeBookModel::modMax	/usr/include/opencv/cvaux.h	/^    uchar modMax[3];$/;"	m	struct:CvBGCodeBookModel	access:public
CvBGCodeBookModel::modMin	/usr/include/opencv/cvaux.h	/^    uchar modMin[3];$/;"	m	struct:CvBGCodeBookModel	access:public
CvBGCodeBookModel::size	/usr/include/opencv/cvaux.h	/^    CvSize size;$/;"	m	struct:CvBGCodeBookModel	access:public
CvBGCodeBookModel::storage	/usr/include/opencv/cvaux.h	/^    CvMemStorage* storage;$/;"	m	struct:CvBGCodeBookModel	access:public
CvBGCodeBookModel::t	/usr/include/opencv/cvaux.h	/^    int t;$/;"	m	struct:CvBGCodeBookModel	access:public
CvBGPixelCCStatTable	/usr/include/opencv/cvaux.h	/^CvBGPixelCCStatTable;$/;"	t	typeref:struct:CvBGPixelCCStatTable
CvBGPixelCCStatTable	/usr/include/opencv/cvaux.h	/^typedef struct CvBGPixelCCStatTable$/;"	s
CvBGPixelCCStatTable::Pv	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCCStatTable	access:public
CvBGPixelCCStatTable::Pvb	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCCStatTable	access:public
CvBGPixelCCStatTable::v	/usr/include/opencv/cvaux.h	/^    uchar          v[6];$/;"	m	struct:CvBGPixelCCStatTable	access:public
CvBGPixelCStatTable	/usr/include/opencv/cvaux.h	/^CvBGPixelCStatTable;$/;"	t	typeref:struct:CvBGPixelCStatTable
CvBGPixelCStatTable	/usr/include/opencv/cvaux.h	/^typedef struct CvBGPixelCStatTable$/;"	s
CvBGPixelCStatTable::Pv	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCStatTable	access:public
CvBGPixelCStatTable::Pvb	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCStatTable	access:public
CvBGPixelCStatTable::v	/usr/include/opencv/cvaux.h	/^    uchar          v[3];$/;"	m	struct:CvBGPixelCStatTable	access:public
CvBGPixelStat	/usr/include/opencv/cvaux.h	/^CvBGPixelStat;$/;"	t	typeref:struct:CvBGPixelStat
CvBGPixelStat	/usr/include/opencv/cvaux.h	/^typedef struct CvBGPixelStat$/;"	s
CvBGPixelStat::Pbc	/usr/include/opencv/cvaux.h	/^    float                 Pbc;$/;"	m	struct:CvBGPixelStat	access:public
CvBGPixelStat::Pbcc	/usr/include/opencv/cvaux.h	/^    float                 Pbcc;$/;"	m	struct:CvBGPixelStat	access:public
CvBGPixelStat::cctable	/usr/include/opencv/cvaux.h	/^    CvBGPixelCCStatTable* cctable;$/;"	m	struct:CvBGPixelStat	access:public
CvBGPixelStat::ctable	/usr/include/opencv/cvaux.h	/^    CvBGPixelCStatTable*  ctable;$/;"	m	struct:CvBGPixelStat	access:public
CvBGPixelStat::is_trained_dyn_model	/usr/include/opencv/cvaux.h	/^    uchar                 is_trained_dyn_model;$/;"	m	struct:CvBGPixelStat	access:public
CvBGPixelStat::is_trained_st_model	/usr/include/opencv/cvaux.h	/^    uchar                 is_trained_st_model;$/;"	m	struct:CvBGPixelStat	access:public
CvBGStatModel	/usr/include/opencv/cvaux.h	/^CvBGStatModel;$/;"	t	typeref:struct:CvBGStatModel
CvBGStatModel	/usr/include/opencv/cvaux.h	/^typedef struct CvBGStatModel$/;"	s
CvBigFuncTable	/usr/include/opencv/cxmisc.h	/^CvBigFuncTable;$/;"	t	typeref:struct:CvBigFuncTable
CvBigFuncTable	/usr/include/opencv/cxmisc.h	/^typedef struct CvBigFuncTable$/;"	s
CvBigFuncTable::fn_2d	/usr/include/opencv/cxmisc.h	/^    void*   fn_2d[CV_DEPTH_MAX*CV_CN_MAX];$/;"	m	struct:CvBigFuncTable	access:public
CvBlob	/usr/include/opencv/cvvidsurv.hpp	/^struct CV_EXPORTS CvDetectedBlob : public CvBlob$/;"	s
CvBlob	/usr/include/opencv/cvvidsurv.hpp	/^struct CvBlob$/;"	s
CvBlob::ID	/usr/include/opencv/cvvidsurv.hpp	/^    int     ID;  \/* blob ID         *\/     $/;"	m	struct:CvBlob	access:public
CvBlob::h	/usr/include/opencv/cvvidsurv.hpp	/^    float   w,h; \/* blob sizes      *\/$/;"	m	struct:CvBlob	access:public
CvBlob::response	/usr/include/opencv/cvvidsurv.hpp	/^    float response;$/;"	m	struct:CvBlob	access:public
CvBlob::w	/usr/include/opencv/cvvidsurv.hpp	/^    float   w,h; \/* blob sizes      *\/$/;"	m	struct:CvBlob	access:public
CvBlob::x	/usr/include/opencv/cvvidsurv.hpp	/^    float   x,y; \/* blob position   *\/$/;"	m	struct:CvBlob	access:public
CvBlob::y	/usr/include/opencv/cvvidsurv.hpp	/^    float   x,y; \/* blob position   *\/$/;"	m	struct:CvBlob	access:public
CvBlobTrack	/usr/include/opencv/cvvidsurv.hpp	/^struct CvBlobTrack$/;"	s
CvBlobTrack::StartFrame	/usr/include/opencv/cvvidsurv.hpp	/^    int         StartFrame;$/;"	m	struct:CvBlobTrack	access:public
CvBlobTrack::TrackID	/usr/include/opencv/cvvidsurv.hpp	/^    int         TrackID;$/;"	m	struct:CvBlobTrack	access:public
CvBlobTrack::pBlobSeq	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobSeq*  pBlobSeq;$/;"	m	struct:CvBlobTrack	access:public
CvBlobTrackerAutoParam1	/usr/include/opencv/cvvidsurv.hpp	/^struct CvBlobTrackerAutoParam1$/;"	s
CvBlobTrackerAutoParam1::FGTrainFrames	/usr/include/opencv/cvvidsurv.hpp	/^    int                     FGTrainFrames; \/* Number of frames needed for FG (foreground) detector to train.        *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerAutoParam1::UsePPData	/usr/include/opencv/cvvidsurv.hpp	/^    int                     UsePPData;$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerAutoParam1::pBD	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobDetector*         pBD;           \/* Selected blob detector module. 					    *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerAutoParam1::pBT	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTracker*          pBT;           \/* Selected blob tracking module.					    *\/	$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerAutoParam1::pBTA	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTrackAnalysis*    pBTA;          \/* Selected blob trajectory analysis module.                             *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerAutoParam1::pBTGen	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTrackGen*         pBTGen;        \/* Selected blob trajectory generator.				    *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerAutoParam1::pBTPP	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTrackPostProc*    pBTPP;         \/* Selected blob trajectory postprocessing module.			    *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerAutoParam1::pFG	/usr/include/opencv/cvvidsurv.hpp	/^    CvFGDetector*           pFG;           \/* FGDetector module. If this field is NULL the Process FG mask is used. *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
CvBlobTrackerParamLH	/usr/include/opencv/cvvidsurv.hpp	/^struct CvBlobTrackerParamLH$/;"	s
CvBlobTrackerParamLH::HistType	/usr/include/opencv/cvvidsurv.hpp	/^    int     HistType; \/* see Prob.h *\/$/;"	m	struct:CvBlobTrackerParamLH	access:public
CvBlobTrackerParamLH::ScaleAfter	/usr/include/opencv/cvvidsurv.hpp	/^    int     ScaleAfter;$/;"	m	struct:CvBlobTrackerParamLH	access:public
CvBlobTrackerParamMS	/usr/include/opencv/cvvidsurv.hpp	/^struct CvBlobTrackerParamMS$/;"	s
CvBlobTrackerParamMS::appearance_profile	/usr/include/opencv/cvvidsurv.hpp	/^    int     appearance_profile;$/;"	m	struct:CvBlobTrackerParamMS	access:public
CvBlobTrackerParamMS::meanshift_profile	/usr/include/opencv/cvvidsurv.hpp	/^    int     meanshift_profile;$/;"	m	struct:CvBlobTrackerParamMS	access:public
CvBlobTrackerParamMS::noOfSigBits	/usr/include/opencv/cvvidsurv.hpp	/^    int     noOfSigBits;$/;"	m	struct:CvBlobTrackerParamMS	access:public
CvBlobTrackerParamMS::sigma	/usr/include/opencv/cvvidsurv.hpp	/^    float   sigma;$/;"	m	struct:CvBlobTrackerParamMS	access:public
CvBool	/usr/include/opencv/cvaux.h	/^typedef unsigned char CvBool;$/;"	t
CvBoost	/usr/include/opencv/ml.h	/^class CvBoost;$/;"	v
CvBox2D	/usr/include/opencv/cxtypes.h	/^CvBox2D;$/;"	t	typeref:struct:CvBox2D
CvBox2D	/usr/include/opencv/cxtypes.h	/^typedef struct CvBox2D$/;"	s
CvBox2D32f	/usr/include/opencv/cvcompat.h	94;"	d
CvBox2D::angle	/usr/include/opencv/cxtypes.h	/^    float angle;          \/* Angle between the horizontal axis           *\/$/;"	m	struct:CvBox2D	access:public
CvBox2D::center	/usr/include/opencv/cxtypes.h	/^    CvPoint2D32f center;  \/* Center of the box.                          *\/$/;"	m	struct:CvBox2D	access:public
CvBox2D::size	/usr/include/opencv/cxtypes.h	/^    CvSize2D32f  size;    \/* Box width and length.                       *\/$/;"	m	struct:CvBox2D	access:public
CvBtFuncTable	/usr/include/opencv/cxmisc.h	/^CvBtFuncTable;$/;"	t	typeref:struct:CvBtFuncTable
CvBtFuncTable	/usr/include/opencv/cxmisc.h	/^typedef struct CvBtFuncTable$/;"	s
CvBtFuncTable::fn_2d	/usr/include/opencv/cxmisc.h	/^    void*   fn_2d[33];$/;"	m	struct:CvBtFuncTable	access:public
CvCalibEtalonType	/usr/include/opencv/cvaux.h	/^CvCalibEtalonType;$/;"	t	typeref:enum:CvCalibEtalonType
CvCalibEtalonType	/usr/include/opencv/cvaux.h	/^typedef enum CvCalibEtalonType$/;"	g
CvCallback	/usr/include/opencv/cvaux.h	/^typedef int (CV_CDECL * CvCallback)(int index, void* buffer, void* user_data);$/;"	t
CvCamera	/usr/include/opencv/cvaux.h	/^CvCamera;$/;"	t	typeref:struct:CvCamera
CvCamera	/usr/include/opencv/cvaux.h	/^typedef struct CvCamera$/;"	s
CvCamera::distortion	/usr/include/opencv/cvaux.h	/^    float   distortion[4]; \/* distortion coefficients - two coefficients for radial distortion$/;"	m	struct:CvCamera	access:public
CvCamera::imgSize	/usr/include/opencv/cvaux.h	/^    float   imgSize[2]; \/* size of the camera view, used during calibration *\/$/;"	m	struct:CvCamera	access:public
CvCamera::matrix	/usr/include/opencv/cvaux.h	/^    float   matrix[9]; \/* intinsic camera parameters:  [ fx 0 cx; 0 fy cy; 0 0 1 ] *\/$/;"	m	struct:CvCamera	access:public
CvCamera::rotMatr	/usr/include/opencv/cvaux.h	/^    float   rotMatr[9];$/;"	m	struct:CvCamera	access:public
CvCamera::transVect	/usr/include/opencv/cvaux.h	/^    float   transVect[3]; \/* rotation matrix and transition vector relatively$/;"	m	struct:CvCamera	access:public
CvCapture	/usr/include/opencv/highgui.h	/^typedef struct CvCapture CvCapture;$/;"	t	typeref:struct:CvCapture
CvChain	/usr/include/opencv/cxtypes.h	/^CvChain;$/;"	t	typeref:struct:CvChain
CvChain	/usr/include/opencv/cxtypes.h	/^typedef struct CvChain$/;"	s
CvChain::origin	/usr/include/opencv/cxtypes.h	/^    CvPoint  origin;$/;"	m	struct:CvChain	access:public
CvChainApproxMethod	/usr/include/opencv/cvcompat.h	/^typedef int CvChainApproxMethod;$/;"	t
CvChainPtReader	/usr/include/opencv/cvtypes.h	/^CvChainPtReader;$/;"	t	typeref:struct:CvChainPtReader
CvChainPtReader	/usr/include/opencv/cvtypes.h	/^typedef struct CvChainPtReader$/;"	s
CvChainPtReader::code	/usr/include/opencv/cvtypes.h	/^    char      code;$/;"	m	struct:CvChainPtReader	access:public
CvChainPtReader::deltas	/usr/include/opencv/cvtypes.h	/^    schar     deltas[8][2];$/;"	m	struct:CvChainPtReader	access:public
CvChainPtReader::pt	/usr/include/opencv/cvtypes.h	/^    CvPoint   pt;$/;"	m	struct:CvChainPtReader	access:public
CvCliqueFinder	/usr/include/opencv/cvaux.h	/^typedef struct CvCliqueFinder$/;"	s
CvCliqueFinder	/usr/include/opencv/cvaux.h	/^} CvCliqueFinder;$/;"	t	typeref:struct:CvCliqueFinder
CvCliqueFinder::All	/usr/include/opencv/cvaux.h	/^    int** All;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::N	/usr/include/opencv/cvaux.h	/^    int N; \/\/graph size$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::adj_matr	/usr/include/opencv/cvaux.h	/^    int**    adj_matr;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::best_score	/usr/include/opencv/cvaux.h	/^    int best_score;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::best_weight	/usr/include/opencv/cvaux.h	/^    float best_weight;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::cand_weight	/usr/include/opencv/cvaux.h	/^    float* cand_weight;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::ce	/usr/include/opencv/cvaux.h	/^    int* ce;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::cur_weight	/usr/include/opencv/cvaux.h	/^    float* cur_weight;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::current_comp	/usr/include/opencv/cvaux.h	/^    int* current_comp;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::edge_weights	/usr/include/opencv/cvaux.h	/^    float* edge_weights;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::fixp	/usr/include/opencv/cvaux.h	/^    int* fixp; \/\/node with minimal disconnections$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::graph	/usr/include/opencv/cvaux.h	/^    CvGraph* graph;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::k	/usr/include/opencv/cvaux.h	/^    int k; \/\/stack size$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::ne	/usr/include/opencv/cvaux.h	/^    int* ne;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::nod	/usr/include/opencv/cvaux.h	/^    int* nod;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::s	/usr/include/opencv/cvaux.h	/^    int* s; \/\/for selected candidate$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::status	/usr/include/opencv/cvaux.h	/^    int status;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::vertex_weights	/usr/include/opencv/cvaux.h	/^    float* vertex_weights;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::weighted	/usr/include/opencv/cvaux.h	/^    int weighted;$/;"	m	struct:CvCliqueFinder	access:public
CvCliqueFinder::weighted_edges	/usr/include/opencv/cvaux.h	/^    int weighted_edges;    $/;"	m	struct:CvCliqueFinder	access:public
CvCloneFunc	/usr/include/opencv/cxtypes.h	/^typedef void* (CV_CDECL *CvCloneFunc)( const void* struct_ptr );$/;"	t
CvCmpFunc	/usr/include/opencv/cxcore.h	/^typedef int (CV_CDECL* CvCmpFunc)(const void* a, const void* b, void* userdata );$/;"	t
CvCmpOp	/usr/include/opencv/cxmisc.h	/^typedef enum CvCmpOp {$/;"	g
CvCmpOp	/usr/include/opencv/cxmisc.h	/^} CvCmpOp;$/;"	t	typeref:enum:CvCmpOp
CvCoeffType	/usr/include/opencv/cvcompat.h	72;"	d
CvColumnFilterFunc	/usr/include/opencv/cv.hpp	/^typedef void (*CvColumnFilterFunc)( uchar** src, uchar* dst, int dst_step, int count, void* params );$/;"	t
CvCompareMethod	/usr/include/opencv/cvcompat.h	67;"	d
CvConDensation	/usr/include/opencv/cvtypes.h	/^CvConDensation;$/;"	t	typeref:struct:CvConDensation
CvConDensation	/usr/include/opencv/cvtypes.h	/^typedef struct CvConDensation$/;"	s
CvConDensation::DP	/usr/include/opencv/cvtypes.h	/^    int DP;$/;"	m	struct:CvConDensation	access:public
CvConDensation::DynamMatr	/usr/include/opencv/cvtypes.h	/^    float* DynamMatr;       \/* Matrix of the linear Dynamics system  *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::MP	/usr/include/opencv/cvtypes.h	/^    int MP;$/;"	m	struct:CvConDensation	access:public
CvConDensation::RandS	/usr/include/opencv/cvtypes.h	/^    struct CvRandState* RandS; \/* Array of structures to generate random vectors *\/$/;"	m	struct:CvConDensation	typeref:struct:CvConDensation::CvRandState	access:public
CvConDensation::RandomSample	/usr/include/opencv/cvtypes.h	/^    float* RandomSample;    \/* RandomVector to update sample set     *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::SamplesNum	/usr/include/opencv/cvtypes.h	/^    int SamplesNum;         \/* Number of the Samples                 *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::State	/usr/include/opencv/cvtypes.h	/^    float* State;           \/* Vector of State                       *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::Temp	/usr/include/opencv/cvtypes.h	/^    float* Temp;            \/* Temporary vector                      *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::flConfidence	/usr/include/opencv/cvtypes.h	/^    float* flConfidence;    \/* Confidence for each Sample            *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::flCumulative	/usr/include/opencv/cvtypes.h	/^    float* flCumulative;    \/* Cumulative confidence                 *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::flNewSamples	/usr/include/opencv/cvtypes.h	/^    float** flNewSamples;   \/* temporary array of the Sample Vectors *\/$/;"	m	struct:CvConDensation	access:public
CvConDensation::flSamples	/usr/include/opencv/cvtypes.h	/^    float** flSamples;      \/* arr of the Sample Vectors             *\/$/;"	m	struct:CvConDensation	access:public
CvConnectedComp	/usr/include/opencv/cvtypes.h	/^CvConnectedComp;$/;"	t	typeref:struct:CvConnectedComp
CvConnectedComp	/usr/include/opencv/cvtypes.h	/^typedef struct CvConnectedComp$/;"	s
CvConnectedComp::area	/usr/include/opencv/cvtypes.h	/^    double area;    \/* area of the connected component  *\/$/;"	m	struct:CvConnectedComp	access:public
CvConnectedComp::contour	/usr/include/opencv/cvtypes.h	/^    CvSeq* contour; \/* optional component boundary$/;"	m	struct:CvConnectedComp	access:public
CvConnectedComp::rect	/usr/include/opencv/cvtypes.h	/^    CvRect rect;    \/* ROI of the component  *\/$/;"	m	struct:CvConnectedComp	access:public
CvConnectedComp::value	/usr/include/opencv/cvtypes.h	/^    CvScalar value; \/* average color of the connected component *\/$/;"	m	struct:CvConnectedComp	access:public
CvContour	/usr/include/opencv/cxtypes.h	/^CvContour;$/;"	t	typeref:struct:CvContour
CvContour	/usr/include/opencv/cxtypes.h	/^typedef struct CvContour$/;"	s
CvContourOrientation	/usr/include/opencv/cvaux.h	/^typedef struct CvContourOrientation$/;"	s
CvContourOrientation	/usr/include/opencv/cvaux.h	/^} CvContourOrientation;$/;"	t	typeref:struct:CvContourOrientation
CvContourOrientation::egvals	/usr/include/opencv/cvaux.h	/^    float egvals[2];$/;"	m	struct:CvContourOrientation	access:public
CvContourOrientation::egvects	/usr/include/opencv/cvaux.h	/^    float egvects[4];$/;"	m	struct:CvContourOrientation	access:public
CvContourOrientation::imax	/usr/include/opencv/cvaux.h	/^    int imax, imin;$/;"	m	struct:CvContourOrientation	access:public
CvContourOrientation::imin	/usr/include/opencv/cvaux.h	/^    int imax, imin;$/;"	m	struct:CvContourOrientation	access:public
CvContourOrientation::max	/usr/include/opencv/cvaux.h	/^    float max, min; \/\/ minimum and maximum projections$/;"	m	struct:CvContourOrientation	access:public
CvContourOrientation::min	/usr/include/opencv/cvaux.h	/^    float max, min; \/\/ minimum and maximum projections$/;"	m	struct:CvContourOrientation	access:public
CvContourRetrievalMode	/usr/include/opencv/cvcompat.h	/^typedef int CvContourRetrievalMode;$/;"	t
CvContourScanner	/usr/include/opencv/cvtypes.h	/^typedef struct _CvContourScanner* CvContourScanner;$/;"	t	typeref:struct:_CvContourScanner
CvContourTree	/usr/include/opencv/cvtypes.h	/^CvContourTree;$/;"	t	typeref:struct:CvContourTree
CvContourTree	/usr/include/opencv/cvtypes.h	/^typedef struct CvContourTree$/;"	s
CvContourTree::p1	/usr/include/opencv/cvtypes.h	/^    CvPoint p1;            \/* the first point of the binary tree root segment *\/$/;"	m	struct:CvContourTree	access:public
CvContourTree::p2	/usr/include/opencv/cvtypes.h	/^    CvPoint p2;            \/* the last point of the binary tree root segment *\/$/;"	m	struct:CvContourTree	access:public
CvContourTreesMatchMethod	/usr/include/opencv/cvcompat.h	71;"	d
CvContoursMatchMethod	/usr/include/opencv/cvcompat.h	70;"	d
CvConvexityDefect	/usr/include/opencv/cvtypes.h	/^CvConvexityDefect;$/;"	t	typeref:struct:CvConvexityDefect
CvConvexityDefect	/usr/include/opencv/cvtypes.h	/^typedef struct CvConvexityDefect$/;"	s
CvConvexityDefect::depth	/usr/include/opencv/cvtypes.h	/^    float depth; \/* distance between the farthest point and the convex hull *\/$/;"	m	struct:CvConvexityDefect	access:public
CvConvexityDefect::depth_point	/usr/include/opencv/cvtypes.h	/^    CvPoint* depth_point; \/* the farthest from the convex hull point within the defect *\/$/;"	m	struct:CvConvexityDefect	access:public
CvConvexityDefect::end	/usr/include/opencv/cvtypes.h	/^    CvPoint* end; \/* point of the contour where the defect ends *\/$/;"	m	struct:CvConvexityDefect	access:public
CvConvexityDefect::start	/usr/include/opencv/cvtypes.h	/^    CvPoint* start; \/* point of the contour where the defect begins *\/$/;"	m	struct:CvConvexityDefect	access:public
CvDTreeNode	/usr/include/opencv/ml.h	/^struct CvDTreeNode$/;"	s
CvDTreeNode::Tn	/usr/include/opencv/ml.h	/^    int Tn;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::alpha	/usr/include/opencv/ml.h	/^    double alpha;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::buf_idx	/usr/include/opencv/ml.h	/^    int buf_idx;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::class_idx	/usr/include/opencv/ml.h	/^    int class_idx;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::complexity	/usr/include/opencv/ml.h	/^    int complexity;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::cv_Tn	/usr/include/opencv/ml.h	/^    int* cv_Tn;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::cv_node_error	/usr/include/opencv/ml.h	/^    double* cv_node_error;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::cv_node_risk	/usr/include/opencv/ml.h	/^    double* cv_node_risk;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::depth	/usr/include/opencv/ml.h	/^    int depth;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::get_num_valid	/usr/include/opencv/ml.h	/^    int get_num_valid(int vi) { return num_valid ? num_valid[vi] : sample_count; }$/;"	f	struct:CvDTreeNode	access:public	signature:(int vi)
CvDTreeNode::left	/usr/include/opencv/ml.h	/^    CvDTreeNode* left;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::maxlr	/usr/include/opencv/ml.h	/^    double maxlr;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::node_risk	/usr/include/opencv/ml.h	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::num_valid	/usr/include/opencv/ml.h	/^    int* num_valid;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::offset	/usr/include/opencv/ml.h	/^    int offset;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::parent	/usr/include/opencv/ml.h	/^    CvDTreeNode* parent;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::right	/usr/include/opencv/ml.h	/^    CvDTreeNode* right;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::sample_count	/usr/include/opencv/ml.h	/^    int sample_count;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::set_num_valid	/usr/include/opencv/ml.h	/^    void set_num_valid(int vi, int n) { if( num_valid ) num_valid[vi] = n; }$/;"	f	struct:CvDTreeNode	access:public	signature:(int vi, int n)
CvDTreeNode::split	/usr/include/opencv/ml.h	/^    CvDTreeSplit* split;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::tree_error	/usr/include/opencv/ml.h	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::tree_risk	/usr/include/opencv/ml.h	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeNode::value	/usr/include/opencv/ml.h	/^    double value;$/;"	m	struct:CvDTreeNode	access:public
CvDTreeParams	/usr/include/opencv/ml.h	/^    CvDTreeParams( int _max_depth, int _min_sample_count,$/;"	f	struct:CvDTreeParams	access:public	signature:( int _max_depth, int _min_sample_count, float _regression_accuracy, bool _use_surrogates, int _max_categories, int _cv_folds, bool _use_1se_rule, bool _truncate_pruned_tree, const float* _priors )
CvDTreeParams	/usr/include/opencv/ml.h	/^    CvDTreeParams() : max_categories(10), max_depth(INT_MAX), min_sample_count(10),$/;"	f	struct:CvDTreeParams	access:public
CvDTreeParams	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvBoostParams : public CvDTreeParams$/;"	s
CvDTreeParams	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvDTreeParams$/;"	s
CvDTreeParams	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvRTParams : public CvDTreeParams$/;"	s
CvDTreeParams::CvDTreeParams	/usr/include/opencv/ml.h	/^    CvDTreeParams( int _max_depth, int _min_sample_count,$/;"	f	struct:CvDTreeParams	access:public	signature:( int _max_depth, int _min_sample_count, float _regression_accuracy, bool _use_surrogates, int _max_categories, int _cv_folds, bool _use_1se_rule, bool _truncate_pruned_tree, const float* _priors )
CvDTreeParams::CvDTreeParams	/usr/include/opencv/ml.h	/^    CvDTreeParams() : max_categories(10), max_depth(INT_MAX), min_sample_count(10),$/;"	f	struct:CvDTreeParams	access:public
CvDTreeParams::CvRTParams	/usr/include/opencv/ml.h	/^    CvRTParams( int _max_depth, int _min_sample_count,$/;"	f	struct:CvDTreeParams	access:public	signature:( int _max_depth, int _min_sample_count, float _regression_accuracy, bool _use_surrogates, int _max_categories, const float* _priors, bool _calc_var_importance, int _nactive_vars, int max_num_of_trees_in_the_forest, float forest_accuracy, int termcrit_type )
CvDTreeParams::CvRTParams	/usr/include/opencv/ml.h	/^    CvRTParams() : CvDTreeParams( 5, 10, 0, false, 10, 0, false, false, 0 ),$/;"	f	struct:CvDTreeParams	access:public
CvDTreeParams::boost_type	/usr/include/opencv/ml.h	/^    int boost_type;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::calc_var_importance	/usr/include/opencv/ml.h	/^    bool calc_var_importance; \/\/ true <=> RF processes variable importance$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::cv_folds	/usr/include/opencv/ml.h	/^    int   cv_folds;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::max_categories	/usr/include/opencv/ml.h	/^    int   max_categories;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::max_depth	/usr/include/opencv/ml.h	/^    int   max_depth;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::min_sample_count	/usr/include/opencv/ml.h	/^    int   min_sample_count;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::nactive_vars	/usr/include/opencv/ml.h	/^    int nactive_vars;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::priors	/usr/include/opencv/ml.h	/^    const float* priors;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::regression_accuracy	/usr/include/opencv/ml.h	/^    float regression_accuracy;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::split_criteria	/usr/include/opencv/ml.h	/^    int split_criteria;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::truncate_pruned_tree	/usr/include/opencv/ml.h	/^    bool  truncate_pruned_tree;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::use_1se_rule	/usr/include/opencv/ml.h	/^    bool  use_1se_rule;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::use_surrogates	/usr/include/opencv/ml.h	/^    bool  use_surrogates;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::weak_count	/usr/include/opencv/ml.h	/^    int weak_count;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeParams::weight_trim_rate	/usr/include/opencv/ml.h	/^    double weight_trim_rate;$/;"	m	struct:CvDTreeParams	access:public
CvDTreeSplit	/usr/include/opencv/ml.h	/^struct CvDTreeSplit$/;"	s
CvDTreeSplit::__anon19::__anon20::c	/usr/include/opencv/ml.h	/^            float c;$/;"	m	struct:CvDTreeSplit::__anon19::__anon20	access:public
CvDTreeSplit::__anon19::__anon20::split_point	/usr/include/opencv/ml.h	/^            int split_point;$/;"	m	struct:CvDTreeSplit::__anon19::__anon20	access:public
CvDTreeSplit::__anon19::ord	/usr/include/opencv/ml.h	/^        ord;$/;"	m	union:CvDTreeSplit::__anon19	typeref:struct:CvDTreeSplit::__anon19::__anon20	access:public
CvDTreeSplit::__anon19::subset	/usr/include/opencv/ml.h	/^        int subset[2];$/;"	m	union:CvDTreeSplit::__anon19	access:public
CvDTreeSplit::inversed	/usr/include/opencv/ml.h	/^    int inversed;$/;"	m	struct:CvDTreeSplit	access:public
CvDTreeSplit::next	/usr/include/opencv/ml.h	/^    CvDTreeSplit* next;$/;"	m	struct:CvDTreeSplit	access:public
CvDTreeSplit::quality	/usr/include/opencv/ml.h	/^    float quality;$/;"	m	struct:CvDTreeSplit	access:public
CvDTreeSplit::var_idx	/usr/include/opencv/ml.h	/^    int var_idx;$/;"	m	struct:CvDTreeSplit	access:public
CvDTreeTrainData	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvDTreeTrainData$/;"	s
CvDTreeTrainData::buf	/usr/include/opencv/ml.h	/^    CvMat* buf;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::buf_count	/usr/include/opencv/ml.h	/^    int buf_count, buf_size;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::buf_size	/usr/include/opencv/ml.h	/^    int buf_count, buf_size;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::cat_count	/usr/include/opencv/ml.h	/^    CvMat* cat_count;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::cat_map	/usr/include/opencv/ml.h	/^    CvMat* cat_map;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::cat_ofs	/usr/include/opencv/ml.h	/^    CvMat* cat_ofs;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::cat_var_count	/usr/include/opencv/ml.h	/^    int ord_var_count, cat_var_count;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::counts	/usr/include/opencv/ml.h	/^    CvMat* counts;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::cv_heap	/usr/include/opencv/ml.h	/^    CvSet* cv_heap;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::data_root	/usr/include/opencv/ml.h	/^    CvDTreeNode* data_root;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::direction	/usr/include/opencv/ml.h	/^    CvMat* direction;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::have_labels	/usr/include/opencv/ml.h	/^    bool have_labels, have_priors;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::have_priors	/usr/include/opencv/ml.h	/^    bool have_labels, have_priors;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::is_classifier	/usr/include/opencv/ml.h	/^    bool is_classifier;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::max_c_count	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::node_heap	/usr/include/opencv/ml.h	/^    CvSet* node_heap;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::nv_heap	/usr/include/opencv/ml.h	/^    CvSet* nv_heap;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::ord_var_count	/usr/include/opencv/ml.h	/^    int ord_var_count, cat_var_count;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::params	/usr/include/opencv/ml.h	/^    CvDTreeParams params;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::priors	/usr/include/opencv/ml.h	/^    CvMat* priors;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::priors_mult	/usr/include/opencv/ml.h	/^    CvMat* priors_mult;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::rng	/usr/include/opencv/ml.h	/^    CvRNG rng;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::sample_count	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::shared	/usr/include/opencv/ml.h	/^    bool shared;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::split_buf	/usr/include/opencv/ml.h	/^    CvMat* split_buf;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::split_heap	/usr/include/opencv/ml.h	/^    CvSet* split_heap;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::temp_storage	/usr/include/opencv/ml.h	/^    CvMemStorage* temp_storage;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::tree_storage	/usr/include/opencv/ml.h	/^    CvMemStorage* tree_storage;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::var_all	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::var_count	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::var_idx	/usr/include/opencv/ml.h	/^    CvMat* var_idx;$/;"	m	struct:CvDTreeTrainData	access:public
CvDTreeTrainData::var_type	/usr/include/opencv/ml.h	/^    CvMat* var_type; \/\/ i-th element =$/;"	m	struct:CvDTreeTrainData	access:public
CvDataType	/usr/include/opencv/cxmisc.h	/^typedef enum CvDataType {$/;"	g
CvDataType	/usr/include/opencv/cxmisc.h	/^} CvDataType;$/;"	t	typeref:enum:CvDataType
CvDefParam	/usr/include/opencv/cvvidsurv.hpp	/^struct CvDefParam$/;"	s
CvDefParam::Double	/usr/include/opencv/cvvidsurv.hpp	/^    double              Double;$/;"	m	struct:CvDefParam	access:public
CvDefParam::Float	/usr/include/opencv/cvvidsurv.hpp	/^    float               Float;$/;"	m	struct:CvDefParam	access:public
CvDefParam::Int	/usr/include/opencv/cvvidsurv.hpp	/^    int                 Int;$/;"	m	struct:CvDefParam	access:public
CvDefParam::Str	/usr/include/opencv/cvvidsurv.hpp	/^    char*               Str;$/;"	m	struct:CvDefParam	access:public
CvDefParam::next	/usr/include/opencv/cvvidsurv.hpp	/^    struct CvDefParam*    next;$/;"	m	struct:CvDefParam	typeref:struct:CvDefParam::CvDefParam	access:public
CvDefParam::pComment	/usr/include/opencv/cvvidsurv.hpp	/^    char*               pComment;$/;"	m	struct:CvDefParam	access:public
CvDefParam::pDouble	/usr/include/opencv/cvvidsurv.hpp	/^    double*             pDouble;$/;"	m	struct:CvDefParam	access:public
CvDefParam::pFloat	/usr/include/opencv/cvvidsurv.hpp	/^    float*              pFloat;$/;"	m	struct:CvDefParam	access:public
CvDefParam::pInt	/usr/include/opencv/cvvidsurv.hpp	/^    int*                pInt;$/;"	m	struct:CvDefParam	access:public
CvDefParam::pName	/usr/include/opencv/cvvidsurv.hpp	/^    char*               pName;$/;"	m	struct:CvDefParam	access:public
CvDefParam::pStr	/usr/include/opencv/cvvidsurv.hpp	/^    char**              pStr;$/;"	m	struct:CvDefParam	access:public
CvDisMaskType	/usr/include/opencv/cvcompat.h	62;"	d
CvDisType	/usr/include/opencv/cvcompat.h	/^typedef int CvDisType;$/;"	t
CvDistanceFunction	/usr/include/opencv/cvtypes.h	/^typedef float (CV_CDECL * CvDistanceFunction)( const float* a, const float* b, void* user_param );$/;"	t
CvDrawShape	/usr/include/opencv/cvvidsurv.hpp	/^struct CvDrawShape$/;"	s
CvDrawShape::ELLIPSE	/usr/include/opencv/cvvidsurv.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	e	enum:CvDrawShape::__anon9
CvDrawShape::RECT	/usr/include/opencv/cvvidsurv.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	e	enum:CvDrawShape::__anon9
CvDrawShape::color	/usr/include/opencv/cvvidsurv.hpp	/^    CvScalar color;$/;"	m	struct:CvDrawShape	access:public
CvDrawShape::shape	/usr/include/opencv/cvvidsurv.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	m	struct:CvDrawShape	typeref:enum:CvDrawShape::__anon9	access:public
CvEHMM	/usr/include/opencv/cvaux.h	/^CvEHMM;$/;"	t	typeref:struct:CvEHMM
CvEHMM	/usr/include/opencv/cvaux.h	/^typedef struct CvEHMM$/;"	s
CvEHMM::__anon11::ehmm	/usr/include/opencv/cvaux.h	/^        struct CvEHMM* ehmm; \/* pointer to an embedded model or NULL, if it is a leaf *\/$/;"	m	union:CvEHMM::__anon11	typeref:struct:CvEHMM::__anon11::CvEHMM	access:public
CvEHMM::__anon11::state	/usr/include/opencv/cvaux.h	/^        CvEHMMState* state; \/* if level == 0 points to real states array,$/;"	m	union:CvEHMM::__anon11	access:public
CvEHMM::level	/usr/include/opencv/cvaux.h	/^    int level; \/* 0 - lowest(i.e its states are real states), ..... *\/$/;"	m	struct:CvEHMM	access:public
CvEHMM::num_states	/usr/include/opencv/cvaux.h	/^    int num_states; \/* number of HMM states *\/$/;"	m	struct:CvEHMM	access:public
CvEHMM::obsProb	/usr/include/opencv/cvaux.h	/^    float** obsProb; \/* if level == 0 - array of brob matrices corresponding to hmm$/;"	m	struct:CvEHMM	access:public
CvEHMM::transP	/usr/include/opencv/cvaux.h	/^    float*  transP;\/*transition probab. matrices for states *\/$/;"	m	struct:CvEHMM	access:public
CvEHMM::u	/usr/include/opencv/cvaux.h	/^    } u;$/;"	m	struct:CvEHMM	typeref:union:CvEHMM::__anon11	access:public
CvEHMMState	/usr/include/opencv/cvaux.h	/^CvEHMMState;$/;"	t	typeref:struct:CvEHMMState
CvEHMMState	/usr/include/opencv/cvaux.h	/^typedef struct CvEHMMState$/;"	s
CvEHMMState::inv_var	/usr/include/opencv/cvaux.h	/^    float* inv_var;     \/* square root of inversed variances corresp. to each mixture*\/$/;"	m	struct:CvEHMMState	access:public
CvEHMMState::log_var_val	/usr/include/opencv/cvaux.h	/^    float* log_var_val; \/* sum of 0.5 (LN2PI + ln(variance[i]) ) for i=1,n *\/$/;"	m	struct:CvEHMMState	access:public
CvEHMMState::mu	/usr/include/opencv/cvaux.h	/^    float* mu;          \/*mean vectors corresponding to each mixture*\/$/;"	m	struct:CvEHMMState	access:public
CvEHMMState::num_mix	/usr/include/opencv/cvaux.h	/^    int num_mix;        \/*number of mixtures in this state*\/$/;"	m	struct:CvEHMMState	access:public
CvEHMMState::weight	/usr/include/opencv/cvaux.h	/^    float* weight;      \/*array of mixture weights. Summ of all weights in state is 1. *\/$/;"	m	struct:CvEHMMState	access:public
CvEMParams	/usr/include/opencv/ml.h	/^    CvEMParams( int _nclusters, int _cov_mat_type=1\/*CvEM::COV_MAT_DIAGONAL*\/,$/;"	f	struct:CvEMParams	access:public	signature:( int _nclusters, int _cov_mat_type=1 , int _start_step=0 , CvTermCriteria _term_crit=cvTermCriteria(CV_TERMCRIT_ITER+CV_TERMCRIT_EPS, 100, FLT_EPSILON), const CvMat* _probs=0, const CvMat* _weights=0, const CvMat* _means=0, const CvMat** _covs=0 )
CvEMParams	/usr/include/opencv/ml.h	/^    CvEMParams() : nclusters(10), cov_mat_type(1\/*CvEM::COV_MAT_DIAGONAL*\/),$/;"	f	struct:CvEMParams	access:public
CvEMParams	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvEMParams$/;"	s
CvEMParams::CvEMParams	/usr/include/opencv/ml.h	/^    CvEMParams( int _nclusters, int _cov_mat_type=1\/*CvEM::COV_MAT_DIAGONAL*\/,$/;"	f	struct:CvEMParams	access:public	signature:( int _nclusters, int _cov_mat_type=1 , int _start_step=0 , CvTermCriteria _term_crit=cvTermCriteria(CV_TERMCRIT_ITER+CV_TERMCRIT_EPS, 100, FLT_EPSILON), const CvMat* _probs=0, const CvMat* _weights=0, const CvMat* _means=0, const CvMat** _covs=0 )
CvEMParams::CvEMParams	/usr/include/opencv/ml.h	/^    CvEMParams() : nclusters(10), cov_mat_type(1\/*CvEM::COV_MAT_DIAGONAL*\/),$/;"	f	struct:CvEMParams	access:public
CvEMParams::cov_mat_type	/usr/include/opencv/ml.h	/^    int cov_mat_type;$/;"	m	struct:CvEMParams	access:public
CvEMParams::covs	/usr/include/opencv/ml.h	/^    const CvMat** covs;$/;"	m	struct:CvEMParams	access:public
CvEMParams::means	/usr/include/opencv/ml.h	/^    const CvMat* means;$/;"	m	struct:CvEMParams	access:public
CvEMParams::nclusters	/usr/include/opencv/ml.h	/^    int nclusters;$/;"	m	struct:CvEMParams	access:public
CvEMParams::probs	/usr/include/opencv/ml.h	/^    const CvMat* probs;$/;"	m	struct:CvEMParams	access:public
CvEMParams::start_step	/usr/include/opencv/ml.h	/^    int start_step;$/;"	m	struct:CvEMParams	access:public
CvEMParams::term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit;$/;"	m	struct:CvEMParams	access:public
CvEMParams::weights	/usr/include/opencv/ml.h	/^    const CvMat* weights;$/;"	m	struct:CvEMParams	access:public
CvElementShape	/usr/include/opencv/cvcompat.h	74;"	d
CvErrorCallback	/usr/include/opencv/cxcore.h	/^typedef int (CV_CDECL *CvErrorCallback)( int status, const char* func_name,$/;"	t
CvFGDStatModel	/usr/include/opencv/cvaux.h	/^CvFGDStatModel;$/;"	t	typeref:struct:CvFGDStatModel
CvFGDStatModel	/usr/include/opencv/cvaux.h	/^typedef struct CvFGDStatModel$/;"	s
CvFGDStatModel::Fbd	/usr/include/opencv/cvaux.h	/^    IplImage*              Fbd;$/;"	m	struct:CvFGDStatModel	access:public
CvFGDStatModel::Ftd	/usr/include/opencv/cvaux.h	/^    IplImage*              Ftd;$/;"	m	struct:CvFGDStatModel	access:public
CvFGDStatModel::params	/usr/include/opencv/cvaux.h	/^    CvFGDStatModelParams   params;$/;"	m	struct:CvFGDStatModel	access:public
CvFGDStatModel::pixel_stat	/usr/include/opencv/cvaux.h	/^    CvBGPixelStat*         pixel_stat;$/;"	m	struct:CvFGDStatModel	access:public
CvFGDStatModel::prev_frame	/usr/include/opencv/cvaux.h	/^    IplImage*              prev_frame;$/;"	m	struct:CvFGDStatModel	access:public
CvFGDStatModelParams	/usr/include/opencv/cvaux.h	/^CvFGDStatModelParams;$/;"	t	typeref:struct:CvFGDStatModelParams
CvFGDStatModelParams	/usr/include/opencv/cvaux.h	/^typedef struct CvFGDStatModelParams$/;"	s
CvFGDStatModelParams::Lc	/usr/include/opencv/cvaux.h	/^    int    Lc;			\/* Quantized levels per 'color' component. Power of two, typically 32, 64 or 128.				*\/$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::Lcc	/usr/include/opencv/cvaux.h	/^    int    Lcc;			\/* Quantized levels per 'color co-occurrence' component.  Power of two, typically 16, 32 or 64.			*\/$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::N1c	/usr/include/opencv/cvaux.h	/^    int    N1c;			\/* Number of color vectors used to model normal background color variation at a given pixel.			*\/$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::N1cc	/usr/include/opencv/cvaux.h	/^    int    N1cc;		\/* Number of color co-occurrence vectors used to model normal background color variation at a given pixel.	*\/$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::N2c	/usr/include/opencv/cvaux.h	/^    int    N2c;			\/* Number of color vectors retained at given pixel.  Must be > N1c, typically ~ 5\/3 of N1c.			*\/$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::N2cc	/usr/include/opencv/cvaux.h	/^    int    N2cc;		\/* Number of color co-occurrence vectors retained at given pixel.  Must be > N1cc, typically ~ 5\/3 of N1cc.	*\/$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::T	/usr/include/opencv/cvaux.h	/^    float  T;			\/* "A percentage value which determines when new features can be recognized as new background." (Typically 0.9).*\/$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::alpha1	/usr/include/opencv/cvaux.h	/^    float  alpha1;		\/* How quickly we forget old background pixel values seen.  Typically set to 0.1  				*\/$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::alpha2	/usr/include/opencv/cvaux.h	/^    float  alpha2;		\/* "Controls speed of feature learning". Depends on T. Typical value circa 0.005. 				*\/$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::alpha3	/usr/include/opencv/cvaux.h	/^    float  alpha3;		\/* Alternate to alpha2, used (e.g.) for quicker initial convergence. Typical value 0.1.				*\/$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::delta	/usr/include/opencv/cvaux.h	/^    float  delta;		\/* Affects color and color co-occurrence quantization, typically set to 2.					*\/$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::is_obj_without_holes	/usr/include/opencv/cvaux.h	/^    int    is_obj_without_holes;\/* If TRUE we ignore holes within foreground blobs. Defaults to TRUE.						*\/$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::minArea	/usr/include/opencv/cvaux.h	/^    float  minArea;		\/* Discard foreground blobs whose bounding box is smaller than this threshold.					*\/$/;"	m	struct:CvFGDStatModelParams	access:public
CvFGDStatModelParams::perform_morphing	/usr/include/opencv/cvaux.h	/^    int    perform_morphing;	\/* Number of erode-dilate-erode foreground-blob cleanup iterations.						*\/$/;"	m	struct:CvFGDStatModelParams	access:public
CvFace	/usr/include/opencv/cvaux.h	/^typedef struct CvFace$/;"	s
CvFace::LeftEyeRect	/usr/include/opencv/cvaux.h	/^    CvRect LeftEyeRect;$/;"	m	struct:CvFace	access:public
CvFace::MouthRect	/usr/include/opencv/cvaux.h	/^    CvRect MouthRect;$/;"	m	struct:CvFace	access:public
CvFace::RightEyeRect	/usr/include/opencv/cvaux.h	/^    CvRect RightEyeRect;$/;"	m	struct:CvFace	access:public
CvFaceData	/usr/include/opencv/cvaux.h	/^} CvFaceData;$/;"	t	typeref:struct:CvFace
CvFaceTracker	/usr/include/opencv/cvaux.h	/^typedef struct CvFaceTracker CvFaceTracker;$/;"	t	typeref:struct:CvFaceTracker
CvFileNode	/usr/include/opencv/cxtypes.h	/^CvFileNode;$/;"	t	typeref:struct:CvFileNode
CvFileNode	/usr/include/opencv/cxtypes.h	/^typedef struct CvFileNode$/;"	s
CvFileNode::__anon8::f	/usr/include/opencv/cxtypes.h	/^        double f; \/* scalar floating-point number *\/$/;"	m	union:CvFileNode::__anon8	access:public
CvFileNode::__anon8::i	/usr/include/opencv/cxtypes.h	/^        int i;    \/* scalar integer number *\/$/;"	m	union:CvFileNode::__anon8	access:public
CvFileNode::__anon8::map	/usr/include/opencv/cxtypes.h	/^        CvFileNodeHash* map; \/* map (collection of named file nodes) *\/$/;"	m	union:CvFileNode::__anon8	access:public
CvFileNode::__anon8::seq	/usr/include/opencv/cxtypes.h	/^        CvSeq* seq; \/* sequence (ordered collection of file nodes) *\/$/;"	m	union:CvFileNode::__anon8	access:public
CvFileNode::__anon8::str	/usr/include/opencv/cxtypes.h	/^        CvString str; \/* text string *\/$/;"	m	union:CvFileNode::__anon8	access:public
CvFileNode::data	/usr/include/opencv/cxtypes.h	/^    } data;$/;"	m	struct:CvFileNode	typeref:union:CvFileNode::__anon8	access:public
CvFileNode::info	/usr/include/opencv/cxtypes.h	/^    struct CvTypeInfo* info; \/* type information$/;"	m	struct:CvFileNode	typeref:struct:CvFileNode::CvTypeInfo	access:public
CvFileNode::tag	/usr/include/opencv/cxtypes.h	/^    int tag;$/;"	m	struct:CvFileNode	access:public
CvFileNodeHash	/usr/include/opencv/cxtypes.h	/^typedef struct CvGenericHash CvFileNodeHash;$/;"	t	typeref:struct:CvGenericHash
CvFileStorage	/usr/include/opencv/cxtypes.h	/^typedef struct CvFileStorage CvFileStorage;$/;"	t	typeref:struct:CvFileStorage
CvFilter	/usr/include/opencv/cvtypes.h	/^CvFilter;$/;"	t	typeref:enum:CvFilter
CvFilter	/usr/include/opencv/cvtypes.h	/^typedef enum CvFilter$/;"	g
CvFont	/usr/include/opencv/cxcore.h	/^CvFont;$/;"	t	typeref:struct:CvFont
CvFont	/usr/include/opencv/cxcore.h	/^typedef struct CvFont$/;"	s
CvFont::ascii	/usr/include/opencv/cxcore.h	/^    const int*  ascii; \/* font data and metrics *\/$/;"	m	struct:CvFont	access:public
CvFont::cyrillic	/usr/include/opencv/cxcore.h	/^    const int*  cyrillic;$/;"	m	struct:CvFont	access:public
CvFont::dx	/usr/include/opencv/cxcore.h	/^    float       dx; \/* horizontal interval between letters *\/$/;"	m	struct:CvFont	access:public
CvFont::font_face	/usr/include/opencv/cxcore.h	/^    int         font_face; \/* =CV_FONT_* *\/$/;"	m	struct:CvFont	access:public
CvFont::greek	/usr/include/opencv/cxcore.h	/^    const int*  greek;$/;"	m	struct:CvFont	access:public
CvFont::hscale	/usr/include/opencv/cxcore.h	/^    float       hscale, vscale;$/;"	m	struct:CvFont	access:public
CvFont::line_type	/usr/include/opencv/cxcore.h	/^    int         line_type;$/;"	m	struct:CvFont	access:public
CvFont::shear	/usr/include/opencv/cxcore.h	/^    float       shear; \/* slope coefficient: 0 - normal, >0 - italic *\/$/;"	m	struct:CvFont	access:public
CvFont::thickness	/usr/include/opencv/cxcore.h	/^    int         thickness; \/* letters thickness *\/$/;"	m	struct:CvFont	access:public
CvFont::vscale	/usr/include/opencv/cxcore.h	/^    float       hscale, vscale;$/;"	m	struct:CvFont	access:public
CvFontFace	/usr/include/opencv/cvcompat.h	68;"	d
CvFreeFunc	/usr/include/opencv/cxcore.h	/^typedef int (CV_CDECL *CvFreeFunc)(void* pptr, void* userdata);$/;"	t
CvFunc0D	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc0D)( const void* src, void* dst, int param );$/;"	t
CvFunc2D_1A	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_1A)(void* arr, int step, CvSize size);$/;"	t
CvFunc2D_1A1P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_1A1P)(void* arr, int step, CvSize size, void* param);$/;"	t
CvFunc2D_1A1P1I	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_1A1P1I)(void* arr, int step, CvSize size,$/;"	t
CvFunc2D_1A2P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_1A2P)( void* arr, int step, CvSize size,$/;"	t
CvFunc2D_1A4P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_1A4P)( void* arr, int step, CvSize size,$/;"	t
CvFunc2D_2A	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_2A)( void* arr0, int step0,$/;"	t
CvFunc2D_2A1P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_2A1P)( void* arr0, int step0,$/;"	t
CvFunc2D_2A1P1I	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_2A1P1I)( void* arr0, int step0,$/;"	t
CvFunc2D_2A2P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_2A2P)( void* arr0, int step0,$/;"	t
CvFunc2D_2A4P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_2A4P)( void* arr0, int step0,$/;"	t
CvFunc2D_3A	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_3A)( void* arr0, int step0,$/;"	t
CvFunc2D_3A1I	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_3A1I)( void* arr0, int step0,$/;"	t
CvFunc2D_3A1P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_3A1P)( void* arr0, int step0,$/;"	t
CvFunc2D_4A	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2D_4A)( void* arr0, int step0,$/;"	t
CvFunc2DnC_1A1P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2DnC_1A1P)( void* arr, int step, CvSize size,$/;"	t
CvFunc2DnC_1A2P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2DnC_1A2P)( void* arr, int step,$/;"	t
CvFunc2DnC_1A4P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2DnC_1A4P)( void* arr, int step,$/;"	t
CvFunc2DnC_2A1P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2DnC_2A1P)( void* arr0, int step0,$/;"	t
CvFunc2DnC_2A2P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2DnC_2A2P)( void* arr0, int step0,$/;"	t
CvFunc2DnC_2A4P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2DnC_2A4P)( void* arr0, int step0,$/;"	t
CvFunc2DnC_3A1P	/usr/include/opencv/cxmisc.h	/^typedef CvStatus (CV_STDCALL *CvFunc2DnC_3A1P)( void* arr0, int step0,$/;"	t
CvFuncTable	/usr/include/opencv/cxmisc.h	/^CvFuncTable;$/;"	t	typeref:struct:CvFuncTable
CvFuncTable	/usr/include/opencv/cxmisc.h	/^typedef struct CvFuncTable$/;"	s
CvFuncTable::fn_2d	/usr/include/opencv/cxmisc.h	/^    void*   fn_2d[CV_DEPTH_MAX];$/;"	m	struct:CvFuncTable	access:public
CvGLCM	/usr/include/opencv/cvaux.h	/^typedef struct CvGLCM CvGLCM;$/;"	t	typeref:struct:CvGLCM
CvGaussBGModel	/usr/include/opencv/cvaux.h	/^CvGaussBGModel;$/;"	t	typeref:struct:CvGaussBGModel
CvGaussBGModel	/usr/include/opencv/cvaux.h	/^typedef struct CvGaussBGModel$/;"	s
CvGaussBGModel::countFrames	/usr/include/opencv/cvaux.h	/^    int                        countFrames;$/;"	m	struct:CvGaussBGModel	access:public
CvGaussBGModel::g_point	/usr/include/opencv/cvaux.h	/^    CvGaussBGPoint*            g_point;    $/;"	m	struct:CvGaussBGModel	access:public
CvGaussBGModel::params	/usr/include/opencv/cvaux.h	/^    CvGaussBGStatModelParams   params;    $/;"	m	struct:CvGaussBGModel	access:public
CvGaussBGPoint	/usr/include/opencv/cvaux.h	/^CvGaussBGPoint;$/;"	t	typeref:struct:CvGaussBGPoint
CvGaussBGPoint	/usr/include/opencv/cvaux.h	/^typedef struct CvGaussBGPoint$/;"	s
CvGaussBGPoint::g_values	/usr/include/opencv/cvaux.h	/^    CvGaussBGValues* g_values;$/;"	m	struct:CvGaussBGPoint	access:public
CvGaussBGStatModelParams	/usr/include/opencv/cvaux.h	/^typedef struct CvGaussBGStatModelParams$/;"	s
CvGaussBGStatModelParams	/usr/include/opencv/cvaux.h	/^}CvGaussBGStatModelParams;$/;"	t	typeref:struct:CvGaussBGStatModelParams
CvGaussBGStatModelParams::bg_threshold	/usr/include/opencv/cvaux.h	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams	access:public
CvGaussBGStatModelParams::minArea	/usr/include/opencv/cvaux.h	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams	access:public
CvGaussBGStatModelParams::n_gauss	/usr/include/opencv/cvaux.h	/^    int     n_gauss;$/;"	m	struct:CvGaussBGStatModelParams	access:public
CvGaussBGStatModelParams::std_threshold	/usr/include/opencv/cvaux.h	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams	access:public
CvGaussBGStatModelParams::variance_init	/usr/include/opencv/cvaux.h	/^    double  weight_init, variance_init;$/;"	m	struct:CvGaussBGStatModelParams	access:public
CvGaussBGStatModelParams::weight_init	/usr/include/opencv/cvaux.h	/^    double  weight_init, variance_init;$/;"	m	struct:CvGaussBGStatModelParams	access:public
CvGaussBGStatModelParams::win_size	/usr/include/opencv/cvaux.h	/^    int     win_size;               \/* = 1\/alpha *\/$/;"	m	struct:CvGaussBGStatModelParams	access:public
CvGaussBGValues	/usr/include/opencv/cvaux.h	/^CvGaussBGValues;$/;"	t	typeref:struct:CvGaussBGValues
CvGaussBGValues	/usr/include/opencv/cvaux.h	/^typedef struct CvGaussBGValues$/;"	s
CvGaussBGValues::match_sum	/usr/include/opencv/cvaux.h	/^    int         match_sum;$/;"	m	struct:CvGaussBGValues	access:public
CvGaussBGValues::mean	/usr/include/opencv/cvaux.h	/^    double      mean[CV_BGFG_MOG_NCOLORS];$/;"	m	struct:CvGaussBGValues	access:public
CvGaussBGValues::variance	/usr/include/opencv/cvaux.h	/^    double      variance[CV_BGFG_MOG_NCOLORS];$/;"	m	struct:CvGaussBGValues	access:public
CvGaussBGValues::weight	/usr/include/opencv/cvaux.h	/^    double      weight;$/;"	m	struct:CvGaussBGValues	access:public
CvGraph	/usr/include/opencv/cxtypes.h	/^CvGraph;$/;"	t	typeref:struct:CvGraph
CvGraph	/usr/include/opencv/cxtypes.h	/^typedef struct CvGraph$/;"	s
CvGraphEdge	/usr/include/opencv/cxtypes.h	/^CvGraphEdge;$/;"	t	typeref:struct:CvGraphEdge
CvGraphEdge	/usr/include/opencv/cxtypes.h	/^typedef struct CvGraphEdge$/;"	s
CvGraphScanner	/usr/include/opencv/cxcore.h	/^CvGraphScanner;$/;"	t	typeref:struct:CvGraphScanner
CvGraphScanner	/usr/include/opencv/cxcore.h	/^typedef struct CvGraphScanner$/;"	s
CvGraphScanner::dst	/usr/include/opencv/cxcore.h	/^    CvGraphVtx* dst;       \/* current graph edge destination vertex *\/$/;"	m	struct:CvGraphScanner	access:public
CvGraphScanner::edge	/usr/include/opencv/cxcore.h	/^    CvGraphEdge* edge;     \/* current edge *\/$/;"	m	struct:CvGraphScanner	access:public
CvGraphScanner::graph	/usr/include/opencv/cxcore.h	/^    CvGraph* graph;        \/* the graph *\/$/;"	m	struct:CvGraphScanner	access:public
CvGraphScanner::index	/usr/include/opencv/cxcore.h	/^    int      index;        \/* the lower bound of certainly visited vertices *\/$/;"	m	struct:CvGraphScanner	access:public
CvGraphScanner::mask	/usr/include/opencv/cxcore.h	/^    int      mask;         \/* event mask *\/$/;"	m	struct:CvGraphScanner	access:public
CvGraphScanner::stack	/usr/include/opencv/cxcore.h	/^    CvSeq*   stack;        \/* the graph vertex stack *\/$/;"	m	struct:CvGraphScanner	access:public
CvGraphScanner::vtx	/usr/include/opencv/cxcore.h	/^    CvGraphVtx* vtx;       \/* current graph vertex (or current edge origin) *\/$/;"	m	struct:CvGraphScanner	access:public
CvGraphVtx	/usr/include/opencv/cxtypes.h	/^CvGraphVtx;$/;"	t	typeref:struct:CvGraphVtx
CvGraphVtx	/usr/include/opencv/cxtypes.h	/^typedef struct CvGraphVtx$/;"	s
CvGraphVtx2D	/usr/include/opencv/cxtypes.h	/^CvGraphVtx2D;$/;"	t	typeref:struct:CvGraphVtx2D
CvGraphVtx2D	/usr/include/opencv/cxtypes.h	/^typedef struct CvGraphVtx2D$/;"	s
CvGraphVtx2D::ptr	/usr/include/opencv/cxtypes.h	/^    CvPoint2D32f* ptr;$/;"	m	struct:CvGraphVtx2D	access:public
CvGraphWeightType	/usr/include/opencv/cvaux.h	/^typedef enum CvGraphWeightType$/;"	g
CvGraphWeightType	/usr/include/opencv/cvaux.h	/^} CvGraphWeightType;$/;"	t	typeref:enum:CvGraphWeightType
CvGraphWeightedEdge	/usr/include/opencv/cvaux.h	/^CvGraphWeightedEdge;$/;"	t	typeref:struct:CvGraphWeightedEdge
CvGraphWeightedEdge	/usr/include/opencv/cvaux.h	/^typedef struct CvGraphWeightedEdge$/;"	s
CvGraphWeightedVtx	/usr/include/opencv/cvaux.h	/^CvGraphWeightedVtx;$/;"	t	typeref:struct:CvGraphWeightedVtx
CvGraphWeightedVtx	/usr/include/opencv/cvaux.h	/^typedef struct CvGraphWeightedVtx$/;"	s
CvHaarClassifier	/usr/include/opencv/cvtypes.h	/^CvHaarClassifier;$/;"	t	typeref:struct:CvHaarClassifier
CvHaarClassifier	/usr/include/opencv/cvtypes.h	/^typedef struct CvHaarClassifier$/;"	s
CvHaarClassifier::alpha	/usr/include/opencv/cvtypes.h	/^    float* alpha;$/;"	m	struct:CvHaarClassifier	access:public
CvHaarClassifier::count	/usr/include/opencv/cvtypes.h	/^    int count;$/;"	m	struct:CvHaarClassifier	access:public
CvHaarClassifier::haar_feature	/usr/include/opencv/cvtypes.h	/^    CvHaarFeature* haar_feature;$/;"	m	struct:CvHaarClassifier	access:public
CvHaarClassifier::left	/usr/include/opencv/cvtypes.h	/^    int* left;$/;"	m	struct:CvHaarClassifier	access:public
CvHaarClassifier::right	/usr/include/opencv/cvtypes.h	/^    int* right;$/;"	m	struct:CvHaarClassifier	access:public
CvHaarClassifier::threshold	/usr/include/opencv/cvtypes.h	/^    float* threshold;$/;"	m	struct:CvHaarClassifier	access:public
CvHaarClassifierCascade	/usr/include/opencv/cvtypes.h	/^CvHaarClassifierCascade;$/;"	t	typeref:struct:CvHaarClassifierCascade
CvHaarClassifierCascade	/usr/include/opencv/cvtypes.h	/^typedef struct CvHaarClassifierCascade$/;"	s
CvHaarClassifierCascade::count	/usr/include/opencv/cvtypes.h	/^    int  count;$/;"	m	struct:CvHaarClassifierCascade	access:public
CvHaarClassifierCascade::flags	/usr/include/opencv/cvtypes.h	/^    int  flags;$/;"	m	struct:CvHaarClassifierCascade	access:public
CvHaarClassifierCascade::hid_cascade	/usr/include/opencv/cvtypes.h	/^    CvHidHaarClassifierCascade* hid_cascade;$/;"	m	struct:CvHaarClassifierCascade	access:public
CvHaarClassifierCascade::orig_window_size	/usr/include/opencv/cvtypes.h	/^    CvSize orig_window_size;$/;"	m	struct:CvHaarClassifierCascade	access:public
CvHaarClassifierCascade::real_window_size	/usr/include/opencv/cvtypes.h	/^    CvSize real_window_size;$/;"	m	struct:CvHaarClassifierCascade	access:public
CvHaarClassifierCascade::scale	/usr/include/opencv/cvtypes.h	/^    double scale;$/;"	m	struct:CvHaarClassifierCascade	access:public
CvHaarClassifierCascade::stage_classifier	/usr/include/opencv/cvtypes.h	/^    CvHaarStageClassifier* stage_classifier;$/;"	m	struct:CvHaarClassifierCascade	access:public
CvHaarFeature	/usr/include/opencv/cvtypes.h	/^CvHaarFeature;$/;"	t	typeref:struct:CvHaarFeature
CvHaarFeature	/usr/include/opencv/cvtypes.h	/^typedef struct CvHaarFeature$/;"	s
CvHaarFeature::__anon16::r	/usr/include/opencv/cvtypes.h	/^        CvRect r;$/;"	m	struct:CvHaarFeature::__anon16	access:public
CvHaarFeature::__anon16::weight	/usr/include/opencv/cvtypes.h	/^        float weight;$/;"	m	struct:CvHaarFeature::__anon16	access:public
CvHaarFeature::rect	/usr/include/opencv/cvtypes.h	/^    } rect[CV_HAAR_FEATURE_MAX];$/;"	m	struct:CvHaarFeature	typeref:struct:CvHaarFeature::__anon16	access:public
CvHaarFeature::tilted	/usr/include/opencv/cvtypes.h	/^    int  tilted;$/;"	m	struct:CvHaarFeature	access:public
CvHaarStageClassifier	/usr/include/opencv/cvtypes.h	/^CvHaarStageClassifier;$/;"	t	typeref:struct:CvHaarStageClassifier
CvHaarStageClassifier	/usr/include/opencv/cvtypes.h	/^typedef struct CvHaarStageClassifier$/;"	s
CvHaarStageClassifier::child	/usr/include/opencv/cvtypes.h	/^    int child;$/;"	m	struct:CvHaarStageClassifier	access:public
CvHaarStageClassifier::classifier	/usr/include/opencv/cvtypes.h	/^    CvHaarClassifier* classifier;$/;"	m	struct:CvHaarStageClassifier	access:public
CvHaarStageClassifier::count	/usr/include/opencv/cvtypes.h	/^    int  count;$/;"	m	struct:CvHaarStageClassifier	access:public
CvHaarStageClassifier::next	/usr/include/opencv/cvtypes.h	/^    int next;$/;"	m	struct:CvHaarStageClassifier	access:public
CvHaarStageClassifier::parent	/usr/include/opencv/cvtypes.h	/^    int parent;$/;"	m	struct:CvHaarStageClassifier	access:public
CvHaarStageClassifier::threshold	/usr/include/opencv/cvtypes.h	/^    float threshold;$/;"	m	struct:CvHaarStageClassifier	access:public
CvHidHaarClassifierCascade	/usr/include/opencv/cvtypes.h	/^typedef struct CvHidHaarClassifierCascade CvHidHaarClassifierCascade;$/;"	t	typeref:struct:CvHidHaarClassifierCascade
CvHintAlgorithm	/usr/include/opencv/cxmisc.h	/^typedef enum CvHintAlgorithm {$/;"	g
CvHintAlgorithm	/usr/include/opencv/cxmisc.h	/^} CvHintAlgorithm;$/;"	t	typeref:enum:CvHintAlgorithm
CvHistType	/usr/include/opencv/cxtypes.h	/^typedef int CvHistType;$/;"	t
CvHistogram	/usr/include/opencv/cxtypes.h	/^CvHistogram;$/;"	t	typeref:struct:CvHistogram
CvHistogram	/usr/include/opencv/cxtypes.h	/^typedef struct CvHistogram$/;"	s
CvHistogram::bins	/usr/include/opencv/cxtypes.h	/^    CvArr*  bins;$/;"	m	struct:CvHistogram	access:public
CvHistogram::mat	/usr/include/opencv/cxtypes.h	/^    CvMatND mat;                    \/* Embedded matrix header for array histograms. *\/$/;"	m	struct:CvHistogram	access:public
CvHistogram::thresh	/usr/include/opencv/cxtypes.h	/^    float   thresh[CV_MAX_DIM][2];  \/* For uniform histograms.                      *\/$/;"	m	struct:CvHistogram	access:public
CvHistogram::thresh2	/usr/include/opencv/cxtypes.h	/^    float** thresh2;                \/* For non-uniform histograms.                  *\/$/;"	m	struct:CvHistogram	access:public
CvHistogram::type	/usr/include/opencv/cxtypes.h	/^    int     type;$/;"	m	struct:CvHistogram	access:public
CvHuMoments	/usr/include/opencv/cvtypes.h	/^CvHuMoments;$/;"	t	typeref:struct:CvHuMoments
CvHuMoments	/usr/include/opencv/cvtypes.h	/^typedef struct CvHuMoments$/;"	s
CvHuMoments::hu1	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
CvHuMoments::hu2	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
CvHuMoments::hu3	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
CvHuMoments::hu4	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
CvHuMoments::hu5	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
CvHuMoments::hu6	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
CvHuMoments::hu7	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
CvImgObsInfo	/usr/include/opencv/cvaux.h	/^CvImgObsInfo;\/*struct for 1 image*\/$/;"	t	typeref:struct:CvImgObsInfo
CvImgObsInfo	/usr/include/opencv/cvaux.h	/^typedef struct CvImgObsInfo$/;"	s
CvImgObsInfo::mix	/usr/include/opencv/cvaux.h	/^    int* mix;  \/* number of mixture to which observation belong *\/$/;"	m	struct:CvImgObsInfo	access:public
CvImgObsInfo::obs	/usr/include/opencv/cvaux.h	/^    float* obs;\/\/consequtive observations$/;"	m	struct:CvImgObsInfo	access:public
CvImgObsInfo::obs_size	/usr/include/opencv/cvaux.h	/^    int obs_size;$/;"	m	struct:CvImgObsInfo	access:public
CvImgObsInfo::obs_x	/usr/include/opencv/cvaux.h	/^    int obs_x;$/;"	m	struct:CvImgObsInfo	access:public
CvImgObsInfo::obs_y	/usr/include/opencv/cvaux.h	/^    int obs_y;$/;"	m	struct:CvImgObsInfo	access:public
CvImgObsInfo::state	/usr/include/opencv/cvaux.h	/^    int* state;\/* arr of pairs superstate\/state to which observation belong *\/$/;"	m	struct:CvImgObsInfo	access:public
CvInput	/usr/include/opencv/cvaux.h	/^CvInput;$/;"	t	typeref:union:__anon10
CvIsInstanceFunc	/usr/include/opencv/cxtypes.h	/^typedef int (CV_CDECL *CvIsInstanceFunc)( const void* struct_ptr );$/;"	t
CvKalman	/usr/include/opencv/cvtypes.h	/^CvKalman;$/;"	t	typeref:struct:CvKalman
CvKalman	/usr/include/opencv/cvtypes.h	/^typedef struct CvKalman$/;"	s
CvKalman::CP	/usr/include/opencv/cvtypes.h	/^    int CP;                     \/* number of control vector dimensions *\/$/;"	m	struct:CvKalman	access:public
CvKalman::DP	/usr/include/opencv/cvtypes.h	/^    int DP;                     \/* number of state vector dimensions *\/$/;"	m	struct:CvKalman	access:public
CvKalman::DynamMatr	/usr/include/opencv/cvtypes.h	/^    float* DynamMatr;           \/* =transition_matrix->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::KalmGainMatr	/usr/include/opencv/cvtypes.h	/^    float* KalmGainMatr;        \/* =gain->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::MNCovariance	/usr/include/opencv/cvtypes.h	/^    float* MNCovariance;        \/* =measurement_noise_cov->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::MP	/usr/include/opencv/cvtypes.h	/^    int MP;                     \/* number of measurement vector dimensions *\/$/;"	m	struct:CvKalman	access:public
CvKalman::MeasurementMatr	/usr/include/opencv/cvtypes.h	/^    float* MeasurementMatr;     \/* =measurement_matrix->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::PNCovariance	/usr/include/opencv/cvtypes.h	/^    float* PNCovariance;        \/* =process_noise_cov->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::PosterErrorCovariance	/usr/include/opencv/cvtypes.h	/^    float* PosterErrorCovariance;\/* =error_cov_post->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::PosterState	/usr/include/opencv/cvtypes.h	/^    float* PosterState;         \/* =state_pre->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::PriorErrorCovariance	/usr/include/opencv/cvtypes.h	/^    float* PriorErrorCovariance;\/* =error_cov_pre->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::PriorState	/usr/include/opencv/cvtypes.h	/^    float* PriorState;          \/* =state_post->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::Temp1	/usr/include/opencv/cvtypes.h	/^    float* Temp1;               \/* temp1->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::Temp2	/usr/include/opencv/cvtypes.h	/^    float* Temp2;               \/* temp2->data.fl *\/$/;"	m	struct:CvKalman	access:public
CvKalman::control_matrix	/usr/include/opencv/cvtypes.h	/^    CvMat* control_matrix;      \/* control matrix (B)$/;"	m	struct:CvKalman	access:public
CvKalman::error_cov_post	/usr/include/opencv/cvtypes.h	/^    CvMat* error_cov_post;      \/* posteriori error estimate covariance matrix (P(k)):$/;"	m	struct:CvKalman	access:public
CvKalman::error_cov_pre	/usr/include/opencv/cvtypes.h	/^    CvMat* error_cov_pre;       \/* priori error estimate covariance matrix (P'(k)):$/;"	m	struct:CvKalman	access:public
CvKalman::gain	/usr/include/opencv/cvtypes.h	/^    CvMat* gain;                \/* Kalman gain matrix (K(k)):$/;"	m	struct:CvKalman	access:public
CvKalman::measurement_matrix	/usr/include/opencv/cvtypes.h	/^    CvMat* measurement_matrix;  \/* measurement matrix (H) *\/$/;"	m	struct:CvKalman	access:public
CvKalman::measurement_noise_cov	/usr/include/opencv/cvtypes.h	/^    CvMat* measurement_noise_cov; \/* measurement noise covariance matrix (R) *\/$/;"	m	struct:CvKalman	access:public
CvKalman::process_noise_cov	/usr/include/opencv/cvtypes.h	/^    CvMat* process_noise_cov;   \/* process noise covariance matrix (Q) *\/$/;"	m	struct:CvKalman	access:public
CvKalman::state_post	/usr/include/opencv/cvtypes.h	/^    CvMat* state_post;          \/* corrected state (x(k)):$/;"	m	struct:CvKalman	access:public
CvKalman::state_pre	/usr/include/opencv/cvtypes.h	/^    CvMat* state_pre;           \/* predicted state (x'(k)):$/;"	m	struct:CvKalman	access:public
CvKalman::temp1	/usr/include/opencv/cvtypes.h	/^    CvMat* temp1;               \/* temporary matrices *\/$/;"	m	struct:CvKalman	access:public
CvKalman::temp2	/usr/include/opencv/cvtypes.h	/^    CvMat* temp2;$/;"	m	struct:CvKalman	access:public
CvKalman::temp3	/usr/include/opencv/cvtypes.h	/^    CvMat* temp3;$/;"	m	struct:CvKalman	access:public
CvKalman::temp4	/usr/include/opencv/cvtypes.h	/^    CvMat* temp4;$/;"	m	struct:CvKalman	access:public
CvKalman::temp5	/usr/include/opencv/cvtypes.h	/^    CvMat* temp5;$/;"	m	struct:CvKalman	access:public
CvKalman::transition_matrix	/usr/include/opencv/cvtypes.h	/^    CvMat* transition_matrix;   \/* state transition matrix (A) *\/$/;"	m	struct:CvKalman	access:public
CvLCMEdge	/usr/include/opencv/cvaux.h	/^typedef struct CvLCMEdge$/;"	s
CvLCMEdge	/usr/include/opencv/cvaux.h	/^} CvLCMEdge;$/;"	t	typeref:struct:CvLCMEdge
CvLCMEdge::chain	/usr/include/opencv/cvaux.h	/^    CvSeq* chain;$/;"	m	struct:CvLCMEdge	access:public
CvLCMEdge::index1	/usr/include/opencv/cvaux.h	/^    int index1;$/;"	m	struct:CvLCMEdge	access:public
CvLCMEdge::index2	/usr/include/opencv/cvaux.h	/^    int index2;$/;"	m	struct:CvLCMEdge	access:public
CvLCMEdge::width	/usr/include/opencv/cvaux.h	/^    float width;$/;"	m	struct:CvLCMEdge	access:public
CvLCMNode	/usr/include/opencv/cvaux.h	/^typedef struct CvLCMNode$/;"	s
CvLCMNode	/usr/include/opencv/cvaux.h	/^} CvLCMNode;$/;"	t	typeref:struct:CvLCMNode
CvLCMNode::contour	/usr/include/opencv/cvaux.h	/^    CvContour* contour; $/;"	m	struct:CvLCMNode	access:public
CvLeeParameters	/usr/include/opencv/cvaux.h	/^typedef enum CvLeeParameters$/;"	g
CvLeeParameters	/usr/include/opencv/cvaux.h	/^} CvLeeParameters;$/;"	t	typeref:enum:CvLeeParameters
CvLevMarq	/usr/include/opencv/cv.hpp	/^struct CV_EXPORTS CvLevMarq$/;"	s
CvLevMarq::CALC_J	/usr/include/opencv/cv.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon1
CvLevMarq::CHECK_ERR	/usr/include/opencv/cv.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon1
CvLevMarq::DONE	/usr/include/opencv/cv.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon1
CvLevMarq::J	/usr/include/opencv/cv.hpp	/^    CvMat* J;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::JtErr	/usr/include/opencv/cv.hpp	/^    CvMat* JtErr;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::JtJ	/usr/include/opencv/cv.hpp	/^    CvMat* JtJ;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::JtJN	/usr/include/opencv/cv.hpp	/^    CvMat* JtJN;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::JtJV	/usr/include/opencv/cv.hpp	/^    CvMat* JtJV;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::JtJW	/usr/include/opencv/cv.hpp	/^    CvMat* JtJW;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::STARTED	/usr/include/opencv/cv.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon1
CvLevMarq::completeSymmFlag	/usr/include/opencv/cv.hpp	/^    bool completeSymmFlag;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::criteria	/usr/include/opencv/cv.hpp	/^    CvTermCriteria criteria;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::err	/usr/include/opencv/cv.hpp	/^    CvMat* err;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::errNorm	/usr/include/opencv/cv.hpp	/^    double prevErrNorm, errNorm;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::iters	/usr/include/opencv/cv.hpp	/^    int iters;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::lambdaLg10	/usr/include/opencv/cv.hpp	/^    int lambdaLg10;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::mask	/usr/include/opencv/cv.hpp	/^    CvMat* mask;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::param	/usr/include/opencv/cv.hpp	/^    CvMat* param;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::prevErrNorm	/usr/include/opencv/cv.hpp	/^    double prevErrNorm, errNorm;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::prevParam	/usr/include/opencv/cv.hpp	/^    CvMat* prevParam;$/;"	m	struct:CvLevMarq	access:public
CvLevMarq::state	/usr/include/opencv/cv.hpp	/^    int state;$/;"	m	struct:CvLevMarq	access:public
CvLineIterator	/usr/include/opencv/cxtypes.h	/^CvLineIterator;$/;"	t	typeref:struct:CvLineIterator
CvLineIterator	/usr/include/opencv/cxtypes.h	/^typedef struct CvLineIterator$/;"	s
CvLineIterator::err	/usr/include/opencv/cxtypes.h	/^    int  err;$/;"	m	struct:CvLineIterator	access:public
CvLineIterator::minus_delta	/usr/include/opencv/cxtypes.h	/^    int  minus_delta;$/;"	m	struct:CvLineIterator	access:public
CvLineIterator::minus_step	/usr/include/opencv/cxtypes.h	/^    int  minus_step;$/;"	m	struct:CvLineIterator	access:public
CvLineIterator::plus_delta	/usr/include/opencv/cxtypes.h	/^    int  plus_delta;$/;"	m	struct:CvLineIterator	access:public
CvLineIterator::plus_step	/usr/include/opencv/cxtypes.h	/^    int  plus_step;$/;"	m	struct:CvLineIterator	access:public
CvLineIterator::ptr	/usr/include/opencv/cxtypes.h	/^    uchar* ptr;$/;"	m	struct:CvLineIterator	access:public
CvLoadImageFunc	/usr/include/opencv/cxcore.h	/^typedef IplImage* (CV_CDECL * CvLoadImageFunc)( const char* filename, int colorness );$/;"	t
CvLoadImageMFunc	/usr/include/opencv/cxcore.h	/^typedef CvMat* (CV_CDECL * CvLoadImageMFunc)( const char* filename, int colorness );$/;"	t
CvMat	/usr/include/opencv/cxtypes.h	/^CvMat;$/;"	t	typeref:struct:CvMat
CvMat	/usr/include/opencv/cxtypes.h	/^typedef struct CvMat$/;"	s
CvMat::__anon2::db	/usr/include/opencv/cxtypes.h	/^        double* db;$/;"	m	union:CvMat::__anon2	access:public
CvMat::__anon2::fl	/usr/include/opencv/cxtypes.h	/^        float* fl;$/;"	m	union:CvMat::__anon2	access:public
CvMat::__anon2::i	/usr/include/opencv/cxtypes.h	/^        int* i;$/;"	m	union:CvMat::__anon2	access:public
CvMat::__anon2::ptr	/usr/include/opencv/cxtypes.h	/^        uchar* ptr;$/;"	m	union:CvMat::__anon2	access:public
CvMat::__anon2::s	/usr/include/opencv/cxtypes.h	/^        short* s;$/;"	m	union:CvMat::__anon2	access:public
CvMat::__anon3::height	/usr/include/opencv/cxtypes.h	/^        int height;$/;"	m	union:CvMat::__anon3	access:public
CvMat::__anon3::rows	/usr/include/opencv/cxtypes.h	/^        int rows;$/;"	m	union:CvMat::__anon3	access:public
CvMat::__anon4::cols	/usr/include/opencv/cxtypes.h	/^        int cols;$/;"	m	union:CvMat::__anon4	access:public
CvMat::__anon4::width	/usr/include/opencv/cxtypes.h	/^        int width;$/;"	m	union:CvMat::__anon4	access:public
CvMat::cols	/usr/include/opencv/cxtypes.h	/^    int cols;$/;"	m	struct:CvMat	access:public
CvMat::data	/usr/include/opencv/cxtypes.h	/^    } data;$/;"	m	struct:CvMat	typeref:union:CvMat::__anon2	access:public
CvMat::hdr_refcount	/usr/include/opencv/cxtypes.h	/^    int hdr_refcount;$/;"	m	struct:CvMat	access:public
CvMat::refcount	/usr/include/opencv/cxtypes.h	/^    int* refcount;$/;"	m	struct:CvMat	access:public
CvMat::rows	/usr/include/opencv/cxtypes.h	/^    int rows;$/;"	m	struct:CvMat	access:public
CvMat::step	/usr/include/opencv/cxtypes.h	/^    int step;$/;"	m	struct:CvMat	access:public
CvMat::type	/usr/include/opencv/cxtypes.h	/^    int type;$/;"	m	struct:CvMat	access:public
CvMatArray	/usr/include/opencv/cvcompat.h	63;"	d
CvMatND	/usr/include/opencv/cxtypes.h	/^CvMatND;$/;"	t	typeref:struct:CvMatND
CvMatND	/usr/include/opencv/cxtypes.h	/^typedef struct CvMatND$/;"	s
CvMatND::__anon5::db	/usr/include/opencv/cxtypes.h	/^        double* db;$/;"	m	union:CvMatND::__anon5	access:public
CvMatND::__anon5::fl	/usr/include/opencv/cxtypes.h	/^        float* fl;$/;"	m	union:CvMatND::__anon5	access:public
CvMatND::__anon5::i	/usr/include/opencv/cxtypes.h	/^        int* i;$/;"	m	union:CvMatND::__anon5	access:public
CvMatND::__anon5::ptr	/usr/include/opencv/cxtypes.h	/^        uchar* ptr;$/;"	m	union:CvMatND::__anon5	access:public
CvMatND::__anon5::s	/usr/include/opencv/cxtypes.h	/^        short* s;$/;"	m	union:CvMatND::__anon5	access:public
CvMatND::__anon6::size	/usr/include/opencv/cxtypes.h	/^        int size;$/;"	m	struct:CvMatND::__anon6	access:public
CvMatND::__anon6::step	/usr/include/opencv/cxtypes.h	/^        int step;$/;"	m	struct:CvMatND::__anon6	access:public
CvMatND::data	/usr/include/opencv/cxtypes.h	/^    } data;$/;"	m	struct:CvMatND	typeref:union:CvMatND::__anon5	access:public
CvMatND::dim	/usr/include/opencv/cxtypes.h	/^    dim[CV_MAX_DIM];$/;"	m	struct:CvMatND	typeref:struct:CvMatND::__anon6	access:public
CvMatND::dims	/usr/include/opencv/cxtypes.h	/^    int dims;$/;"	m	struct:CvMatND	access:public
CvMatND::hdr_refcount	/usr/include/opencv/cxtypes.h	/^    int hdr_refcount;$/;"	m	struct:CvMatND	access:public
CvMatND::refcount	/usr/include/opencv/cxtypes.h	/^    int* refcount;$/;"	m	struct:CvMatND	access:public
CvMatND::type	/usr/include/opencv/cxtypes.h	/^    int type;$/;"	m	struct:CvMatND	access:public
CvMatType	/usr/include/opencv/cvcompat.h	61;"	d
CvMatr32f	/usr/include/opencv/cvtypes.h	/^typedef float*   CvMatr32f;$/;"	t
CvMatr64d	/usr/include/opencv/cvtypes.h	/^typedef double*  CvMatr64d;$/;"	t
CvMatrix3	/usr/include/opencv/cvtypes.h	/^CvMatrix3;$/;"	t	typeref:struct:CvMatrix3
CvMatrix3	/usr/include/opencv/cvtypes.h	/^typedef struct CvMatrix3$/;"	s
CvMatrix3::m	/usr/include/opencv/cvtypes.h	/^    float m[3][3];$/;"	m	struct:CvMatrix3	access:public
CvMemBlock	/usr/include/opencv/cxtypes.h	/^CvMemBlock;$/;"	t	typeref:struct:CvMemBlock
CvMemBlock	/usr/include/opencv/cxtypes.h	/^typedef struct CvMemBlock$/;"	s
CvMemBlock::next	/usr/include/opencv/cxtypes.h	/^    struct CvMemBlock*  next;$/;"	m	struct:CvMemBlock	typeref:struct:CvMemBlock::CvMemBlock	access:public
CvMemBlock::prev	/usr/include/opencv/cxtypes.h	/^    struct CvMemBlock*  prev;$/;"	m	struct:CvMemBlock	typeref:struct:CvMemBlock::CvMemBlock	access:public
CvMemStorage	/usr/include/opencv/cxtypes.h	/^CvMemStorage;$/;"	t	typeref:struct:CvMemStorage
CvMemStorage	/usr/include/opencv/cxtypes.h	/^typedef struct CvMemStorage$/;"	s
CvMemStorage::block_size	/usr/include/opencv/cxtypes.h	/^    int block_size;               \/* Block size.                              *\/$/;"	m	struct:CvMemStorage	access:public
CvMemStorage::bottom	/usr/include/opencv/cxtypes.h	/^    CvMemBlock* bottom;           \/* First allocated block.                   *\/$/;"	m	struct:CvMemStorage	access:public
CvMemStorage::free_space	/usr/include/opencv/cxtypes.h	/^    int free_space;               \/* Remaining free space in current block.   *\/$/;"	m	struct:CvMemStorage	access:public
CvMemStorage::parent	/usr/include/opencv/cxtypes.h	/^    struct  CvMemStorage* parent; \/* We get new blocks from parent as needed. *\/$/;"	m	struct:CvMemStorage	typeref:struct:CvMemStorage::CvMemStorage	access:public
CvMemStorage::signature	/usr/include/opencv/cxtypes.h	/^    int signature;$/;"	m	struct:CvMemStorage	access:public
CvMemStorage::top	/usr/include/opencv/cxtypes.h	/^    CvMemBlock* top;              \/* Current memory block - top of the stack. *\/$/;"	m	struct:CvMemStorage	access:public
CvMemStoragePos	/usr/include/opencv/cxtypes.h	/^CvMemStoragePos;$/;"	t	typeref:struct:CvMemStoragePos
CvMemStoragePos	/usr/include/opencv/cxtypes.h	/^typedef struct CvMemStoragePos$/;"	s
CvMemStoragePos::free_space	/usr/include/opencv/cxtypes.h	/^    int free_space;$/;"	m	struct:CvMemStoragePos	access:public
CvMemStoragePos::top	/usr/include/opencv/cxtypes.h	/^    CvMemBlock* top;$/;"	m	struct:CvMemStoragePos	access:public
CvModule	/usr/include/opencv/cxcore.hpp	/^struct CV_EXPORTS CvModule$/;"	s
CvModule::first	/usr/include/opencv/cxcore.hpp	/^    static CvModuleInfo* first;$/;"	m	struct:CvModule	access:public
CvModule::info	/usr/include/opencv/cxcore.hpp	/^    CvModuleInfo* info;$/;"	m	struct:CvModule	access:public
CvModule::last	/usr/include/opencv/cxcore.hpp	/^    static CvModuleInfo* last;$/;"	m	struct:CvModule	access:public
CvModuleInfo	/usr/include/opencv/cxtypes.h	/^CvModuleInfo;$/;"	t	typeref:struct:CvModuleInfo
CvModuleInfo	/usr/include/opencv/cxtypes.h	/^typedef struct CvModuleInfo$/;"	s
CvModuleInfo::func_tab	/usr/include/opencv/cxtypes.h	/^    CvPluginFuncInfo* func_tab;$/;"	m	struct:CvModuleInfo	access:public
CvModuleInfo::name	/usr/include/opencv/cxtypes.h	/^    const char* name;$/;"	m	struct:CvModuleInfo	access:public
CvModuleInfo::next	/usr/include/opencv/cxtypes.h	/^    struct CvModuleInfo* next;$/;"	m	struct:CvModuleInfo	typeref:struct:CvModuleInfo::CvModuleInfo	access:public
CvModuleInfo::version	/usr/include/opencv/cxtypes.h	/^    const char* version;$/;"	m	struct:CvModuleInfo	access:public
CvMoments	/usr/include/opencv/cvtypes.h	/^CvMoments;$/;"	t	typeref:struct:CvMoments
CvMoments	/usr/include/opencv/cvtypes.h	/^typedef struct CvMoments$/;"	s
CvMoments::inv_sqrt_m00	/usr/include/opencv/cvtypes.h	/^    double  inv_sqrt_m00; \/* m00 != 0 ? 1\/sqrt(m00) : 0 *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m00	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m01	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m02	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m03	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m10	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m11	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m12	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m20	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m21	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::m30	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::mu02	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::mu03	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::mu11	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::mu12	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::mu20	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::mu21	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
CvMoments::mu30	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
CvMorphOp	/usr/include/opencv/cvcompat.h	75;"	d
CvMouseCallback	/usr/include/opencv/highgui.h	/^typedef void (CV_CDECL *CvMouseCallback )(int event, int x, int y, int flags, void* param);$/;"	t
CvNArrayIterator	/usr/include/opencv/cxcore.h	/^CvNArrayIterator;$/;"	t	typeref:struct:CvNArrayIterator
CvNArrayIterator	/usr/include/opencv/cxcore.h	/^typedef struct CvNArrayIterator$/;"	s
CvNArrayIterator::count	/usr/include/opencv/cxcore.h	/^    int count; \/* number of arrays *\/$/;"	m	struct:CvNArrayIterator	access:public
CvNArrayIterator::dims	/usr/include/opencv/cxcore.h	/^    int dims; \/* number of dimensions to iterate *\/$/;"	m	struct:CvNArrayIterator	access:public
CvNArrayIterator::hdr	/usr/include/opencv/cxcore.h	/^    CvMatND* hdr[CV_MAX_ARR]; \/* pointers to the headers of the$/;"	m	struct:CvNArrayIterator	access:public
CvNArrayIterator::ptr	/usr/include/opencv/cxcore.h	/^    uchar* ptr[CV_MAX_ARR]; \/* pointers to the array slices *\/$/;"	m	struct:CvNArrayIterator	access:public
CvNArrayIterator::size	/usr/include/opencv/cxcore.h	/^    CvSize size; \/* maximal common linear size: { width = size, height = 1 } *\/$/;"	m	struct:CvNArrayIterator	access:public
CvNArrayIterator::stack	/usr/include/opencv/cxcore.h	/^    int stack[CV_MAX_DIM]; \/* for internal use *\/$/;"	m	struct:CvNArrayIterator	access:public
CvNextEdgeType	/usr/include/opencv/cvtypes.h	/^CvNextEdgeType;$/;"	t	typeref:enum:CvNextEdgeType
CvNextEdgeType	/usr/include/opencv/cvtypes.h	/^typedef enum CvNextEdgeType$/;"	g
CvPOSITObject	/usr/include/opencv/cv.h	/^typedef struct CvPOSITObject CvPOSITObject;$/;"	t	typeref:struct:CvPOSITObject
CvPair32s32f	/usr/include/opencv/ml.h	/^struct CvPair32s32f$/;"	s
CvPair32s32f::i	/usr/include/opencv/ml.h	/^    int i;$/;"	m	struct:CvPair32s32f	access:public
CvPair32s32f::val	/usr/include/opencv/ml.h	/^    float val;$/;"	m	struct:CvPair32s32f	access:public
CvParamGrid	/usr/include/opencv/ml.h	/^    CvParamGrid( double _min_val, double _max_val, double log_step )$/;"	f	struct:CvParamGrid	access:public	signature:( double _min_val, double _max_val, double log_step )
CvParamGrid	/usr/include/opencv/ml.h	/^    CvParamGrid()$/;"	f	struct:CvParamGrid	access:public
CvParamGrid	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvParamGrid$/;"	s
CvParamGrid::CvParamGrid	/usr/include/opencv/ml.h	/^    CvParamGrid( double _min_val, double _max_val, double log_step )$/;"	f	struct:CvParamGrid	access:public	signature:( double _min_val, double _max_val, double log_step )
CvParamGrid::CvParamGrid	/usr/include/opencv/ml.h	/^    CvParamGrid()$/;"	f	struct:CvParamGrid	access:public
CvParamGrid::SVM_C	/usr/include/opencv/ml.h	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon18
CvParamGrid::SVM_COEF	/usr/include/opencv/ml.h	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon18
CvParamGrid::SVM_DEGREE	/usr/include/opencv/ml.h	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon18
CvParamGrid::SVM_GAMMA	/usr/include/opencv/ml.h	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon18
CvParamGrid::SVM_NU	/usr/include/opencv/ml.h	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon18
CvParamGrid::SVM_P	/usr/include/opencv/ml.h	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon18
CvParamGrid::max_val	/usr/include/opencv/ml.h	/^    double max_val;$/;"	m	struct:CvParamGrid	access:public
CvParamGrid::min_val	/usr/include/opencv/ml.h	/^    double min_val;$/;"	m	struct:CvParamGrid	access:public
CvParamGrid::step	/usr/include/opencv/ml.h	/^    double step;$/;"	m	struct:CvParamGrid	access:public
CvPixelPosition32f	/usr/include/opencv/cvcompat.h	/^} CvPixelPosition32f;$/;"	t	typeref:struct:_CvPixelPosition32f
CvPixelPosition8s	/usr/include/opencv/cvcompat.h	/^} CvPixelPosition8s;$/;"	t	typeref:struct:_CvPixelPosition8s
CvPixelPosition8u	/usr/include/opencv/cvcompat.h	/^} CvPixelPosition8u;$/;"	t	typeref:struct:_CvPixelPosition8u
CvPluginFuncInfo	/usr/include/opencv/cxtypes.h	/^CvPluginFuncInfo;$/;"	t	typeref:struct:CvPluginFuncInfo
CvPluginFuncInfo	/usr/include/opencv/cxtypes.h	/^typedef struct CvPluginFuncInfo$/;"	s
CvPluginFuncInfo::default_func_addr	/usr/include/opencv/cxtypes.h	/^    void* default_func_addr;$/;"	m	struct:CvPluginFuncInfo	access:public
CvPluginFuncInfo::func_addr	/usr/include/opencv/cxtypes.h	/^    void** func_addr;$/;"	m	struct:CvPluginFuncInfo	access:public
CvPluginFuncInfo::func_names	/usr/include/opencv/cxtypes.h	/^    const char* func_names;$/;"	m	struct:CvPluginFuncInfo	access:public
CvPluginFuncInfo::loaded_from	/usr/include/opencv/cxtypes.h	/^    int loaded_from;$/;"	m	struct:CvPluginFuncInfo	access:public
CvPluginFuncInfo::search_modules	/usr/include/opencv/cxtypes.h	/^    int search_modules;$/;"	m	struct:CvPluginFuncInfo	access:public
CvPoint	/usr/include/opencv/cxtypes.h	/^CvPoint;$/;"	t	typeref:struct:CvPoint
CvPoint	/usr/include/opencv/cxtypes.h	/^typedef struct CvPoint$/;"	s
CvPoint2D32f	/usr/include/opencv/cxtypes.h	/^CvPoint2D32f;$/;"	t	typeref:struct:CvPoint2D32f
CvPoint2D32f	/usr/include/opencv/cxtypes.h	/^typedef struct CvPoint2D32f$/;"	s
CvPoint2D32f::x	/usr/include/opencv/cxtypes.h	/^    float x;$/;"	m	struct:CvPoint2D32f	access:public
CvPoint2D32f::y	/usr/include/opencv/cxtypes.h	/^    float y;$/;"	m	struct:CvPoint2D32f	access:public
CvPoint2D64d	/usr/include/opencv/cvcompat.h	78;"	d
CvPoint2D64f	/usr/include/opencv/cxtypes.h	/^CvPoint2D64f;$/;"	t	typeref:struct:CvPoint2D64f
CvPoint2D64f	/usr/include/opencv/cxtypes.h	/^typedef struct CvPoint2D64f$/;"	s
CvPoint2D64f::x	/usr/include/opencv/cxtypes.h	/^    double x;$/;"	m	struct:CvPoint2D64f	access:public
CvPoint2D64f::y	/usr/include/opencv/cxtypes.h	/^    double y;$/;"	m	struct:CvPoint2D64f	access:public
CvPoint2DSeq	/usr/include/opencv/cxtypes.h	/^typedef CvContour CvPoint2DSeq;$/;"	t
CvPoint3D32f	/usr/include/opencv/cxtypes.h	/^CvPoint3D32f;$/;"	t	typeref:struct:CvPoint3D32f
CvPoint3D32f	/usr/include/opencv/cxtypes.h	/^typedef struct CvPoint3D32f$/;"	s
CvPoint3D32f::x	/usr/include/opencv/cxtypes.h	/^    float x;$/;"	m	struct:CvPoint3D32f	access:public
CvPoint3D32f::y	/usr/include/opencv/cxtypes.h	/^    float y;$/;"	m	struct:CvPoint3D32f	access:public
CvPoint3D32f::z	/usr/include/opencv/cxtypes.h	/^    float z;$/;"	m	struct:CvPoint3D32f	access:public
CvPoint3D64d	/usr/include/opencv/cvcompat.h	79;"	d
CvPoint3D64f	/usr/include/opencv/cxtypes.h	/^CvPoint3D64f;$/;"	t	typeref:struct:CvPoint3D64f
CvPoint3D64f	/usr/include/opencv/cxtypes.h	/^typedef struct CvPoint3D64f$/;"	s
CvPoint3D64f::x	/usr/include/opencv/cxtypes.h	/^    double x;$/;"	m	struct:CvPoint3D64f	access:public
CvPoint3D64f::y	/usr/include/opencv/cxtypes.h	/^    double y;$/;"	m	struct:CvPoint3D64f	access:public
CvPoint3D64f::z	/usr/include/opencv/cxtypes.h	/^    double z;$/;"	m	struct:CvPoint3D64f	access:public
CvPoint::x	/usr/include/opencv/cxtypes.h	/^    int x;$/;"	m	struct:CvPoint	access:public
CvPoint::y	/usr/include/opencv/cxtypes.h	/^    int y;$/;"	m	struct:CvPoint	access:public
CvPolyApproxMethod	/usr/include/opencv/cvcompat.h	69;"	d
CvQuadEdge2D	/usr/include/opencv/cvtypes.h	/^CvQuadEdge2D;$/;"	t	typeref:struct:CvQuadEdge2D
CvQuadEdge2D	/usr/include/opencv/cvtypes.h	/^typedef struct CvQuadEdge2D$/;"	s
CvRNG	/usr/include/opencv/cxtypes.h	/^typedef uint64 CvRNG;$/;"	t
CvRTParams	/usr/include/opencv/ml.h	/^    CvRTParams( int _max_depth, int _min_sample_count,$/;"	f	struct:CvDTreeParams	access:public	signature:( int _max_depth, int _min_sample_count, float _regression_accuracy, bool _use_surrogates, int _max_categories, const float* _priors, bool _calc_var_importance, int _nactive_vars, int max_num_of_trees_in_the_forest, float forest_accuracy, int termcrit_type )
CvRTParams	/usr/include/opencv/ml.h	/^    CvRTParams() : CvDTreeParams( 5, 10, 0, false, 10, 0, false, false, 0 ),$/;"	f	struct:CvDTreeParams	access:public
CvRTrees	/usr/include/opencv/ml.h	/^class CvRTrees;$/;"	v
CvRandState	/usr/include/opencv/cvcompat.h	/^CvRandState;$/;"	t	typeref:struct:CvRandState
CvRandState	/usr/include/opencv/cvcompat.h	/^typedef struct CvRandState$/;"	s
CvRandState::disttype	/usr/include/opencv/cvcompat.h	/^    int       disttype; \/* distribution type *\/$/;"	m	struct:CvRandState	access:public
CvRandState::param	/usr/include/opencv/cvcompat.h	/^    CvScalar  param[2]; \/* parameters of RNG *\/$/;"	m	struct:CvRandState	access:public
CvRandState::state	/usr/include/opencv/cvcompat.h	/^    CvRNG     state;    \/* RNG state (the current seed and carry)*\/$/;"	m	struct:CvRandState	access:public
CvReadFunc	/usr/include/opencv/cxtypes.h	/^typedef void* (CV_CDECL *CvReadFunc)( CvFileStorage* storage, CvFileNode* node );$/;"	t
CvRect	/usr/include/opencv/cxtypes.h	/^CvRect;$/;"	t	typeref:struct:CvRect
CvRect	/usr/include/opencv/cxtypes.h	/^typedef struct CvRect$/;"	s
CvRect::height	/usr/include/opencv/cxtypes.h	/^    int height;$/;"	m	struct:CvRect	access:public
CvRect::width	/usr/include/opencv/cxtypes.h	/^    int width;$/;"	m	struct:CvRect	access:public
CvRect::x	/usr/include/opencv/cxtypes.h	/^    int x;$/;"	m	struct:CvRect	access:public
CvRect::y	/usr/include/opencv/cxtypes.h	/^    int y;$/;"	m	struct:CvRect	access:public
CvRectToRect	/usr/include/opencv/highgui.h	/^CV_INLINE RECT CvRectToRect( CvRect sr )$/;"	f	signature:( CvRect sr )
CvReleaseBGStatModel	/usr/include/opencv/cvaux.h	/^typedef void (CV_CDECL * CvReleaseBGStatModel)( struct CvBGStatModel** bg_model );$/;"	t
CvReleaseFunc	/usr/include/opencv/cxtypes.h	/^typedef void (CV_CDECL *CvReleaseFunc)( void** struct_dblptr );$/;"	t
CvRodriguesType	/usr/include/opencv/cvcompat.h	73;"	d
CvRowFilterFunc	/usr/include/opencv/cv.hpp	/^typedef void (*CvRowFilterFunc)( const uchar* src, uchar* dst, void* params );$/;"	t
CvSURFParams	/usr/include/opencv/cv.h	/^CvSURFParams;$/;"	t	typeref:struct:CvSURFParams
CvSURFParams	/usr/include/opencv/cv.h	/^typedef struct CvSURFParams$/;"	s
CvSURFParams::extended	/usr/include/opencv/cv.h	/^    int extended;$/;"	m	struct:CvSURFParams	access:public
CvSURFParams::hessianThreshold	/usr/include/opencv/cv.h	/^    double hessianThreshold;$/;"	m	struct:CvSURFParams	access:public
CvSURFParams::nOctaveLayers	/usr/include/opencv/cv.h	/^    int nOctaveLayers;$/;"	m	struct:CvSURFParams	access:public
CvSURFParams::nOctaves	/usr/include/opencv/cv.h	/^    int nOctaves;$/;"	m	struct:CvSURFParams	access:public
CvSURFPoint	/usr/include/opencv/cv.h	/^typedef struct CvSURFPoint$/;"	s
CvSURFPoint	/usr/include/opencv/cv.h	/^} CvSURFPoint;$/;"	t	typeref:struct:CvSURFPoint
CvSURFPoint::dir	/usr/include/opencv/cv.h	/^    float dir;$/;"	m	struct:CvSURFPoint	access:public
CvSURFPoint::hessian	/usr/include/opencv/cv.h	/^    float hessian;$/;"	m	struct:CvSURFPoint	access:public
CvSURFPoint::laplacian	/usr/include/opencv/cv.h	/^    int laplacian;$/;"	m	struct:CvSURFPoint	access:public
CvSURFPoint::pt	/usr/include/opencv/cv.h	/^    CvPoint2D32f pt;$/;"	m	struct:CvSURFPoint	access:public
CvSURFPoint::size	/usr/include/opencv/cv.h	/^    int size;$/;"	m	struct:CvSURFPoint	access:public
CvSVMDecisionFunc	/usr/include/opencv/ml.h	/^struct CvSVMDecisionFunc$/;"	s
CvSVMDecisionFunc::alpha	/usr/include/opencv/ml.h	/^    double* alpha;$/;"	m	struct:CvSVMDecisionFunc	access:public
CvSVMDecisionFunc::rho	/usr/include/opencv/ml.h	/^    double rho;$/;"	m	struct:CvSVMDecisionFunc	access:public
CvSVMDecisionFunc::sv_count	/usr/include/opencv/ml.h	/^    int sv_count;$/;"	m	struct:CvSVMDecisionFunc	access:public
CvSVMDecisionFunc::sv_index	/usr/include/opencv/ml.h	/^    int* sv_index;$/;"	m	struct:CvSVMDecisionFunc	access:public
CvSVMKernel	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvSVMKernel$/;"	s
CvSVMKernel::Calc	/usr/include/opencv/ml.h	/^    typedef void (CvSVMKernel::*Calc)( int vec_count, int vec_size, const float** vecs,$/;"	t	struct:CvSVMKernel	access:public
CvSVMKernel::calc_func	/usr/include/opencv/ml.h	/^    Calc calc_func;$/;"	m	struct:CvSVMKernel	access:public
CvSVMKernel::params	/usr/include/opencv/ml.h	/^    const CvSVMParams* params;$/;"	m	struct:CvSVMKernel	access:public
CvSVMKernelRow	/usr/include/opencv/ml.h	/^struct CvSVMKernelRow$/;"	s
CvSVMKernelRow::data	/usr/include/opencv/ml.h	/^    float* data;$/;"	m	struct:CvSVMKernelRow	access:public
CvSVMKernelRow::next	/usr/include/opencv/ml.h	/^    CvSVMKernelRow* next;$/;"	m	struct:CvSVMKernelRow	access:public
CvSVMKernelRow::prev	/usr/include/opencv/ml.h	/^    CvSVMKernelRow* prev;$/;"	m	struct:CvSVMKernelRow	access:public
CvSVMParams	/usr/include/opencv/ml.h	/^struct CV_EXPORTS CvSVMParams$/;"	s
CvSVMParams::C	/usr/include/opencv/ml.h	/^    double      C;  \/\/ for CV_SVM_C_SVC, CV_SVM_EPS_SVR and CV_SVM_NU_SVR$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::class_weights	/usr/include/opencv/ml.h	/^    CvMat*      class_weights; \/\/ for CV_SVM_C_SVC$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::coef0	/usr/include/opencv/ml.h	/^    double      coef0;  \/\/ for poly\/sigmoid$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::degree	/usr/include/opencv/ml.h	/^    double      degree; \/\/ for poly$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::gamma	/usr/include/opencv/ml.h	/^    double      gamma;  \/\/ for poly\/rbf\/sigmoid$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::kernel_type	/usr/include/opencv/ml.h	/^    int         kernel_type;$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::nu	/usr/include/opencv/ml.h	/^    double      nu; \/\/ for CV_SVM_NU_SVC, CV_SVM_ONE_CLASS, and CV_SVM_NU_SVR$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::p	/usr/include/opencv/ml.h	/^    double      p; \/\/ for CV_SVM_EPS_SVR$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::svm_type	/usr/include/opencv/ml.h	/^    int         svm_type;$/;"	m	struct:CvSVMParams	access:public
CvSVMParams::term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit; \/\/ termination criteria$/;"	m	struct:CvSVMParams	access:public
CvSVMSolutionInfo	/usr/include/opencv/ml.h	/^struct CvSVMSolutionInfo$/;"	s
CvSVMSolutionInfo::obj	/usr/include/opencv/ml.h	/^    double obj;$/;"	m	struct:CvSVMSolutionInfo	access:public
CvSVMSolutionInfo::r	/usr/include/opencv/ml.h	/^    double r;   \/\/ for Solver_NU$/;"	m	struct:CvSVMSolutionInfo	access:public
CvSVMSolutionInfo::rho	/usr/include/opencv/ml.h	/^    double rho;$/;"	m	struct:CvSVMSolutionInfo	access:public
CvSVMSolutionInfo::upper_bound_n	/usr/include/opencv/ml.h	/^    double upper_bound_n;$/;"	m	struct:CvSVMSolutionInfo	access:public
CvSVMSolutionInfo::upper_bound_p	/usr/include/opencv/ml.h	/^    double upper_bound_p;$/;"	m	struct:CvSVMSolutionInfo	access:public
CvSaveImageFunc	/usr/include/opencv/cxcore.h	/^typedef int (CV_CDECL * CvSaveImageFunc)( const char* filename, const CvArr* image );$/;"	t
CvScalar	/usr/include/opencv/cxtypes.h	/^CvScalar;$/;"	t	typeref:struct:CvScalar
CvScalar	/usr/include/opencv/cxtypes.h	/^typedef struct CvScalar$/;"	s
CvScalar::val	/usr/include/opencv/cxtypes.h	/^    double val[4];$/;"	m	struct:CvScalar	access:public
CvSeq	/usr/include/opencv/cxtypes.h	/^CvSeq;$/;"	t	typeref:struct:CvSeq
CvSeq	/usr/include/opencv/cxtypes.h	/^typedef struct CvSeq$/;"	s
CvSeqBlock	/usr/include/opencv/cxtypes.h	/^CvSeqBlock;$/;"	t	typeref:struct:CvSeqBlock
CvSeqBlock	/usr/include/opencv/cxtypes.h	/^typedef struct CvSeqBlock$/;"	s
CvSeqBlock::count	/usr/include/opencv/cxtypes.h	/^    int    count;             \/* Number of elements in the block.           *\/$/;"	m	struct:CvSeqBlock	access:public
CvSeqBlock::data	/usr/include/opencv/cxtypes.h	/^    schar* data;              \/* Pointer to the first element of the block. *\/$/;"	m	struct:CvSeqBlock	access:public
CvSeqBlock::next	/usr/include/opencv/cxtypes.h	/^    struct CvSeqBlock*  next; \/* Next sequence block.                       *\/$/;"	m	struct:CvSeqBlock	typeref:struct:CvSeqBlock::CvSeqBlock	access:public
CvSeqBlock::prev	/usr/include/opencv/cxtypes.h	/^    struct CvSeqBlock*  prev; \/* Previous sequence block.                   *\/$/;"	m	struct:CvSeqBlock	typeref:struct:CvSeqBlock::CvSeqBlock	access:public
CvSeqBlock::start_index	/usr/include/opencv/cxtypes.h	/^  int    start_index;         \/* Index of the first element in the block +  *\/$/;"	m	struct:CvSeqBlock	access:public
CvSeqReader	/usr/include/opencv/cxtypes.h	/^CvSeqReader;$/;"	t	typeref:struct:CvSeqReader
CvSeqReader	/usr/include/opencv/cxtypes.h	/^typedef struct CvSeqReader$/;"	s
CvSeqWriter	/usr/include/opencv/cxtypes.h	/^CvSeqWriter;$/;"	t	typeref:struct:CvSeqWriter
CvSeqWriter	/usr/include/opencv/cxtypes.h	/^typedef struct CvSeqWriter$/;"	s
CvSet	/usr/include/opencv/cxtypes.h	/^CvSet;$/;"	t	typeref:struct:CvSet
CvSet	/usr/include/opencv/cxtypes.h	/^typedef struct CvSet$/;"	s
CvSetElem	/usr/include/opencv/cxtypes.h	/^CvSetElem;$/;"	t	typeref:struct:CvSetElem
CvSetElem	/usr/include/opencv/cxtypes.h	/^typedef struct CvSetElem$/;"	s
CvShowImageFunc	/usr/include/opencv/cxcore.h	/^typedef void (CV_CDECL * CvShowImageFunc)( const char* windowname, const CvArr* image );$/;"	t
CvSize	/usr/include/opencv/cxtypes.h	/^CvSize;$/;"	t	typeref:struct:__anon7
CvSize2D32f	/usr/include/opencv/cxtypes.h	/^CvSize2D32f;$/;"	t	typeref:struct:CvSize2D32f
CvSize2D32f	/usr/include/opencv/cxtypes.h	/^typedef struct CvSize2D32f$/;"	s
CvSize2D32f::height	/usr/include/opencv/cxtypes.h	/^    float height;$/;"	m	struct:CvSize2D32f	access:public
CvSize2D32f::width	/usr/include/opencv/cxtypes.h	/^    float width;$/;"	m	struct:CvSize2D32f	access:public
CvSlice	/usr/include/opencv/cxtypes.h	/^CvSlice;$/;"	t	typeref:struct:CvSlice
CvSlice	/usr/include/opencv/cxtypes.h	/^typedef struct CvSlice$/;"	s
CvSlice::end_index	/usr/include/opencv/cxtypes.h	/^    int  start_index, end_index;$/;"	m	struct:CvSlice	access:public
CvSlice::start_index	/usr/include/opencv/cxtypes.h	/^    int  start_index, end_index;$/;"	m	struct:CvSlice	access:public
CvSparseMat	/usr/include/opencv/cxtypes.h	/^CvSparseMat;$/;"	t	typeref:struct:CvSparseMat
CvSparseMat	/usr/include/opencv/cxtypes.h	/^typedef struct CvSparseMat$/;"	s
CvSparseMat::dims	/usr/include/opencv/cxtypes.h	/^    int dims;$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::hashsize	/usr/include/opencv/cxtypes.h	/^    int hashsize;$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::hashtable	/usr/include/opencv/cxtypes.h	/^    void** hashtable;$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::hdr_refcount	/usr/include/opencv/cxtypes.h	/^    int hdr_refcount;$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::heap	/usr/include/opencv/cxtypes.h	/^    struct CvSet* heap;$/;"	m	struct:CvSparseMat	typeref:struct:CvSparseMat::CvSet	access:public
CvSparseMat::idxoffset	/usr/include/opencv/cxtypes.h	/^    int idxoffset;$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::refcount	/usr/include/opencv/cxtypes.h	/^    int* refcount;$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::size	/usr/include/opencv/cxtypes.h	/^    int size[CV_MAX_DIM];$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::type	/usr/include/opencv/cxtypes.h	/^    int type;$/;"	m	struct:CvSparseMat	access:public
CvSparseMat::valoffset	/usr/include/opencv/cxtypes.h	/^    int valoffset;$/;"	m	struct:CvSparseMat	access:public
CvSparseMatIterator	/usr/include/opencv/cxtypes.h	/^CvSparseMatIterator;$/;"	t	typeref:struct:CvSparseMatIterator
CvSparseMatIterator	/usr/include/opencv/cxtypes.h	/^typedef struct CvSparseMatIterator$/;"	s
CvSparseMatIterator::curidx	/usr/include/opencv/cxtypes.h	/^    int curidx;$/;"	m	struct:CvSparseMatIterator	access:public
CvSparseMatIterator::mat	/usr/include/opencv/cxtypes.h	/^    CvSparseMat* mat;$/;"	m	struct:CvSparseMatIterator	access:public
CvSparseMatIterator::node	/usr/include/opencv/cxtypes.h	/^    CvSparseNode* node;$/;"	m	struct:CvSparseMatIterator	access:public
CvSparseNode	/usr/include/opencv/cxtypes.h	/^CvSparseNode;$/;"	t	typeref:struct:CvSparseNode
CvSparseNode	/usr/include/opencv/cxtypes.h	/^typedef struct CvSparseNode$/;"	s
CvSparseNode::hashval	/usr/include/opencv/cxtypes.h	/^    unsigned hashval;$/;"	m	struct:CvSparseNode	access:public
CvSparseNode::next	/usr/include/opencv/cxtypes.h	/^    struct CvSparseNode* next;$/;"	m	struct:CvSparseNode	typeref:struct:CvSparseNode::CvSparseNode	access:public
CvStatus	/usr/include/opencv/cxmisc.h	/^CvStatus;$/;"	t	typeref:enum:CvStatus
CvStatus	/usr/include/opencv/cxmisc.h	/^typedef enum CvStatus$/;"	g
CvStereoBMState	/usr/include/opencv/cv.h	/^CvStereoBMState;$/;"	t	typeref:struct:CvStereoBMState
CvStereoBMState	/usr/include/opencv/cv.h	/^typedef struct CvStereoBMState$/;"	s
CvStereoBMState::SADWindowSize	/usr/include/opencv/cv.h	/^    int SADWindowSize; \/\/ ~5x5..21x21$/;"	m	struct:CvStereoBMState	access:public
CvStereoBMState::minDisparity	/usr/include/opencv/cv.h	/^    int minDisparity;  \/\/ minimum disparity (can be negative) $/;"	m	struct:CvStereoBMState	access:public
CvStereoBMState::numberOfDisparities	/usr/include/opencv/cv.h	/^    int numberOfDisparities; \/\/ maximum disparity - minimum disparity (> 0)$/;"	m	struct:CvStereoBMState	access:public
CvStereoBMState::preFilterCap	/usr/include/opencv/cv.h	/^    int preFilterCap; \/\/ the output of pre-filtering is clipped by [-preFilterCap,preFilterCap]$/;"	m	struct:CvStereoBMState	access:public
CvStereoBMState::preFilterSize	/usr/include/opencv/cv.h	/^    int preFilterSize; \/\/ averaging window size: ~5x5..21x21$/;"	m	struct:CvStereoBMState	access:public
CvStereoBMState::preFilterType	/usr/include/opencv/cv.h	/^    int preFilterType; \/\/ =CV_STEREO_BM_NORMALIZED_RESPONSE now$/;"	m	struct:CvStereoBMState	access:public
CvStereoBMState::preFilteredImg0	/usr/include/opencv/cv.h	/^    CvMat* preFilteredImg0;$/;"	m	struct:CvStereoBMState	access:public
CvStereoBMState::preFilteredImg1	/usr/include/opencv/cv.h	/^    CvMat* preFilteredImg1;$/;"	m	struct:CvStereoBMState	access:public
CvStereoBMState::slidingSumBuf	/usr/include/opencv/cv.h	/^    CvMat* slidingSumBuf;$/;"	m	struct:CvStereoBMState	access:public
CvStereoBMState::speckleRange	/usr/include/opencv/cv.h	/^    int speckleRange; \/\/ acceptable range of variation in window$/;"	m	struct:CvStereoBMState	access:public
CvStereoBMState::speckleWindowSize	/usr/include/opencv/cv.h	/^    int speckleWindowSize; \/\/ disparity variation window$/;"	m	struct:CvStereoBMState	access:public
CvStereoBMState::textureThreshold	/usr/include/opencv/cv.h	/^    int textureThreshold;  \/\/ the disparity is only computed for pixels$/;"	m	struct:CvStereoBMState	access:public
CvStereoBMState::uniquenessRatio	/usr/include/opencv/cv.h	/^    int uniquenessRatio;   \/\/ accept the computed disparity d* only if$/;"	m	struct:CvStereoBMState	access:public
CvStereoCamera	/usr/include/opencv/cvaux.h	/^CvStereoCamera;$/;"	t	typeref:struct:CvStereoCamera
CvStereoCamera	/usr/include/opencv/cvaux.h	/^typedef struct CvStereoCamera$/;"	s
CvStereoCamera::border	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f border[2][4];$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::camera	/usr/include/opencv/cvaux.h	/^    CvCamera* camera[2]; \/* two individual camera parameters *\/$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::coeffs	/usr/include/opencv/cvaux.h	/^    double coeffs[2][3][3];\/* coefficients for transformation *\/$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::epipole	/usr/include/opencv/cvaux.h	/^    CvPoint3D32f epipole[2];$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::fundMatr	/usr/include/opencv/cvaux.h	/^    float fundMatr[9]; \/* fundamental matrix *\/$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::lineCoeffs	/usr/include/opencv/cvaux.h	/^    CvStereoLineCoeff* lineCoeffs;$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::needSwapCameras	/usr/include/opencv/cvaux.h	/^    int needSwapCameras;\/* flag set to 1 if need to swap cameras for good reconstruction *\/$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::quad	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f quad[2][4]; \/* coordinates of destination quadrangle after$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::rotMatrix	/usr/include/opencv/cvaux.h	/^    float rotMatrix[9];$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::transVector	/usr/include/opencv/cvaux.h	/^    float transVector[3];$/;"	m	struct:CvStereoCamera	access:public
CvStereoCamera::warpSize	/usr/include/opencv/cvaux.h	/^    CvSize warpSize;$/;"	m	struct:CvStereoCamera	access:public
CvStereoGCState	/usr/include/opencv/cv.h	/^CvStereoGCState;$/;"	t	typeref:struct:CvStereoGCState
CvStereoGCState	/usr/include/opencv/cv.h	/^typedef struct CvStereoGCState$/;"	s
CvStereoGCState::Ithreshold	/usr/include/opencv/cv.h	/^    int Ithreshold;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::K	/usr/include/opencv/cv.h	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::dispLeft	/usr/include/opencv/cv.h	/^    CvMat* dispLeft;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::dispRight	/usr/include/opencv/cv.h	/^    CvMat* dispRight;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::edgeBuf	/usr/include/opencv/cv.h	/^    CvMat* edgeBuf;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::interactionRadius	/usr/include/opencv/cv.h	/^    int interactionRadius;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::lambda	/usr/include/opencv/cv.h	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::lambda1	/usr/include/opencv/cv.h	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::lambda2	/usr/include/opencv/cv.h	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::left	/usr/include/opencv/cv.h	/^    CvMat* left;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::maxIters	/usr/include/opencv/cv.h	/^    int maxIters;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::minDisparity	/usr/include/opencv/cv.h	/^    int minDisparity;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::numberOfDisparities	/usr/include/opencv/cv.h	/^    int numberOfDisparities;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::occlusionCost	/usr/include/opencv/cv.h	/^    int occlusionCost;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::ptrLeft	/usr/include/opencv/cv.h	/^    CvMat* ptrLeft;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::ptrRight	/usr/include/opencv/cv.h	/^    CvMat* ptrRight;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::right	/usr/include/opencv/cv.h	/^    CvMat* right;$/;"	m	struct:CvStereoGCState	access:public
CvStereoGCState::vtxBuf	/usr/include/opencv/cv.h	/^    CvMat* vtxBuf;$/;"	m	struct:CvStereoGCState	access:public
CvStereoLineCoeff	/usr/include/opencv/cvaux.h	/^typedef struct CvStereoLineCoeff$/;"	s
CvStereoLineCoeff	/usr/include/opencv/cvaux.h	/^}CvStereoLineCoeff;$/;"	t	typeref:struct:CvStereoLineCoeff
CvStereoLineCoeff::Xcoef	/usr/include/opencv/cvaux.h	/^    double Xcoef;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::XcoefA	/usr/include/opencv/cvaux.h	/^    double XcoefA;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::XcoefAB	/usr/include/opencv/cvaux.h	/^    double XcoefAB;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::XcoefB	/usr/include/opencv/cvaux.h	/^    double XcoefB;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::Ycoef	/usr/include/opencv/cvaux.h	/^    double Ycoef;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::YcoefA	/usr/include/opencv/cvaux.h	/^    double YcoefA;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::YcoefAB	/usr/include/opencv/cvaux.h	/^    double YcoefAB;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::YcoefB	/usr/include/opencv/cvaux.h	/^    double YcoefB;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::Zcoef	/usr/include/opencv/cvaux.h	/^    double Zcoef;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::ZcoefA	/usr/include/opencv/cvaux.h	/^    double ZcoefA;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::ZcoefAB	/usr/include/opencv/cvaux.h	/^    double ZcoefAB;$/;"	m	struct:CvStereoLineCoeff	access:public
CvStereoLineCoeff::ZcoefB	/usr/include/opencv/cvaux.h	/^    double ZcoefB;$/;"	m	struct:CvStereoLineCoeff	access:public
CvString	/usr/include/opencv/cxtypes.h	/^CvString;$/;"	t	typeref:struct:CvString
CvString	/usr/include/opencv/cxtypes.h	/^typedef struct CvString$/;"	s
CvString::len	/usr/include/opencv/cxtypes.h	/^    int len;$/;"	m	struct:CvString	access:public
CvString::ptr	/usr/include/opencv/cxtypes.h	/^    char* ptr;$/;"	m	struct:CvString	access:public
CvStringHashNode	/usr/include/opencv/cxtypes.h	/^CvStringHashNode;$/;"	t	typeref:struct:CvStringHashNode
CvStringHashNode	/usr/include/opencv/cxtypes.h	/^typedef struct CvStringHashNode$/;"	s
CvStringHashNode::hashval	/usr/include/opencv/cxtypes.h	/^    unsigned hashval;$/;"	m	struct:CvStringHashNode	access:public
CvStringHashNode::next	/usr/include/opencv/cxtypes.h	/^    struct CvStringHashNode* next;$/;"	m	struct:CvStringHashNode	typeref:struct:CvStringHashNode::CvStringHashNode	access:public
CvStringHashNode::str	/usr/include/opencv/cxtypes.h	/^    CvString str;$/;"	m	struct:CvStringHashNode	access:public
CvSubdiv2D	/usr/include/opencv/cvtypes.h	/^CvSubdiv2D;$/;"	t	typeref:struct:CvSubdiv2D
CvSubdiv2D	/usr/include/opencv/cvtypes.h	/^typedef struct CvSubdiv2D$/;"	s
CvSubdiv2DEdge	/usr/include/opencv/cvtypes.h	/^typedef size_t CvSubdiv2DEdge;$/;"	t
CvSubdiv2DPoint	/usr/include/opencv/cvtypes.h	/^CvSubdiv2DPoint;$/;"	t	typeref:struct:CvSubdiv2DPoint
CvSubdiv2DPoint	/usr/include/opencv/cvtypes.h	/^typedef struct CvSubdiv2DPoint$/;"	s
CvSubdiv2DPointLocation	/usr/include/opencv/cvtypes.h	/^CvSubdiv2DPointLocation;$/;"	t	typeref:enum:CvSubdiv2DPointLocation
CvSubdiv2DPointLocation	/usr/include/opencv/cvtypes.h	/^typedef enum CvSubdiv2DPointLocation$/;"	g
CvTemplMatchMethod	/usr/include/opencv/cvcompat.h	76;"	d
CvTermCriteria	/usr/include/opencv/cxtypes.h	/^CvTermCriteria;$/;"	t	typeref:struct:CvTermCriteria
CvTermCriteria	/usr/include/opencv/cxtypes.h	/^typedef struct CvTermCriteria$/;"	s
CvTermCriteria::epsilon	/usr/include/opencv/cxtypes.h	/^    double epsilon;$/;"	m	struct:CvTermCriteria	access:public
CvTermCriteria::max_iter	/usr/include/opencv/cxtypes.h	/^    int    max_iter;$/;"	m	struct:CvTermCriteria	access:public
CvTermCriteria::type	/usr/include/opencv/cxtypes.h	/^    int    type;  \/* may be combination of$/;"	m	struct:CvTermCriteria	access:public
CvTestSeq	/usr/include/opencv/cvvidsurv.hpp	/^typedef void CvTestSeq;$/;"	t
CvThreshType	/usr/include/opencv/cvcompat.h	65;"	d
CvTrackbarCallback	/usr/include/opencv/highgui.h	/^typedef void (CV_CDECL *CvTrackbarCallback)(int pos);$/;"	t
CvTracksTimePos	/usr/include/opencv/cvvidsurv.hpp	/^struct CvTracksTimePos$/;"	s
CvTracksTimePos::beg1	/usr/include/opencv/cvvidsurv.hpp	/^    int beg1,beg2;$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::beg2	/usr/include/opencv/cvvidsurv.hpp	/^    int beg1,beg2;$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::comLen	/usr/include/opencv/cvvidsurv.hpp	/^    int comLen; \/\/common length for two tracks$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::end1	/usr/include/opencv/cvvidsurv.hpp	/^    int end1,end2;$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::end2	/usr/include/opencv/cvvidsurv.hpp	/^    int end1,end2;$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::len1	/usr/include/opencv/cvvidsurv.hpp	/^    int len1,len2;$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::len2	/usr/include/opencv/cvvidsurv.hpp	/^    int len1,len2;$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::shift1	/usr/include/opencv/cvvidsurv.hpp	/^    int shift1,shift2;$/;"	m	struct:CvTracksTimePos	access:public
CvTracksTimePos::shift2	/usr/include/opencv/cvvidsurv.hpp	/^    int shift1,shift2;$/;"	m	struct:CvTracksTimePos	access:public
CvTreeNodeIterator	/usr/include/opencv/cxcore.h	/^CvTreeNodeIterator;$/;"	t	typeref:struct:CvTreeNodeIterator
CvTreeNodeIterator	/usr/include/opencv/cxcore.h	/^typedef struct CvTreeNodeIterator$/;"	s
CvTreeNodeIterator::level	/usr/include/opencv/cxcore.h	/^    int level;$/;"	m	struct:CvTreeNodeIterator	access:public
CvTreeNodeIterator::max_level	/usr/include/opencv/cxcore.h	/^    int max_level;$/;"	m	struct:CvTreeNodeIterator	access:public
CvTreeNodeIterator::node	/usr/include/opencv/cxcore.h	/^    const void* node;$/;"	m	struct:CvTreeNodeIterator	access:public
CvType	/usr/include/opencv/cxcore.hpp	/^struct CV_EXPORTS CvType$/;"	s
CvType::first	/usr/include/opencv/cxcore.hpp	/^    static CvTypeInfo* first;$/;"	m	struct:CvType	access:public
CvType::info	/usr/include/opencv/cxcore.hpp	/^    CvTypeInfo* info;$/;"	m	struct:CvType	access:public
CvType::last	/usr/include/opencv/cxcore.hpp	/^    static CvTypeInfo* last;$/;"	m	struct:CvType	access:public
CvTypeInfo	/usr/include/opencv/cxtypes.h	/^CvTypeInfo;$/;"	t	typeref:struct:CvTypeInfo
CvTypeInfo	/usr/include/opencv/cxtypes.h	/^typedef struct CvTypeInfo$/;"	s
CvTypeInfo::clone	/usr/include/opencv/cxtypes.h	/^    CvCloneFunc clone;$/;"	m	struct:CvTypeInfo	access:public
CvTypeInfo::flags	/usr/include/opencv/cxtypes.h	/^    int flags;$/;"	m	struct:CvTypeInfo	access:public
CvTypeInfo::header_size	/usr/include/opencv/cxtypes.h	/^    int header_size;$/;"	m	struct:CvTypeInfo	access:public
CvTypeInfo::is_instance	/usr/include/opencv/cxtypes.h	/^    CvIsInstanceFunc is_instance;$/;"	m	struct:CvTypeInfo	access:public
CvTypeInfo::next	/usr/include/opencv/cxtypes.h	/^    struct CvTypeInfo* next;$/;"	m	struct:CvTypeInfo	typeref:struct:CvTypeInfo::CvTypeInfo	access:public
CvTypeInfo::prev	/usr/include/opencv/cxtypes.h	/^    struct CvTypeInfo* prev;$/;"	m	struct:CvTypeInfo	typeref:struct:CvTypeInfo::CvTypeInfo	access:public
CvTypeInfo::read	/usr/include/opencv/cxtypes.h	/^    CvReadFunc read;$/;"	m	struct:CvTypeInfo	access:public
CvTypeInfo::release	/usr/include/opencv/cxtypes.h	/^    CvReleaseFunc release;$/;"	m	struct:CvTypeInfo	access:public
CvTypeInfo::type_name	/usr/include/opencv/cxtypes.h	/^    const char* type_name;$/;"	m	struct:CvTypeInfo	access:public
CvTypeInfo::write	/usr/include/opencv/cxtypes.h	/^    CvWriteFunc write;$/;"	m	struct:CvTypeInfo	access:public
CvUpdateBGStatModel	/usr/include/opencv/cvaux.h	/^typedef int (CV_CDECL * CvUpdateBGStatModel)( IplImage* curr_frame, struct CvBGStatModel* bg_model );$/;"	t
CvVect32f	/usr/include/opencv/cvtypes.h	/^typedef float*   CvVect32f;$/;"	t
CvVect64d	/usr/include/opencv/cvtypes.h	/^typedef double*  CvVect64d;$/;"	t
CvVectors	/usr/include/opencv/ml.h	/^struct CvVectors$/;"	s
CvVectors::__anon17::db	/usr/include/opencv/ml.h	/^        double** db;$/;"	m	union:CvVectors::__anon17	access:public
CvVectors::__anon17::fl	/usr/include/opencv/ml.h	/^        float** fl;$/;"	m	union:CvVectors::__anon17	access:public
CvVectors::__anon17::ptr	/usr/include/opencv/ml.h	/^        uchar** ptr;$/;"	m	union:CvVectors::__anon17	access:public
CvVectors::count	/usr/include/opencv/ml.h	/^    int dims, count;$/;"	m	struct:CvVectors	access:public
CvVectors::data	/usr/include/opencv/ml.h	/^    } data;$/;"	m	struct:CvVectors	typeref:union:CvVectors::__anon17	access:public
CvVectors::dims	/usr/include/opencv/ml.h	/^    int dims, count;$/;"	m	struct:CvVectors	access:public
CvVectors::next	/usr/include/opencv/ml.h	/^    CvVectors* next;$/;"	m	struct:CvVectors	access:public
CvVectors::type	/usr/include/opencv/ml.h	/^    int type;$/;"	m	struct:CvVectors	access:public
CvVideoWriter	/usr/include/opencv/highgui.h	/^typedef struct CvVideoWriter CvVideoWriter;$/;"	t	typeref:struct:CvVideoWriter
CvVoronoiDiagram2D	/usr/include/opencv/cvaux.h	/^typedef struct CvVoronoiDiagram2D$/;"	s
CvVoronoiDiagram2D	/usr/include/opencv/cvaux.h	/^} CvVoronoiDiagram2D;$/;"	t	typeref:struct:CvVoronoiDiagram2D
CvVoronoiEdge2D	/usr/include/opencv/cvaux.h	/^typedef struct CvVoronoiEdge2D$/;"	s
CvVoronoiEdge2D	/usr/include/opencv/cvaux.h	/^} CvVoronoiEdge2D;$/;"	t	typeref:struct:CvVoronoiEdge2D
CvVoronoiNode2D	/usr/include/opencv/cvaux.h	/^typedef struct CvVoronoiNode2D$/;"	s
CvVoronoiNode2D	/usr/include/opencv/cvaux.h	/^} CvVoronoiNode2D;$/;"	t	typeref:struct:CvVoronoiNode2D
CvVoronoiSite2D	/usr/include/opencv/cvaux.h	/^typedef struct CvVoronoiSite2D$/;"	s
CvVoronoiSite2D	/usr/include/opencv/cvaux.h	/^} CvVoronoiSite2D;$/;"	t	typeref:struct:CvVoronoiSite2D
CvVoronoiSite2D::next	/usr/include/opencv/cvaux.h	/^    struct CvVoronoiSite2D *next[2];$/;"	m	struct:CvVoronoiSite2D	typeref:struct:CvVoronoiSite2D::CvVoronoiSite2D	access:public
CvWin32WindowCallback	/usr/include/opencv/highgui.h	/^typedef int (CV_CDECL * CvWin32WindowCallback)(HWND, UINT, WPARAM, LPARAM, int*);$/;"	t
CvWriteFunc	/usr/include/opencv/cxtypes.h	/^typedef void (CV_CDECL *CvWriteFunc)( CvFileStorage* storage, const char* name,$/;"	t
Cv_iplAllocateImageData	/usr/include/opencv/cxcore.h	/^typedef void (CV_STDCALL* Cv_iplAllocateImageData)(IplImage*,int,int);$/;"	t
Cv_iplCloneImage	/usr/include/opencv/cxcore.h	/^typedef IplImage* (CV_STDCALL* Cv_iplCloneImage)(const IplImage*);$/;"	t
Cv_iplCreateImageHeader	/usr/include/opencv/cxcore.h	/^typedef IplImage* (CV_STDCALL* Cv_iplCreateImageHeader)$/;"	t
Cv_iplCreateROI	/usr/include/opencv/cxcore.h	/^typedef IplROI* (CV_STDCALL* Cv_iplCreateROI)(int,int,int,int,int);$/;"	t
Cv_iplDeallocate	/usr/include/opencv/cxcore.h	/^typedef void (CV_STDCALL* Cv_iplDeallocate)(IplImage*,int);$/;"	t
DONE	/usr/include/opencv/cv.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon1
DP	/usr/include/opencv/cvtypes.h	/^    int DP;                     \/* number of state vector dimensions *\/$/;"	m	struct:CvKalman	access:public
DP	/usr/include/opencv/cvtypes.h	/^    int DP;$/;"	m	struct:CvConDensation	access:public
Double	/usr/include/opencv/cvvidsurv.hpp	/^    double              Double;$/;"	m	struct:CvDefParam	access:public
DynamMatr	/usr/include/opencv/cvtypes.h	/^    float* DynamMatr;           \/* =transition_matrix->data.fl *\/$/;"	m	struct:CvKalman	access:public
DynamMatr	/usr/include/opencv/cvtypes.h	/^    float* DynamMatr;       \/* Matrix of the linear Dynamics system  *\/$/;"	m	struct:CvConDensation	access:public
ELLIPSE	/usr/include/opencv/cvvidsurv.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	e	enum:CvDrawShape::__anon9
EXIT	/usr/include/opencv/cxerror.h	185;"	d
FGTrainFrames	/usr/include/opencv/cvvidsurv.hpp	/^    int                     FGTrainFrames; \/* Number of frames needed for FG (foreground) detector to train.        *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
Fbd	/usr/include/opencv/cvaux.h	/^    IplImage*              Fbd;$/;"	m	struct:CvFGDStatModel	access:public
Float	/usr/include/opencv/cvvidsurv.hpp	/^    float               Float;$/;"	m	struct:CvDefParam	access:public
Ftd	/usr/include/opencv/cvaux.h	/^    IplImage*              Ftd;$/;"	m	struct:CvFGDStatModel	access:public
Graph	/usr/include/opencv/cvaux.h	/^CVAPI(int) cvReleaseLinearContorModelStorage(CvGraph** Graph);$/;"	v
HAVE_IPL	/usr/include/opencv/cv.h	47;"	d
HAVE_IPL	/usr/include/opencv/cxcore.h	47;"	d
HAVE_IPL	/usr/include/opencv/cxtypes.h	91;"	d
HG_AUTOSIZE	/usr/include/opencv/highgui.h	341;"	d
HIGHGUI_BACKWARD_COMPATIBILITY	/usr/include/opencv/highgui.h	318;"	d
HistType	/usr/include/opencv/cvvidsurv.hpp	/^    int     HistType; \/* see Prob.h *\/$/;"	m	struct:CvBlobTrackerParamLH	access:public
ID	/usr/include/opencv/cvvidsurv.hpp	/^    int     ID;  \/* blob ID         *\/     $/;"	m	struct:CvBlob	access:public
ID	/usr/include/opencv/cxtypes.h	/^    int  ID;                \/* version (=0)*\/$/;"	m	struct:_IplImage	access:public
IPCVAPI	/usr/include/opencv/cxmisc.h	662;"	d
IPCVAPI_C_EX	/usr/include/opencv/cxmisc.h	672;"	d
IPCVAPI_EX	/usr/include/opencv/cxmisc.h	669;"	d
IPCVAPI_IMPL	/usr/include/opencv/cxmisc.h	676;"	d
IPL_ALIGN_16BYTES	/usr/include/opencv/cxtypes.h	354;"	d
IPL_ALIGN_32BYTES	/usr/include/opencv/cxtypes.h	355;"	d
IPL_ALIGN_4BYTES	/usr/include/opencv/cxtypes.h	352;"	d
IPL_ALIGN_8BYTES	/usr/include/opencv/cxtypes.h	353;"	d
IPL_ALIGN_DWORD	/usr/include/opencv/cxtypes.h	357;"	d
IPL_ALIGN_QWORD	/usr/include/opencv/cxtypes.h	358;"	d
IPL_BORDER_CONSTANT	/usr/include/opencv/cxtypes.h	360;"	d
IPL_BORDER_REFLECT	/usr/include/opencv/cxtypes.h	362;"	d
IPL_BORDER_REFLECT_101	/usr/include/opencv/cxtypes.h	440;"	d
IPL_BORDER_REPLICATE	/usr/include/opencv/cxtypes.h	361;"	d
IPL_BORDER_WRAP	/usr/include/opencv/cxtypes.h	363;"	d
IPL_DATA_ORDER_PIXEL	/usr/include/opencv/cxtypes.h	346;"	d
IPL_DATA_ORDER_PLANE	/usr/include/opencv/cxtypes.h	347;"	d
IPL_DEPTH_16S	/usr/include/opencv/cxtypes.h	343;"	d
IPL_DEPTH_16U	/usr/include/opencv/cxtypes.h	339;"	d
IPL_DEPTH_1U	/usr/include/opencv/cxtypes.h	337;"	d
IPL_DEPTH_32F	/usr/include/opencv/cxtypes.h	340;"	d
IPL_DEPTH_32S	/usr/include/opencv/cxtypes.h	344;"	d
IPL_DEPTH_64F	/usr/include/opencv/cxtypes.h	453;"	d
IPL_DEPTH_8S	/usr/include/opencv/cxtypes.h	342;"	d
IPL_DEPTH_8U	/usr/include/opencv/cxtypes.h	338;"	d
IPL_DEPTH_SIGN	/usr/include/opencv/cxtypes.h	335;"	d
IPL_GAUSSIAN_5x5	/usr/include/opencv/cvcompat.h	93;"	d
IPL_IMAGE_DATA	/usr/include/opencv/cxtypes.h	434;"	d
IPL_IMAGE_HEADER	/usr/include/opencv/cxtypes.h	433;"	d
IPL_IMAGE_MAGIC_VAL	/usr/include/opencv/cxtypes.h	442;"	d
IPL_IMAGE_ROI	/usr/include/opencv/cxtypes.h	435;"	d
IPL_ORIGIN_BL	/usr/include/opencv/cxtypes.h	350;"	d
IPL_ORIGIN_TL	/usr/include/opencv/cxtypes.h	349;"	d
IPPI_CALL	/usr/include/opencv/cxmisc.h	635;"	d
Int	/usr/include/opencv/cvvidsurv.hpp	/^    int                 Int;$/;"	m	struct:CvDefParam	access:public
IplConvKernel	/usr/include/opencv/cxtypes.h	/^IplConvKernel;$/;"	t	typeref:struct:_IplConvKernel
IplConvKernelFP	/usr/include/opencv/cxtypes.h	/^IplConvKernelFP;$/;"	t	typeref:struct:_IplConvKernelFP
IplImage	/usr/include/opencv/cxtypes.h	/^IplImage;$/;"	t	typeref:struct:_IplImage
IplROI	/usr/include/opencv/cxtypes.h	/^IplROI;$/;"	t	typeref:struct:_IplROI
IplTileInfo	/usr/include/opencv/cxtypes.h	/^typedef struct _IplTileInfo IplTileInfo;$/;"	t	typeref:struct:_IplTileInfo
Ithreshold	/usr/include/opencv/cv.h	/^    int Ithreshold;$/;"	m	struct:CvStereoGCState	access:public
J	/usr/include/opencv/cv.hpp	/^    CvMat* J;$/;"	m	struct:CvLevMarq	access:public
JtErr	/usr/include/opencv/cv.hpp	/^    CvMat* JtErr;$/;"	m	struct:CvLevMarq	access:public
JtJ	/usr/include/opencv/cv.hpp	/^    CvMat* JtJ;$/;"	m	struct:CvLevMarq	access:public
JtJN	/usr/include/opencv/cv.hpp	/^    CvMat* JtJN;$/;"	m	struct:CvLevMarq	access:public
JtJV	/usr/include/opencv/cv.hpp	/^    CvMat* JtJV;$/;"	m	struct:CvLevMarq	access:public
JtJW	/usr/include/opencv/cv.hpp	/^    CvMat* JtJW;$/;"	m	struct:CvLevMarq	access:public
K	/usr/include/opencv/cv.h	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState	access:public
KalmGainMatr	/usr/include/opencv/cvtypes.h	/^    float* KalmGainMatr;        \/* =gain->data.fl *\/$/;"	m	struct:CvKalman	access:public
Lc	/usr/include/opencv/cvaux.h	/^    int    Lc;			\/* Quantized levels per 'color' component. Power of two, typically 32, 64 or 128.				*\/$/;"	m	struct:CvFGDStatModelParams	access:public
Lcc	/usr/include/opencv/cvaux.h	/^    int    Lcc;			\/* Quantized levels per 'color co-occurrence' component.  Power of two, typically 16, 32 or 64.			*\/$/;"	m	struct:CvFGDStatModelParams	access:public
LeftEyeRect	/usr/include/opencv/cvaux.h	/^    CvRect LeftEyeRect;$/;"	m	struct:CvFace	access:public
MAX	/usr/include/opencv/cxtypes.h	193;"	d
MIN	/usr/include/opencv/cxtypes.h	189;"	d
MNCovariance	/usr/include/opencv/cvtypes.h	/^    float* MNCovariance;        \/* =measurement_noise_cov->data.fl *\/$/;"	m	struct:CvKalman	access:public
MP	/usr/include/opencv/cvtypes.h	/^    int MP;                     \/* number of measurement vector dimensions *\/$/;"	m	struct:CvKalman	access:public
MP	/usr/include/opencv/cvtypes.h	/^    int MP;$/;"	m	struct:CvConDensation	access:public
MeasurementMatr	/usr/include/opencv/cvtypes.h	/^    float* MeasurementMatr;     \/* =measurement_matrix->data.fl *\/$/;"	m	struct:CvKalman	access:public
MouthRect	/usr/include/opencv/cvaux.h	/^    CvRect MouthRect;$/;"	m	struct:CvFace	access:public
N	/usr/include/opencv/cvaux.h	/^    int N; \/\/graph size$/;"	m	struct:CvCliqueFinder	access:public
N1c	/usr/include/opencv/cvaux.h	/^    int    N1c;			\/* Number of color vectors used to model normal background color variation at a given pixel.			*\/$/;"	m	struct:CvFGDStatModelParams	access:public
N1cc	/usr/include/opencv/cvaux.h	/^    int    N1cc;		\/* Number of color co-occurrence vectors used to model normal background color variation at a given pixel.	*\/$/;"	m	struct:CvFGDStatModelParams	access:public
N2c	/usr/include/opencv/cvaux.h	/^    int    N2c;			\/* Number of color vectors retained at given pixel.  Must be > N1c, typically ~ 5\/3 of N1c.			*\/$/;"	m	struct:CvFGDStatModelParams	access:public
N2cc	/usr/include/opencv/cvaux.h	/^    int    N2cc;		\/* Number of color co-occurrence vectors retained at given pixel.  Must be > N1cc, typically ~ 5\/3 of N1cc.	*\/$/;"	m	struct:CvFGDStatModelParams	access:public
NormalizeRect	/usr/include/opencv/highgui.h	/^CV_INLINE RECT NormalizeRect( RECT r )$/;"	f	signature:( RECT r )
OPENCV_ASSERT	/usr/include/opencv/cxerror.h	113;"	d
OPENCV_CALL	/usr/include/opencv/cxerror.h	119;"	d
OPENCV_ERRCHK	/usr/include/opencv/cxerror.h	109;"	d
OPENCV_ERROR	/usr/include/opencv/cxerror.h	106;"	d
OPENCV_RSTERR	/usr/include/opencv/cxerror.h	117;"	d
PNCovariance	/usr/include/opencv/cvtypes.h	/^    float* PNCovariance;        \/* =process_noise_cov->data.fl *\/$/;"	m	struct:CvKalman	access:public
PROFILE_DOG	/usr/include/opencv/cvvidsurv.hpp	918;"	d
PROFILE_EPANECHNIKOV	/usr/include/opencv/cvvidsurv.hpp	917;"	d
Pbc	/usr/include/opencv/cvaux.h	/^    float                 Pbc;$/;"	m	struct:CvBGPixelStat	access:public
Pbcc	/usr/include/opencv/cvaux.h	/^    float                 Pbcc;$/;"	m	struct:CvBGPixelStat	access:public
PosterErrorCovariance	/usr/include/opencv/cvtypes.h	/^    float* PosterErrorCovariance;\/* =error_cov_post->data.fl *\/$/;"	m	struct:CvKalman	access:public
PosterState	/usr/include/opencv/cvtypes.h	/^    float* PosterState;         \/* =state_pre->data.fl *\/$/;"	m	struct:CvKalman	access:public
PriorErrorCovariance	/usr/include/opencv/cvtypes.h	/^    float* PriorErrorCovariance;\/* =error_cov_pre->data.fl *\/$/;"	m	struct:CvKalman	access:public
PriorState	/usr/include/opencv/cvtypes.h	/^    float* PriorState;          \/* =state_post->data.fl *\/$/;"	m	struct:CvKalman	access:public
Pv	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCCStatTable	access:public
Pv	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCStatTable	access:public
Pvb	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCCStatTable	access:public
Pvb	/usr/include/opencv/cvaux.h	/^    float          Pv, Pvb;$/;"	m	struct:CvBGPixelCStatTable	access:public
RECT	/usr/include/opencv/cvvidsurv.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	e	enum:CvDrawShape::__anon9
RPROP	/usr/include/opencv/ml.h	/^    enum { BACKPROP=0, RPROP=1 };$/;"	e	enum:CvANN_MLP_TrainParams::__anon21
RandS	/usr/include/opencv/cvtypes.h	/^    struct CvRandState* RandS; \/* Array of structures to generate random vectors *\/$/;"	m	struct:CvConDensation	typeref:struct:CvConDensation::CvRandState	access:public
RandomSample	/usr/include/opencv/cvtypes.h	/^    float* RandomSample;    \/* RandomVector to update sample set     *\/$/;"	m	struct:CvConDensation	access:public
RectToCvRect	/usr/include/opencv/highgui.h	/^CV_INLINE CvRect RectToCvRect( RECT sr )$/;"	f	signature:( RECT sr )
RectToROI	/usr/include/opencv/highgui.h	/^CV_INLINE IplROI RectToROI( RECT r )$/;"	f	signature:( RECT r )
RightEyeRect	/usr/include/opencv/cvaux.h	/^    CvRect RightEyeRect;$/;"	m	struct:CvFace	access:public
SADWindowSize	/usr/include/opencv/cv.h	/^    int SADWindowSize; \/\/ ~5x5..21x21$/;"	m	struct:CvStereoBMState	access:public
STARTED	/usr/include/opencv/cv.hpp	/^    enum { DONE=0, STARTED=1, CALC_J=2, CHECK_ERR=3 };$/;"	e	enum:CvLevMarq::__anon1
SVM_C	/usr/include/opencv/ml.h	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon18
SVM_COEF	/usr/include/opencv/ml.h	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon18
SVM_DEGREE	/usr/include/opencv/ml.h	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon18
SVM_GAMMA	/usr/include/opencv/ml.h	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon18
SVM_NU	/usr/include/opencv/ml.h	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon18
SVM_P	/usr/include/opencv/ml.h	/^    enum { SVM_C=0, SVM_GAMMA=1, SVM_P=2, SVM_NU=3, SVM_COEF=4, SVM_DEGREE=5 };$/;"	e	enum:CvParamGrid::__anon18
SamplesNum	/usr/include/opencv/cvtypes.h	/^    int SamplesNum;         \/* Number of the Samples                 *\/$/;"	m	struct:CvConDensation	access:public
ScaleAfter	/usr/include/opencv/cvvidsurv.hpp	/^    int     ScaleAfter;$/;"	m	struct:CvBlobTrackerParamLH	access:public
StartFrame	/usr/include/opencv/cvvidsurv.hpp	/^    int         StartFrame;$/;"	m	struct:CvBlobTrack	access:public
State	/usr/include/opencv/cvtypes.h	/^    float* State;           \/* Vector of State                       *\/$/;"	m	struct:CvConDensation	access:public
Str	/usr/include/opencv/cvvidsurv.hpp	/^    char*               Str;$/;"	m	struct:CvDefParam	access:public
T	/usr/include/opencv/cvaux.h	/^    float  T;			\/* "A percentage value which determines when new features can be recognized as new background." (Typically 0.9).*\/$/;"	m	struct:CvFGDStatModelParams	access:public
Temp	/usr/include/opencv/cvtypes.h	/^    float* Temp;            \/* Temporary vector                      *\/$/;"	m	struct:CvConDensation	access:public
Temp1	/usr/include/opencv/cvtypes.h	/^    float* Temp1;               \/* temp1->data.fl *\/$/;"	m	struct:CvKalman	access:public
Temp2	/usr/include/opencv/cvtypes.h	/^    float* Temp2;               \/* temp2->data.fl *\/$/;"	m	struct:CvKalman	access:public
Tn	/usr/include/opencv/ml.h	/^    int Tn;$/;"	m	struct:CvDTreeNode	access:public
TrackID	/usr/include/opencv/cvvidsurv.hpp	/^    int         TrackID;$/;"	m	struct:CvBlobTrack	access:public
UsePPData	/usr/include/opencv/cvvidsurv.hpp	/^    int                     UsePPData;$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
Xcoef	/usr/include/opencv/cvaux.h	/^    double Xcoef;$/;"	m	struct:CvStereoLineCoeff	access:public
XcoefA	/usr/include/opencv/cvaux.h	/^    double XcoefA;$/;"	m	struct:CvStereoLineCoeff	access:public
XcoefAB	/usr/include/opencv/cvaux.h	/^    double XcoefAB;$/;"	m	struct:CvStereoLineCoeff	access:public
XcoefB	/usr/include/opencv/cvaux.h	/^    double XcoefB;$/;"	m	struct:CvStereoLineCoeff	access:public
Ycoef	/usr/include/opencv/cvaux.h	/^    double Ycoef;$/;"	m	struct:CvStereoLineCoeff	access:public
YcoefA	/usr/include/opencv/cvaux.h	/^    double YcoefA;$/;"	m	struct:CvStereoLineCoeff	access:public
YcoefAB	/usr/include/opencv/cvaux.h	/^    double YcoefAB;$/;"	m	struct:CvStereoLineCoeff	access:public
YcoefB	/usr/include/opencv/cvaux.h	/^    double YcoefB;$/;"	m	struct:CvStereoLineCoeff	access:public
Zcoef	/usr/include/opencv/cvaux.h	/^    double Zcoef;$/;"	m	struct:CvStereoLineCoeff	access:public
ZcoefA	/usr/include/opencv/cvaux.h	/^    double ZcoefA;$/;"	m	struct:CvStereoLineCoeff	access:public
ZcoefAB	/usr/include/opencv/cvaux.h	/^    double ZcoefAB;$/;"	m	struct:CvStereoLineCoeff	access:public
ZcoefB	/usr/include/opencv/cvaux.h	/^    double ZcoefB;$/;"	m	struct:CvStereoLineCoeff	access:public
_CRT_SECURE_NO_DEPRECATE	/usr/include/opencv/cxtypes.h	46;"	d
_CVCOMPAT_H_	/usr/include/opencv/cvcompat.h	51;"	d
_CVHAARTRAINING_H_	/usr/include/opencv/cvhaartraining.h	49;"	d
_CVMAT_HPP_	/usr/include/opencv/cvmat.hpp	43;"	d
_CVTYPES_H_	/usr/include/opencv/cvtypes.h	43;"	d
_CVVERSION_H_	/usr/include/opencv/cvver.h	48;"	d
_CV_HPP_	/usr/include/opencv/cv.hpp	43;"	d
_CV_H_	/usr/include/opencv/cv.h	44;"	d
_CV_WIMAGE_H_	/usr/include/opencv/cvwimage.h	101;"	d
_CXCORE_ERROR_H_	/usr/include/opencv/cxerror.h	43;"	d
_CXCORE_HPP_	/usr/include/opencv/cxcore.hpp	44;"	d
_CXCORE_H_	/usr/include/opencv/cxcore.h	44;"	d
_CXCORE_MISC_H_	/usr/include/opencv/cxmisc.h	48;"	d
_CXCORE_TYPES_H_	/usr/include/opencv/cxtypes.h	43;"	d
_CvPixelPosition32f	/usr/include/opencv/cvcompat.h	/^typedef struct _CvPixelPosition32f$/;"	s
_CvPixelPosition32f::bottomline	/usr/include/opencv/cvcompat.h	/^    float*  bottomline;$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition32f::currline	/usr/include/opencv/cvcompat.h	/^    float*  currline;$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition32f::height	/usr/include/opencv/cvcompat.h	/^    int     height;$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition32f::step	/usr/include/opencv/cvcompat.h	/^    int     step;$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition32f::step_arr	/usr/include/opencv/cvcompat.h	/^    int     step_arr[3];$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition32f::topline	/usr/include/opencv/cvcompat.h	/^    float*  topline;$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition32f::width	/usr/include/opencv/cvcompat.h	/^    int     width;$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition32f::x	/usr/include/opencv/cvcompat.h	/^    int     x;$/;"	m	struct:_CvPixelPosition32f	access:public
_CvPixelPosition8s	/usr/include/opencv/cvcompat.h	/^typedef struct _CvPixelPosition8s$/;"	s
_CvPixelPosition8s::bottomline	/usr/include/opencv/cvcompat.h	/^    schar*  bottomline;$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8s::currline	/usr/include/opencv/cvcompat.h	/^    schar*  currline;$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8s::height	/usr/include/opencv/cvcompat.h	/^    int     height;$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8s::step	/usr/include/opencv/cvcompat.h	/^    int     step;$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8s::step_arr	/usr/include/opencv/cvcompat.h	/^    int     step_arr[3];$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8s::topline	/usr/include/opencv/cvcompat.h	/^    schar*  topline;$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8s::width	/usr/include/opencv/cvcompat.h	/^    int     width;$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8s::x	/usr/include/opencv/cvcompat.h	/^    int     x;$/;"	m	struct:_CvPixelPosition8s	access:public
_CvPixelPosition8u	/usr/include/opencv/cvcompat.h	/^typedef struct _CvPixelPosition8u$/;"	s
_CvPixelPosition8u::bottomline	/usr/include/opencv/cvcompat.h	/^    uchar*  bottomline;    \/* pointer to the start of the first line           *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_CvPixelPosition8u::currline	/usr/include/opencv/cvcompat.h	/^    uchar*  currline;      \/* pointer to the start of the current pixel line   *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_CvPixelPosition8u::height	/usr/include/opencv/cvcompat.h	/^    int     height;                 \/* height of the image  ( in pixels )               *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_CvPixelPosition8u::step	/usr/include/opencv/cvcompat.h	/^    int     step;                   \/* distance between lines ( in elements of single   *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_CvPixelPosition8u::step_arr	/usr/include/opencv/cvcompat.h	/^    int     step_arr[3];            \/* array: ( 0, -step, step ). It is used for        *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_CvPixelPosition8u::topline	/usr/include/opencv/cvcompat.h	/^    uchar*  topline;       \/* pointer to the start of the top pixel line       *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_CvPixelPosition8u::width	/usr/include/opencv/cvcompat.h	/^    int     width;                  \/* width of the image  ( in pixels )                *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_CvPixelPosition8u::x	/usr/include/opencv/cvcompat.h	/^    int     x;                      \/* current x coordinate ( in pixels )               *\/$/;"	m	struct:_CvPixelPosition8u	access:public
_HIGH_GUI_	/usr/include/opencv/highgui.h	43;"	d
_INC_WINDOWS	/usr/include/opencv/cxcore.h	54;"	d
_INC_WINDOWS	/usr/include/opencv/cxcore.h	64;"	d
_IplConvKernel	/usr/include/opencv/cxtypes.h	/^typedef struct _IplConvKernel$/;"	s
_IplConvKernel::anchorX	/usr/include/opencv/cxtypes.h	/^    int  anchorX;$/;"	m	struct:_IplConvKernel	access:public
_IplConvKernel::anchorY	/usr/include/opencv/cxtypes.h	/^    int  anchorY;$/;"	m	struct:_IplConvKernel	access:public
_IplConvKernel::nCols	/usr/include/opencv/cxtypes.h	/^    int  nCols;$/;"	m	struct:_IplConvKernel	access:public
_IplConvKernel::nRows	/usr/include/opencv/cxtypes.h	/^    int  nRows;$/;"	m	struct:_IplConvKernel	access:public
_IplConvKernel::nShiftR	/usr/include/opencv/cxtypes.h	/^    int  nShiftR;$/;"	m	struct:_IplConvKernel	access:public
_IplConvKernel::values	/usr/include/opencv/cxtypes.h	/^    int *values;$/;"	m	struct:_IplConvKernel	access:public
_IplConvKernelFP	/usr/include/opencv/cxtypes.h	/^typedef struct _IplConvKernelFP$/;"	s
_IplConvKernelFP::anchorX	/usr/include/opencv/cxtypes.h	/^    int  anchorX;$/;"	m	struct:_IplConvKernelFP	access:public
_IplConvKernelFP::anchorY	/usr/include/opencv/cxtypes.h	/^    int  anchorY;$/;"	m	struct:_IplConvKernelFP	access:public
_IplConvKernelFP::nCols	/usr/include/opencv/cxtypes.h	/^    int  nCols;$/;"	m	struct:_IplConvKernelFP	access:public
_IplConvKernelFP::nRows	/usr/include/opencv/cxtypes.h	/^    int  nRows;$/;"	m	struct:_IplConvKernelFP	access:public
_IplConvKernelFP::values	/usr/include/opencv/cxtypes.h	/^    float *values;$/;"	m	struct:_IplConvKernelFP	access:public
_IplImage	/usr/include/opencv/cxtypes.h	/^typedef struct _IplImage$/;"	s
_IplImage::BorderConst	/usr/include/opencv/cxtypes.h	/^    int  BorderConst[4];    \/* Ditto.                                 *\/$/;"	m	struct:_IplImage	access:public
_IplImage::BorderMode	/usr/include/opencv/cxtypes.h	/^    int  BorderMode[4];     \/* Ignored by OpenCV.                     *\/$/;"	m	struct:_IplImage	access:public
_IplImage::ID	/usr/include/opencv/cxtypes.h	/^    int  ID;                \/* version (=0)*\/$/;"	m	struct:_IplImage	access:public
_IplImage::align	/usr/include/opencv/cxtypes.h	/^    int  align;             \/* Alignment of image rows (4 or 8).$/;"	m	struct:_IplImage	access:public
_IplImage::alphaChannel	/usr/include/opencv/cxtypes.h	/^    int  alphaChannel;      \/* Ignored by OpenCV *\/$/;"	m	struct:_IplImage	access:public
_IplImage::channelSeq	/usr/include/opencv/cxtypes.h	/^    char channelSeq[4];     \/* ditto *\/$/;"	m	struct:_IplImage	access:public
_IplImage::colorModel	/usr/include/opencv/cxtypes.h	/^    char colorModel[4];     \/* Ignored by OpenCV *\/$/;"	m	struct:_IplImage	access:public
_IplImage::dataOrder	/usr/include/opencv/cxtypes.h	/^    int  dataOrder;         \/* 0 - interleaved color channels, 1 - separate color channels.$/;"	m	struct:_IplImage	access:public
_IplImage::depth	/usr/include/opencv/cxtypes.h	/^    int  depth;             \/* Pixel depth in bits: IPL_DEPTH_8U, IPL_DEPTH_8S, IPL_DEPTH_16S,$/;"	m	struct:_IplImage	access:public
_IplImage::height	/usr/include/opencv/cxtypes.h	/^    int  height;            \/* Image height in pixels.                          *\/$/;"	m	struct:_IplImage	access:public
_IplImage::imageData	/usr/include/opencv/cxtypes.h	/^    char *imageData;        \/* Pointer to aligned image data.         *\/$/;"	m	struct:_IplImage	access:public
_IplImage::imageDataOrigin	/usr/include/opencv/cxtypes.h	/^    char *imageDataOrigin;  \/* Pointer to very origin of image data$/;"	m	struct:_IplImage	access:public
_IplImage::imageId	/usr/include/opencv/cxtypes.h	/^    void  *imageId;                 \/* "           " *\/$/;"	m	struct:_IplImage	access:public
_IplImage::imageSize	/usr/include/opencv/cxtypes.h	/^    int  imageSize;         \/* Image data size in bytes$/;"	m	struct:_IplImage	access:public
_IplImage::maskROI	/usr/include/opencv/cxtypes.h	/^    struct _IplImage *maskROI;      \/* Must be NULL. *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplImage	access:public
_IplImage::nChannels	/usr/include/opencv/cxtypes.h	/^    int  nChannels;         \/* Most of OpenCV functions support 1,2,3 or 4 channels *\/$/;"	m	struct:_IplImage	access:public
_IplImage::nSize	/usr/include/opencv/cxtypes.h	/^    int  nSize;             \/* sizeof(IplImage) *\/$/;"	m	struct:_IplImage	access:public
_IplImage::origin	/usr/include/opencv/cxtypes.h	/^    int  origin;            \/* 0 - top-left origin,$/;"	m	struct:_IplImage	access:public
_IplImage::roi	/usr/include/opencv/cxtypes.h	/^    struct _IplROI *roi;    \/* Image ROI. If NULL, the whole image is selected. *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplROI	access:public
_IplImage::tileInfo	/usr/include/opencv/cxtypes.h	/^    struct _IplTileInfo *tileInfo;  \/* "           " *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplTileInfo	access:public
_IplImage::width	/usr/include/opencv/cxtypes.h	/^    int  width;             \/* Image width in pixels.                           *\/$/;"	m	struct:_IplImage	access:public
_IplImage::widthStep	/usr/include/opencv/cxtypes.h	/^    int  widthStep;         \/* Size of aligned image row in bytes.    *\/$/;"	m	struct:_IplImage	access:public
_IplROI	/usr/include/opencv/cxtypes.h	/^typedef struct _IplROI$/;"	s
_IplROI::coi	/usr/include/opencv/cxtypes.h	/^    int  coi; \/* 0 - no COI (all channels are selected), 1 - 0th channel is selected ...*\/$/;"	m	struct:_IplROI	access:public
_IplROI::height	/usr/include/opencv/cxtypes.h	/^    int  height;$/;"	m	struct:_IplROI	access:public
_IplROI::width	/usr/include/opencv/cxtypes.h	/^    int  width;$/;"	m	struct:_IplROI	access:public
_IplROI::xOffset	/usr/include/opencv/cxtypes.h	/^    int  xOffset;$/;"	m	struct:_IplROI	access:public
_IplROI::yOffset	/usr/include/opencv/cxtypes.h	/^    int  yOffset;$/;"	m	struct:_IplROI	access:public
__BEGIN__	/usr/include/opencv/cxerror.h	182;"	d
__CLEANUP__	/usr/include/opencv/cxerror.h	184;"	d
__CVAUX_HPP__	/usr/include/opencv/cvaux.hpp	43;"	d
__CVAUX__H__	/usr/include/opencv/cvaux.h	43;"	d
__CVVIDEOSURVEILLANCE_H__	/usr/include/opencv/cvvidsurv.hpp	44;"	d
__END__	/usr/include/opencv/cxerror.h	183;"	d
__ML_H__	/usr/include/opencv/ml.h	42;"	d
__anon10::callback	/usr/include/opencv/cvaux.h	/^    CvCallback callback;$/;"	m	union:__anon10	access:public
__anon10::data	/usr/include/opencv/cvaux.h	/^    void* data;$/;"	m	union:__anon10	access:public
__anon12::id	/usr/include/opencv/cvaux.h	/^    int id;$/;"	m	struct:__anon12	access:public
__anon12::p	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f p; \/\/ pgruebele: So we do not loose precision, this needs to be float$/;"	m	struct:__anon12	access:public
__anon13::id	/usr/include/opencv/cvaux.h	/^    int id;$/;"	m	struct:__anon13	access:public
__anon13::p	/usr/include/opencv/cvaux.h	/^    CvPoint3D32f p;             \/\/ location of the tracked object$/;"	m	struct:__anon13	access:public
__anon14::mat	/usr/include/opencv/cvaux.h	/^    float mat[4][4];              \/* maps camera coordinates to world coordinates *\/$/;"	m	struct:__anon14	access:public
__anon14::principal_point	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f principal_point; \/* copied from intrinsics so this structure *\/$/;"	m	struct:__anon14	access:public
__anon14::valid	/usr/include/opencv/cvaux.h	/^    CvBool valid;$/;"	m	struct:__anon14	access:public
__anon15::distortion	/usr/include/opencv/cvaux.h	/^    float distortion[4];$/;"	m	struct:__anon15	access:public
__anon15::focal_length	/usr/include/opencv/cvaux.h	/^    float focal_length[2];$/;"	m	struct:__anon15	access:public
__anon15::principal_point	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f principal_point;$/;"	m	struct:__anon15	access:public
__anon7::height	/usr/include/opencv/cxtypes.h	/^    int height;$/;"	m	struct:__anon7	access:public
__anon7::width	/usr/include/opencv/cxtypes.h	/^    int width;$/;"	m	struct:__anon7	access:public
adj_matr	/usr/include/opencv/cvaux.h	/^    int**    adj_matr;$/;"	m	struct:CvCliqueFinder	access:public
align	/usr/include/opencv/cxtypes.h	/^    int  align;             \/* Alignment of image rows (4 or 8).$/;"	m	struct:_IplImage	access:public
alloca	/usr/include/opencv/cxmisc.h	123;"	d
alloca	/usr/include/opencv/cxmisc.h	124;"	d
alpha	/usr/include/opencv/cvtypes.h	/^    float* alpha;$/;"	m	struct:CvHaarClassifier	access:public
alpha	/usr/include/opencv/ml.h	/^    double alpha;$/;"	m	struct:CvDTreeNode	access:public
alpha	/usr/include/opencv/ml.h	/^    double* alpha;$/;"	m	struct:CvSVMDecisionFunc	access:public
alpha1	/usr/include/opencv/cvaux.h	/^    float  alpha1;		\/* How quickly we forget old background pixel values seen.  Typically set to 0.1  				*\/$/;"	m	struct:CvFGDStatModelParams	access:public
alpha2	/usr/include/opencv/cvaux.h	/^    float  alpha2;		\/* "Controls speed of feature learning". Depends on T. Typical value circa 0.005. 				*\/$/;"	m	struct:CvFGDStatModelParams	access:public
alpha3	/usr/include/opencv/cvaux.h	/^    float  alpha3;		\/* Alternate to alpha2, used (e.g.) for quicker initial convergence. Typical value 0.1.				*\/$/;"	m	struct:CvFGDStatModelParams	access:public
alphaChannel	/usr/include/opencv/cxtypes.h	/^    int  alphaChannel;      \/* Ignored by OpenCV *\/$/;"	m	struct:_IplImage	access:public
anchorX	/usr/include/opencv/cxtypes.h	/^    int  anchorX;$/;"	m	struct:_IplConvKernel	access:public
anchorX	/usr/include/opencv/cxtypes.h	/^    int  anchorX;$/;"	m	struct:_IplConvKernelFP	access:public
anchorY	/usr/include/opencv/cxtypes.h	/^    int  anchorY;$/;"	m	struct:_IplConvKernel	access:public
anchorY	/usr/include/opencv/cxtypes.h	/^    int  anchorY;$/;"	m	struct:_IplConvKernelFP	access:public
angle	/usr/include/opencv/cxtypes.h	/^    float angle;          \/* Angle between the horizontal axis           *\/$/;"	m	struct:CvBox2D	access:public
appearance_profile	/usr/include/opencv/cvvidsurv.hpp	/^    int     appearance_profile;$/;"	m	struct:CvBlobTrackerParamMS	access:public
area	/usr/include/opencv/cvtypes.h	/^    double area;    \/* area of the connected component  *\/$/;"	m	struct:CvConnectedComp	access:public
arr	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvGetElemType( const CvArr* arr );$/;"	v
arr	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvCreateData( CvArr* arr );$/;"	v
arr	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvReleaseData( CvArr* arr );$/;"	v
arr	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvSetZero( CvArr* arr );$/;"	v
array_iterator	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvNextNArraySlice( CvNArrayIterator* array_iterator );$/;"	v
ascii	/usr/include/opencv/cxcore.h	/^    const int*  ascii; \/* font data and metrics *\/$/;"	m	struct:CvFont	access:public
attr	/usr/include/opencv/cxtypes.h	/^    const char** attr;         \/* NULL-terminated array of (attribute_name,attribute_value) pairs. *\/$/;"	m	struct:CvAttrList	access:public
beg1	/usr/include/opencv/cvvidsurv.hpp	/^    int beg1,beg2;$/;"	m	struct:CvTracksTimePos	access:public
beg2	/usr/include/opencv/cvvidsurv.hpp	/^    int beg1,beg2;$/;"	m	struct:CvTracksTimePos	access:public
best_score	/usr/include/opencv/cvaux.h	/^    int best_score;$/;"	m	struct:CvCliqueFinder	access:public
best_weight	/usr/include/opencv/cvaux.h	/^    float best_weight;$/;"	m	struct:CvCliqueFinder	access:public
bg_threshold	/usr/include/opencv/cvaux.h	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams	access:public
bins	/usr/include/opencv/cxtypes.h	/^    CvArr*  bins;$/;"	m	struct:CvHistogram	access:public
block_size	/usr/include/opencv/cxtypes.h	/^    int block_size;               \/* Block size.                              *\/$/;"	m	struct:CvMemStorage	access:public
boost_type	/usr/include/opencv/ml.h	/^    int boost_type;$/;"	m	struct:CvDTreeParams	access:public
border	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f border[2][4];$/;"	m	struct:CvStereoCamera	access:public
bottom	/usr/include/opencv/cxtypes.h	/^    CvMemBlock* bottom;           \/* First allocated block.                   *\/$/;"	m	struct:CvMemStorage	access:public
bottomline	/usr/include/opencv/cvcompat.h	/^    float*  bottomline;$/;"	m	struct:_CvPixelPosition32f	access:public
bottomline	/usr/include/opencv/cvcompat.h	/^    schar*  bottomline;$/;"	m	struct:_CvPixelPosition8s	access:public
bottomline	/usr/include/opencv/cvcompat.h	/^    uchar*  bottomline;    \/* pointer to the start of the first line           *\/$/;"	m	struct:_CvPixelPosition8u	access:public
boxMax	/usr/include/opencv/cvaux.h	/^    uchar boxMax[3];$/;"	m	struct:CvBGCodeBookElem	access:public
boxMin	/usr/include/opencv/cvaux.h	/^    uchar boxMin[3];$/;"	m	struct:CvBGCodeBookElem	access:public
bp_dw_scale	/usr/include/opencv/ml.h	/^    double bp_dw_scale, bp_moment_scale;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
bp_moment_scale	/usr/include/opencv/ml.h	/^    double bp_dw_scale, bp_moment_scale;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
buf	/usr/include/opencv/ml.h	/^    CvMat* buf;$/;"	m	struct:CvDTreeTrainData	access:public
buf_count	/usr/include/opencv/ml.h	/^    int buf_count, buf_size;$/;"	m	struct:CvDTreeTrainData	access:public
buf_idx	/usr/include/opencv/ml.h	/^    int buf_idx;$/;"	m	struct:CvDTreeNode	access:public
buf_size	/usr/include/opencv/ml.h	/^    int buf_count, buf_size;$/;"	m	struct:CvDTreeTrainData	access:public
c	/usr/include/opencv/ml.h	/^            float c;$/;"	m	struct:CvDTreeSplit::__anon19::__anon20	access:public
calc_func	/usr/include/opencv/ml.h	/^    Calc calc_func;$/;"	m	struct:CvSVMKernel	access:public
calc_var_importance	/usr/include/opencv/ml.h	/^    bool calc_var_importance; \/\/ true <=> RF processes variable importance$/;"	m	struct:CvDTreeParams	access:public
callback	/usr/include/opencv/cvaux.h	/^    CvCallback callback;$/;"	m	union:__anon10	access:public
camera	/usr/include/opencv/cvaux.h	/^    CvCamera* camera[2]; \/* two individual camera parameters *\/$/;"	m	struct:CvStereoCamera	access:public
cand_weight	/usr/include/opencv/cvaux.h	/^    float* cand_weight;$/;"	m	struct:CvCliqueFinder	access:public
capture	/usr/include/opencv/highgui.h	/^CVAPI(IplImage*) cvQueryFrame( CvCapture* capture );$/;"	v
capture	/usr/include/opencv/highgui.h	/^CVAPI(IplImage*) cvRetrieveFrame( CvCapture* capture );$/;"	v
capture	/usr/include/opencv/highgui.h	/^CVAPI(int) cvGrabFrame( CvCapture* capture );$/;"	v
capture	/usr/include/opencv/highgui.h	/^CVAPI(void) cvReleaseCapture( CvCapture** capture );$/;"	v
cascade	/usr/include/opencv/cv.h	/^CVAPI(void) cvReleaseHaarClassifierCascade( CvHaarClassifierCascade** cascade );$/;"	v
cat_count	/usr/include/opencv/ml.h	/^    CvMat* cat_count;$/;"	m	struct:CvDTreeTrainData	access:public
cat_map	/usr/include/opencv/ml.h	/^    CvMat* cat_map;$/;"	m	struct:CvDTreeTrainData	access:public
cat_ofs	/usr/include/opencv/ml.h	/^    CvMat* cat_ofs;$/;"	m	struct:CvDTreeTrainData	access:public
cat_var_count	/usr/include/opencv/ml.h	/^    int ord_var_count, cat_var_count;$/;"	m	struct:CvDTreeTrainData	access:public
cbBounds	/usr/include/opencv/cvaux.h	/^    uchar cbBounds[3];$/;"	m	struct:CvBGCodeBookModel	access:public
cbmap	/usr/include/opencv/cvaux.h	/^    CvBGCodeBookElem** cbmap;$/;"	m	struct:CvBGCodeBookModel	access:public
cctable	/usr/include/opencv/cvaux.h	/^    CvBGPixelCCStatTable* cctable;$/;"	m	struct:CvBGPixelStat	access:public
ce	/usr/include/opencv/cvaux.h	/^    int* ce;$/;"	m	struct:CvCliqueFinder	access:public
center	/usr/include/opencv/cxtypes.h	/^    CvPoint2D32f center;  \/* Center of the box.                          *\/$/;"	m	struct:CvBox2D	access:public
chain	/usr/include/opencv/cvaux.h	/^    CvSeq* chain;$/;"	m	struct:CvLCMEdge	access:public
channelSeq	/usr/include/opencv/cxtypes.h	/^    char channelSeq[4];     \/* ditto *\/$/;"	m	struct:_IplImage	access:public
check	/usr/include/opencv/ml.h	113;"	d
child	/usr/include/opencv/cvtypes.h	/^    int child;$/;"	m	struct:CvHaarStageClassifier	access:public
class_idx	/usr/include/opencv/ml.h	/^    int class_idx;$/;"	m	struct:CvDTreeNode	access:public
class_weights	/usr/include/opencv/ml.h	/^    CvMat*      class_weights; \/\/ for CV_SVM_C_SVC$/;"	m	struct:CvSVMParams	access:public
classifier	/usr/include/opencv/cvtypes.h	/^    CvHaarClassifier* classifier;$/;"	m	struct:CvHaarStageClassifier	access:public
clone	/usr/include/opencv/cxtypes.h	/^    CvCloneFunc clone;$/;"	m	struct:CvTypeInfo	access:public
code	/usr/include/opencv/cvtypes.h	/^    char      code;$/;"	m	struct:CvChainPtReader	access:public
coef0	/usr/include/opencv/ml.h	/^    double      coef0;  \/\/ for poly\/sigmoid$/;"	m	struct:CvSVMParams	access:public
coeffs	/usr/include/opencv/cvaux.h	/^    double coeffs[2][3][3];\/* coefficients for transformation *\/$/;"	m	struct:CvStereoCamera	access:public
coi	/usr/include/opencv/cxtypes.h	/^    int  coi; \/* 0 - no COI (all channels are selected), 1 - 0th channel is selected ...*\/$/;"	m	struct:_IplROI	access:public
color	/usr/include/opencv/cvvidsurv.hpp	/^    CvScalar color;$/;"	m	struct:CvDrawShape	access:public
colorModel	/usr/include/opencv/cxtypes.h	/^    char colorModel[4];     \/* Ignored by OpenCV *\/$/;"	m	struct:_IplImage	access:public
cols	/usr/include/opencv/cxtypes.h	/^        int cols;$/;"	m	union:CvMat::__anon4	access:public
cols	/usr/include/opencv/cxtypes.h	/^    int cols;$/;"	m	struct:CvMat	access:public
comLen	/usr/include/opencv/cvvidsurv.hpp	/^    int comLen; \/\/common length for two tracks$/;"	m	struct:CvTracksTimePos	access:public
completeSymmFlag	/usr/include/opencv/cv.hpp	/^    bool completeSymmFlag;$/;"	m	struct:CvLevMarq	access:public
complexity	/usr/include/opencv/ml.h	/^    int complexity;$/;"	m	struct:CvDTreeNode	access:public
condens	/usr/include/opencv/cv.h	/^CVAPI(void)  cvConDensUpdateByTime( CvConDensation* condens);$/;"	v
condens	/usr/include/opencv/cv.h	/^CVAPI(void)  cvReleaseConDensation( CvConDensation** condens );$/;"	v
contour	/usr/include/opencv/cv.h	/^CVAPI(int)  cvCheckContourConvexity( const CvArr* contour );$/;"	v
contour	/usr/include/opencv/cvaux.h	/^    CvContour* contour; $/;"	m	struct:CvLCMNode	access:public
contour	/usr/include/opencv/cvtypes.h	/^    CvSeq* contour; \/* optional component boundary$/;"	m	struct:CvConnectedComp	access:public
control_matrix	/usr/include/opencv/cvtypes.h	/^    CvMat* control_matrix;      \/* control matrix (B)$/;"	m	struct:CvKalman	access:public
count	/usr/include/opencv/cvtypes.h	/^    int  count;$/;"	m	struct:CvHaarClassifierCascade	access:public
count	/usr/include/opencv/cvtypes.h	/^    int  count;$/;"	m	struct:CvHaarStageClassifier	access:public
count	/usr/include/opencv/cvtypes.h	/^    int count;$/;"	m	struct:CvHaarClassifier	access:public
count	/usr/include/opencv/cxcore.h	/^    int count; \/* number of arrays *\/$/;"	m	struct:CvNArrayIterator	access:public
count	/usr/include/opencv/cxtypes.h	/^    int    count;             \/* Number of elements in the block.           *\/$/;"	m	struct:CvSeqBlock	access:public
count	/usr/include/opencv/ml.h	/^    int dims, count;$/;"	m	struct:CvVectors	access:public
countFrames	/usr/include/opencv/cvaux.h	/^    int                        countFrames;$/;"	m	struct:CvGaussBGModel	access:public
counts	/usr/include/opencv/ml.h	/^    CvMat* counts;$/;"	m	struct:CvDTreeTrainData	access:public
cov_mat_type	/usr/include/opencv/ml.h	/^    int cov_mat_type;$/;"	m	struct:CvEMParams	access:public
covs	/usr/include/opencv/ml.h	/^    const CvMat** covs;$/;"	m	struct:CvEMParams	access:public
criteria	/usr/include/opencv/cv.hpp	/^    CvTermCriteria criteria;$/;"	m	struct:CvLevMarq	access:public
ctable	/usr/include/opencv/cvaux.h	/^    CvBGPixelCStatTable*  ctable;$/;"	m	struct:CvBGPixelStat	access:public
cur_weight	/usr/include/opencv/cvaux.h	/^    float* cur_weight;$/;"	m	struct:CvCliqueFinder	access:public
curidx	/usr/include/opencv/cxtypes.h	/^    int curidx;$/;"	m	struct:CvSparseMatIterator	access:public
current_comp	/usr/include/opencv/cvaux.h	/^    int* current_comp;$/;"	m	struct:CvCliqueFinder	access:public
currline	/usr/include/opencv/cvcompat.h	/^    float*  currline;$/;"	m	struct:_CvPixelPosition32f	access:public
currline	/usr/include/opencv/cvcompat.h	/^    schar*  currline;$/;"	m	struct:_CvPixelPosition8s	access:public
currline	/usr/include/opencv/cvcompat.h	/^    uchar*  currline;      \/* pointer to the start of the current pixel line   *\/$/;"	m	struct:_CvPixelPosition8u	access:public
cv16s	/usr/include/opencv/cxmisc.h	/^    cv16u, cv16s, cv16sc,$/;"	e	enum:CvDataType
cv16sc	/usr/include/opencv/cxmisc.h	/^    cv16u, cv16s, cv16sc,$/;"	e	enum:CvDataType
cv16u	/usr/include/opencv/cxmisc.h	/^    cv16u, cv16s, cv16sc,$/;"	e	enum:CvDataType
cv1u	/usr/include/opencv/cxmisc.h	/^    cv1u,$/;"	e	enum:CvDataType
cv32f	/usr/include/opencv/cxmisc.h	/^    cv32f, cv32fc,$/;"	e	enum:CvDataType
cv32fc	/usr/include/opencv/cxmisc.h	/^    cv32f, cv32fc,$/;"	e	enum:CvDataType
cv32s	/usr/include/opencv/cxmisc.h	/^    cv32u, cv32s, cv32sc,$/;"	e	enum:CvDataType
cv32sc	/usr/include/opencv/cxmisc.h	/^    cv32u, cv32s, cv32sc,$/;"	e	enum:CvDataType
cv32u	/usr/include/opencv/cxmisc.h	/^    cv32u, cv32s, cv32sc,$/;"	e	enum:CvDataType
cv3dTracker2dTrackedObject	/usr/include/opencv/cvaux.h	/^CV_INLINE Cv3dTracker2dTrackedObject cv3dTracker2dTrackedObject(int id, CvPoint2D32f p)$/;"	f	signature:(int id, CvPoint2D32f p)
cv3dTrackerLocateObjects	/usr/include/opencv/cvaux.h	/^CVAPI(int)  cv3dTrackerLocateObjects(int num_cameras, int num_objects,$/;"	v
cv3dTrackerTrackedObject	/usr/include/opencv/cvaux.h	/^CV_INLINE Cv3dTrackerTrackedObject cv3dTrackerTrackedObject(int id, CvPoint3D32f p)$/;"	f	signature:(int id, CvPoint3D32f p)
cv64f	/usr/include/opencv/cxmisc.h	/^    cv64f, cv64fc$/;"	e	enum:CvDataType
cv64fc	/usr/include/opencv/cxmisc.h	/^    cv64f, cv64fc$/;"	e	enum:CvDataType
cv64s	/usr/include/opencv/cxmisc.h	/^    cv64u, cv64s, cv64sc,$/;"	e	enum:CvDataType
cv64sc	/usr/include/opencv/cxmisc.h	/^    cv64u, cv64s, cv64sc,$/;"	e	enum:CvDataType
cv64u	/usr/include/opencv/cxmisc.h	/^    cv64u, cv64s, cv64sc,$/;"	e	enum:CvDataType
cv8s	/usr/include/opencv/cxmisc.h	/^    cv8u, cv8s,$/;"	e	enum:CvDataType
cv8u	/usr/include/opencv/cxmisc.h	/^    cv8u, cv8s,$/;"	e	enum:CvDataType
cvAXPY	/usr/include/opencv/cxcore.h	544;"	d
cvAbs	/usr/include/opencv/cxcore.h	622;"	d
cvAccMask	/usr/include/opencv/cvcompat.h	118;"	d
cvAdd	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvAdd( const CvArr* src1, const CvArr* src2, CvArr* dst,$/;"	v
cvAddSearchPath	/usr/include/opencv/highgui.h	328;"	d
cvAlgHintAccurate	/usr/include/opencv/cxmisc.h	/^    cvAlgHintAccurate$/;"	e	enum:CvHintAlgorithm
cvAlgHintFast	/usr/include/opencv/cxmisc.h	/^    cvAlgHintFast,$/;"	e	enum:CvHintAlgorithm
cvAlgHintNone	/usr/include/opencv/cxmisc.h	/^    cvAlgHintNone,$/;"	e	enum:CvHintAlgorithm
cvAlign	/usr/include/opencv/cxmisc.h	/^CV_INLINE int cvAlign( int size, int align )$/;"	f	signature:( int size, int align )
cvAlignPtr	/usr/include/opencv/cxmisc.h	/^CV_INLINE void* cvAlignPtr( const void* ptr, int align=32 )$/;"	f	signature:( const void* ptr, int align=32 )
cvAttrList	/usr/include/opencv/cxtypes.h	/^CV_INLINE CvAttrList cvAttrList( const char** attr CV_DEFAULT(NULL),$/;"	f	signature:( const char** attr CV_DEFAULT(NULL), CvAttrList* next CV_DEFAULT(NULL) )
cvAvgSdv	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvAvgSdv( const CvArr* arr, CvScalar* mean, CvScalar* std_dev,$/;"	v
cvBlob	/usr/include/opencv/cvvidsurv.hpp	/^inline CvBlob cvBlob(float x,float y, float w, float h)$/;"	f	signature:(float x,float y, float w, float h)
cvCalcBackProject	/usr/include/opencv/cv.h	894;"	d
cvCalcBackProjectPatch	/usr/include/opencv/cv.h	902;"	d
cvCalcEMD	/usr/include/opencv/cvcompat.h	/^CV_INLINE  float  cvCalcEMD( const float* signature1, int size1,$/;"	f	signature:( const float* signature1, int size1, const float* signature2, int size2, int dims, int dist_type CV_DEFAULT(CV_DIST_L2), CvDistanceFunction dist_func CV_DEFAULT(0), float* lower_bound CV_DEFAULT(0), void* user_param CV_DEFAULT(0))
cvCalcHist	/usr/include/opencv/cv.h	/^CV_INLINE  void  cvCalcHist( IplImage** image, CvHistogram* hist,$/;"	f	signature:( IplImage** image, CvHistogram* hist, int accumulate CV_DEFAULT(0), const CvArr* mask CV_DEFAULT(NULL) )
cvCalcHistMask	/usr/include/opencv/cvcompat.h	124;"	d
cvCalcOpticalFlowLK	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCalcOpticalFlowLK( const CvArr* prev, const CvArr* curr,$/;"	v
cvCalcSubdivVoronoi2D	/usr/include/opencv/cv.h	/^CVAPI(void)  cvCalcSubdivVoronoi2D( CvSubdiv2D* subdiv );$/;"	v
cvCalibrateCamera	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvCalibrateCamera( int image_count, int* _point_counts,$/;"	f	signature:( int image_count, int* _point_counts, CvSize image_size, CvPoint2D32f* _image_points, CvPoint3D32f* _object_points, float* _distortion_coeffs, float* _camera_matrix, float* _translation_vectors, float* _rotation_matrices, int flags )
cvCalibrateCamera_64d	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvCalibrateCamera_64d( int image_count, int* _point_counts,$/;"	f	signature:( int image_count, int* _point_counts, CvSize image_size, CvPoint2D64f* _image_points, CvPoint3D64f* _object_points, double* _distortion_coeffs, double* _camera_matrix, double* _translation_vectors, double* _rotation_matrices, int flags )
cvCaptureFromAVI	/usr/include/opencv/highgui.h	325;"	d
cvCaptureFromCAM	/usr/include/opencv/highgui.h	324;"	d
cvCaptureFromFile	/usr/include/opencv/highgui.h	323;"	d
cvCeil	/usr/include/opencv/cxtypes.h	/^CV_INLINE  int  cvCeil( double value )$/;"	f	signature:( double value )
cvCheckArray	/usr/include/opencv/cxcore.h	669;"	d
cvCircleAA	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvCircleAA( CvArr* img, CvPoint center, int radius,$/;"	f	signature:( CvArr* img, CvPoint center, int radius, double color, int scale CV_DEFAULT(0) )
cvCloneSeq	/usr/include/opencv/cxcore.h	/^CV_INLINE CvSeq* cvCloneSeq( const CvSeq* seq, CvMemStorage* storage CV_DEFAULT(NULL))$/;"	f	signature:( const CvSeq* seq, CvMemStorage* storage CV_DEFAULT(NULL))
cvCmpEq	/usr/include/opencv/cxmisc.h	/^    cvCmpEq,$/;"	e	enum:CvCmpOp
cvCmpGreater	/usr/include/opencv/cxmisc.h	/^    cvCmpGreater$/;"	e	enum:CvCmpOp
cvCmpGreaterEq	/usr/include/opencv/cxmisc.h	/^    cvCmpGreaterEq,$/;"	e	enum:CvCmpOp
cvCmpLess	/usr/include/opencv/cxmisc.h	/^    cvCmpLess,$/;"	e	enum:CvCmpOp
cvCmpLessEq	/usr/include/opencv/cxmisc.h	/^    cvCmpLessEq,$/;"	e	enum:CvCmpOp
cvContourArea	/usr/include/opencv/cv.h	/^CVAPI(double)  cvContourArea( const CvArr* contour,$/;"	v
cvContourBoundingRect	/usr/include/opencv/cvcompat.h	/^CV_INLINE  CvRect  cvContourBoundingRect( void* point_set, int update CV_DEFAULT(0))$/;"	f	signature:( void* point_set, int update CV_DEFAULT(0))
cvContourConvexHull	/usr/include/opencv/cvcompat.h	394;"	d
cvContourConvexHullApprox	/usr/include/opencv/cvcompat.h	403;"	d
cvContourMoments	/usr/include/opencv/cvcompat.h	344;"	d
cvContourPerimeter	/usr/include/opencv/cv.h	735;"	d
cvConvert	/usr/include/opencv/cxcore.h	480;"	d
cvConvertPointsHomogenious	/usr/include/opencv/cvcompat.h	895;"	d
cvConvexHull	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvConvexHull( CvPoint* points, int num_points,$/;"	f	signature:( CvPoint* points, int num_points, CvRect* CV_UNREFERENCED(bound_rect), int orientation, int* hull, int* hullsize )
cvConvexHullApprox	/usr/include/opencv/cvcompat.h	398;"	d
cvCopy	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvCopy( const CvArr* src, CvArr* dst,$/;"	v
cvCopyImage	/usr/include/opencv/cvcompat.h	378;"	d
cvCountNonZero	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvCountNonZero( const CvArr* arr );$/;"	v
cvCreateAVIWriter	/usr/include/opencv/highgui.h	326;"	d
cvCreateBlobTrackerAuto	/usr/include/opencv/cvvidsurv.hpp	/^inline CvBlobTrackerAuto* cvCreateBlobTrackerAuto(int type, void* param)$/;"	f	signature:(int type, void* param)
cvCreateImageData	/usr/include/opencv/cvcompat.h	97;"	d
cvCreateMatHeader	/usr/include/opencv/cxcore.h	/^CVAPI(CvMat*)  cvCreateMatHeader( int rows, int cols, int type );$/;"	v
cvCreateProb	/usr/include/opencv/cvvidsurv.hpp	/^inline CvProb* cvCreateProb(int type, int dim, CvSize size = cvSize(1,1), void* \/*param*\/ = NULL)$/;"	f	signature:(int type, int dim, CvSize size = cvSize(1,1), void* = NULL)
cvCreateSeq	/usr/include/opencv/cxcore.h	/^CVAPI(CvSeq*)  cvCreateSeq( int seq_flags, int header_size,$/;"	v
cvCreateSubdivDelaunay2D	/usr/include/opencv/cv.h	/^CV_INLINE  CvSubdiv2D* cvCreateSubdivDelaunay2D( CvRect rect, CvMemStorage* storage )$/;"	f	signature:( CvRect rect, CvMemStorage* storage )
cvCvToIplDepth	/usr/include/opencv/cxtypes.h	/^CV_INLINE int cvCvToIplDepth( int type )$/;"	f	signature:( int type )
cvCvtPixToPlane	/usr/include/opencv/cvcompat.h	170;"	d
cvCvtPlaneToPix	/usr/include/opencv/cvcompat.h	171;"	d
cvCvtScale	/usr/include/opencv/cxcore.h	478;"	d
cvCvtScaleAbs	/usr/include/opencv/cxcore.h	491;"	d
cvDecRefData	/usr/include/opencv/cxcore.h	/^CV_INLINE  void  cvDecRefData( CvArr* arr )$/;"	f	signature:( CvArr* arr )
cvDetectedBlob	/usr/include/opencv/cvvidsurv.hpp	/^CV_INLINE CvDetectedBlob cvDetectedBlob( float x, float y, float w, float h, int ID = 0, float response = 0.0F )$/;"	f	signature:( float x, float y, float w, float h, int ID = 0, float response = 0.0F )
cvDrawCircle	/usr/include/opencv/cxcore.h	1338;"	d
cvDrawEllipse	/usr/include/opencv/cxcore.h	1339;"	d
cvDrawLine	/usr/include/opencv/cxcore.h	1337;"	d
cvDrawPolyLine	/usr/include/opencv/cxcore.h	1340;"	d
cvDrawRect	/usr/include/opencv/cxcore.h	1336;"	d
cvEigenVV	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvEigenVV( CvArr* mat, CvArr* evects,$/;"	v
cvEllipse2Poly	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvEllipse2Poly( CvPoint center, CvSize axes,$/;"	v
cvEllipseAA	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvEllipseAA( CvArr* img, CvPoint center, CvSize axes,$/;"	f	signature:( CvArr* img, CvPoint center, CvSize axes, double angle, double start_angle, double end_angle, double color, int scale CV_DEFAULT(0) )
cvEllipseBox	/usr/include/opencv/cxcore.h	/^CV_INLINE  void  cvEllipseBox( CvArr* img, CvBox2D box, CvScalar color,$/;"	f	signature:( CvArr* img, CvBox2D box, CvScalar color, int thickness CV_DEFAULT(1), int line_type CV_DEFAULT(8), int shift CV_DEFAULT(0) )
cvEndScanGraph	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvEndScanGraph( CvGraphScanner* scanner )$/;"	f	signature:( CvGraphScanner* scanner )
cvExtractSURF	/usr/include/opencv/cv.h	/^CVAPI(void) cvExtractSURF( const CvArr* img, const CvArr* mask,$/;"	v
cvFFT	/usr/include/opencv/cxcore.h	907;"	d
cvFillImage	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvFillImage( CvArr* mat, double color )$/;"	f	signature:( CvArr* mat, double color )
cvFindChessBoardCornerGuesses	/usr/include/opencv/cvcompat.h	/^cvFindChessBoardCornerGuesses( const void* arr, void* CV_UNREFERENCED(thresharr),$/;"	f	signature:( const void* arr, void* CV_UNREFERENCED(thresharr), CvMemStorage * CV_UNREFERENCED(storage), CvSize pattern_size, CvPoint2D32f * corners, int *corner_count )
cvFindExtrinsicCameraParams	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvFindExtrinsicCameraParams( int point_count,$/;"	f	signature:( int point_count, CvSize CV_UNREFERENCED(image_size), CvPoint2D32f* _image_points, CvPoint3D32f* _object_points, float* focal_length, CvPoint2D32f principal_point, float* _distortion_coeffs, float* _rotation_vector, float* _translation_vector )
cvFindExtrinsicCameraParams_64d	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvFindExtrinsicCameraParams_64d( int point_count,$/;"	f	signature:( int point_count, CvSize CV_UNREFERENCED(image_size), CvPoint2D64f* _image_points, CvPoint3D64f* _object_points, double* focal_length, CvPoint2D64f principal_point, double* _distortion_coeffs, double* _rotation_vector, double* _translation_vector )
cvFindFundamentalMatrix	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvFindFundamentalMatrix( int* points1, int* points2,$/;"	f	signature:( int* points1, int* points2, int numpoints, int CV_UNREFERENCED(method), float* matrix )
cvFindNextContour	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*)  cvFindNextContour( CvContourScanner scanner );$/;"	v
cvFitEllipse	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void cvFitEllipse( const CvPoint2D32f* points, int count, CvBox2D* box )$/;"	f	signature:( const CvPoint2D32f* points, int count, CvBox2D* box )
cvFitLine2D	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvFitLine2D( CvPoint2D32f* points, int count, int dist,$/;"	f	signature:( CvPoint2D32f* points, int count, int dist, void *param, float reps, float aeps, float* line )
cvFitLine3D	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvFitLine3D( CvPoint3D32f* points, int count, int dist,$/;"	f	signature:( CvPoint3D32f* points, int count, int dist, void *param, float reps, float aeps, float* line )
cvFloor	/usr/include/opencv/cxtypes.h	/^CV_INLINE  int  cvFloor( double value )$/;"	f	signature:( double value )
cvFont	/usr/include/opencv/cxcore.h	/^CV_INLINE CvFont cvFont( double scale, int thickness CV_DEFAULT(1) )$/;"	f	signature:( double scale, int thickness CV_DEFAULT(1) )
cvFree	/usr/include/opencv/cxcore.h	94;"	d
cvFuncName	/usr/include/opencv/cxerror.h	130;"	d
cvGet2D	/usr/include/opencv/cxcore.h	/^CVAPI(CvScalar) cvGet2D( const CvArr* arr, int idx0, int idx1 );$/;"	v
cvGetAt	/usr/include/opencv/cvcompat.h	348;"	d
cvGetCol	/usr/include/opencv/cxcore.h	/^CV_INLINE  CvMat*  cvGetCol( const CvArr* arr, CvMat* submat, int col )$/;"	f	signature:( const CvArr* arr, CvMat* submat, int col )
cvGetGraphVtx	/usr/include/opencv/cxcore.h	1207;"	d
cvGetHistValue_1D	/usr/include/opencv/cvcompat.h	490;"	d
cvGetHistValue_2D	/usr/include/opencv/cvcompat.h	492;"	d
cvGetHistValue_3D	/usr/include/opencv/cvcompat.h	494;"	d
cvGetHistValue_nD	/usr/include/opencv/cvcompat.h	496;"	d
cvGetImageRawData	/usr/include/opencv/cvcompat.h	100;"	d
cvGetMatSize	/usr/include/opencv/cxmisc.h	/^CV_INLINE  CvSize  cvGetMatSize( const CvMat* mat )$/;"	f	signature:( const CvMat* mat )
cvGetND	/usr/include/opencv/cxcore.h	/^CVAPI(CvScalar) cvGetND( const CvArr* arr, const int* idx );$/;"	v
cvGetNextSparseNode	/usr/include/opencv/cxcore.h	/^CV_INLINE CvSparseNode* cvGetNextSparseNode( CvSparseMatIterator* mat_iterator )$/;"	f	signature:( CvSparseMatIterator* mat_iterator )
cvGetPtrAt	/usr/include/opencv/cvcompat.h	347;"	d
cvGetRow	/usr/include/opencv/cxcore.h	/^CV_INLINE  CvMat*  cvGetRow( const CvArr* arr, CvMat* submat, int row )$/;"	f	signature:( const CvArr* arr, CvMat* submat, int row )
cvGetSetElem	/usr/include/opencv/cxcore.h	/^CV_INLINE CvSetElem* cvGetSetElem( const CvSet* set_header, int index )$/;"	f	signature:( const CvSet* set_header, int index )
cvGetSubArr	/usr/include/opencv/cxcore.h	198;"	d
cvGetTickFrequency	/usr/include/opencv/cxcore.h	/^CVAPI(double) cvGetTickFrequency( void );$/;"	v
cvGraphEdgeIdx	/usr/include/opencv/cxcore.h	1213;"	d
cvGraphFindEdge	/usr/include/opencv/cxcore.h	1194;"	d
cvGraphFindEdgeByPtr	/usr/include/opencv/cxcore.h	1195;"	d
cvGraphGetEdgeCount	/usr/include/opencv/cxcore.h	1216;"	d
cvGraphGetVtxCount	/usr/include/opencv/cxcore.h	1215;"	d
cvGraphVtxIdx	/usr/include/opencv/cxcore.h	1210;"	d
cvHoughLines	/usr/include/opencv/cvcompat.h	/^CV_INLINE  int  cvHoughLines( CvArr* image, double rho,$/;"	f	signature:( CvArr* image, double rho, double theta, int threshold, float* lines, int linesNumber )
cvHoughLinesP	/usr/include/opencv/cvcompat.h	/^CV_INLINE  int  cvHoughLinesP( CvArr* image, double rho,$/;"	f	signature:( CvArr* image, double rho, double theta, int threshold, int lineLength, int lineGap, int* lines, int linesNumber )
cvHoughLinesSDiv	/usr/include/opencv/cvcompat.h	/^CV_INLINE  int  cvHoughLinesSDiv( CvArr* image, double rho, int srn,$/;"	f	signature:( CvArr* image, double rho, int srn, double theta, int stn, int threshold, float* lines, int linesNumber )
cvIncRefData	/usr/include/opencv/cxcore.h	/^CV_INLINE  int  cvIncRefData( CvArr* arr )$/;"	f	signature:( CvArr* arr )
cvIntegralImage	/usr/include/opencv/cvcompat.h	107;"	d
cvInv	/usr/include/opencv/cxcore.h	769;"	d
cvInvSqrt	/usr/include/opencv/cxtypes.h	266;"	d
cvIsInf	/usr/include/opencv/cxtypes.h	/^CV_INLINE int cvIsInf( double value )$/;"	f	signature:( double value )
cvIsNaN	/usr/include/opencv/cxtypes.h	/^CV_INLINE int cvIsNaN( double value )$/;"	f	signature:( double value )
cvKMeans	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvKMeans( int num_clusters, float** samples,$/;"	f	signature:( int num_clusters, float** samples, int num_samples, int vec_size, CvTermCriteria termcrit, int* cluster_idx )
cvKalmanUpdateByMeasurement	/usr/include/opencv/cvcompat.h	857;"	d
cvKalmanUpdateByTime	/usr/include/opencv/cvcompat.h	856;"	d
cvLineAA	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvLineAA( CvArr* img, CvPoint pt1, CvPoint pt2,$/;"	f	signature:( CvArr* img, CvPoint pt1, CvPoint pt2, double color, int scale CV_DEFAULT(0))
cvMahalonobis	/usr/include/opencv/cxcore.h	829;"	d
cvMake2DPoints	/usr/include/opencv/cvcompat.h	890;"	d
cvMake3DPoints	/usr/include/opencv/cvcompat.h	891;"	d
cvMat	/usr/include/opencv/cxtypes.h	/^CV_INLINE CvMat cvMat( int rows, int cols, int type, void* data CV_DEFAULT(NULL))$/;"	f	signature:( int rows, int cols, int type, void* data CV_DEFAULT(NULL))
cvMatArray	/usr/include/opencv/cvcompat.h	/^CV_INLINE CvMat cvMatArray( int rows, int cols, int type,$/;"	f	signature:( int rows, int cols, int type, int count, void* data CV_DEFAULT(0))
cvMatMul	/usr/include/opencv/cxcore.h	704;"	d
cvMatMulAdd	/usr/include/opencv/cxcore.h	703;"	d
cvMatMulAddEx	/usr/include/opencv/cxcore.h	714;"	d
cvMatMulAddS	/usr/include/opencv/cxcore.h	721;"	d
cvMatchContours	/usr/include/opencv/cvcompat.h	108;"	d
cvMaxRect	/usr/include/opencv/cv.h	/^CVAPI(CvRect)  cvMaxRect( const CvRect* rect1, const CvRect* rect2 );$/;"	v
cvMean	/usr/include/opencv/cvcompat.h	/^CV_INLINE double cvMean( const CvArr* image, const CvArr* mask CV_DEFAULT(0))$/;"	f	signature:( const CvArr* image, const CvArr* mask CV_DEFAULT(0))
cvMeanMask	/usr/include/opencv/cvcompat.h	351;"	d
cvMean_StdDev	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvMean_StdDev( const CvArr* image, double* mean, double* sdv,$/;"	f	signature:( const CvArr* image, double* mean, double* sdv, const CvArr* mask CV_DEFAULT(0))
cvMean_StdDevMask	/usr/include/opencv/cvcompat.h	352;"	d
cvMinAreaRect	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvMinAreaRect( CvPoint* points, int n,$/;"	f	signature:( CvPoint* points, int n, int CV_UNREFERENCED(left), int CV_UNREFERENCED(bottom), int CV_UNREFERENCED(right), int CV_UNREFERENCED(top), CvPoint2D32f* anchor, CvPoint2D32f* vect1, CvPoint2D32f* vect2 )
cvMinEnclosingCircle	/usr/include/opencv/cv.h	/^CVAPI(int)  cvMinEnclosingCircle( const CvArr* points,$/;"	v
cvMinMaxLocMask	/usr/include/opencv/cvcompat.h	356;"	d
cvMirror	/usr/include/opencv/cxcore.h	744;"	d
cvMultiplyAccMask	/usr/include/opencv/cvcompat.h	120;"	d
cvNormMask	/usr/include/opencv/cvcompat.h	354;"	d
cvNulDevReport	/usr/include/opencv/cxcore.h	/^CVAPI(int) cvNulDevReport( int status, const char* func_name, const char* err_msg,$/;"	v
cvPoint	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvPoint  cvPoint( int x, int y )$/;"	f	signature:( int x, int y )
cvPoint2D32f	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvPoint2D32f  cvPoint2D32f( double x, double y )$/;"	f	signature:( double x, double y )
cvPoint2D64f	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvPoint2D64f  cvPoint2D64f( double x, double y )$/;"	f	signature:( double x, double y )
cvPoint3D32f	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvPoint3D32f  cvPoint3D32f( double x, double y, double z )$/;"	f	signature:( double x, double y, double z )
cvPoint3D64f	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvPoint3D64f  cvPoint3D64f( double x, double y, double z )$/;"	f	signature:( double x, double y, double z )
cvPointFrom32f	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvPoint  cvPointFrom32f( CvPoint2D32f point )$/;"	f	signature:( CvPoint2D32f point )
cvPointTo32f	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvPoint2D32f  cvPointTo32f( CvPoint point )$/;"	f	signature:( CvPoint point )
cvPolyLineAA	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvPolyLineAA( CvArr* img, CvPoint** pts, int* npts, int contours,$/;"	f	signature:( CvArr* img, CvPoint** pts, int* npts, int contours, int is_closed, double color, int scale CV_DEFAULT(0) )
cvProject3D	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvProject3D( CvPoint3D32f* points3D, int count,$/;"	f	signature:( CvPoint3D32f* points3D, int count, CvPoint2D32f* points2D, int xIndx CV_DEFAULT(0), int yIndx CV_DEFAULT(1))
cvProjectPoints	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvProjectPoints( int point_count, CvPoint3D64f* _object_points,$/;"	f	signature:( int point_count, CvPoint3D64f* _object_points, double* _rotation_vector, double* _translation_vector, double* focal_length, CvPoint2D64f principal_point, double* _distortion, CvPoint2D64f* _image_points, double* _deriv_points_rotation_matrix, double* _deriv_points_translation_vect, double* _deriv_points_focal, double* _deriv_points_principal_point, double* _deriv_points_distortion_coeffs )
cvProjectPointsSimple	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvProjectPointsSimple( int point_count, CvPoint3D64f* _object_points,$/;"	f	signature:( int point_count, CvPoint3D64f* _object_points, double* _rotation_matrix, double* _translation_vector, double* _camera_matrix, double* _distortion, CvPoint2D64f* _image_points )
cvPseudoInv	/usr/include/opencv/cvcompat.h	342;"	d
cvPseudoInverse	/usr/include/opencv/cvcompat.h	/^CV_INLINE double cvPseudoInverse( const CvArr* src, CvArr* dst )$/;"	f	signature:( const CvArr* src, CvArr* dst )
cvQueryHistValue_1D	/usr/include/opencv/cvcompat.h	479;"	d
cvQueryHistValue_2D	/usr/include/opencv/cvcompat.h	481;"	d
cvQueryHistValue_3D	/usr/include/opencv/cvcompat.h	483;"	d
cvQueryHistValue_nD	/usr/include/opencv/cvcompat.h	485;"	d
cvROIToRect	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvRect  cvROIToRect( IplROI roi )$/;"	f	signature:( IplROI roi )
cvRand	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvRand( CvRandState* state, CvArr* arr )$/;"	f	signature:( CvRandState* state, CvArr* arr )
cvRandInit	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvRandInit( CvRandState* state, double param1,$/;"	f	signature:( CvRandState* state, double param1, double param2, int seed, int disttype CV_DEFAULT(CV_RAND_UNI))
cvRandInt	/usr/include/opencv/cxtypes.h	/^CV_INLINE unsigned cvRandInt( CvRNG* rng )$/;"	f	signature:( CvRNG* rng )
cvRandNext	/usr/include/opencv/cvcompat.h	246;"	d
cvRandReal	/usr/include/opencv/cxtypes.h	/^CV_INLINE double cvRandReal( CvRNG* rng )$/;"	f	signature:( CvRNG* rng )
cvRandSetRange	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvRandSetRange( CvRandState* state, double param1,$/;"	f	signature:( CvRandState* state, double param1, double param2, int index CV_DEFAULT(-1))
cvReadByName	/usr/include/opencv/cxcore.h	/^CV_INLINE void* cvReadByName( CvFileStorage* fs, const CvFileNode* map,$/;"	f	signature:( CvFileStorage* fs, const CvFileNode* map, const char* name, CvAttrList* attributes CV_DEFAULT(NULL) )
cvReadInt	/usr/include/opencv/cxcore.h	/^CV_INLINE int cvReadInt( const CvFileNode* node, int default_value CV_DEFAULT(0) )$/;"	f	signature:( const CvFileNode* node, int default_value CV_DEFAULT(0) )
cvReadIntByName	/usr/include/opencv/cxcore.h	/^CV_INLINE int cvReadIntByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f	signature:( const CvFileStorage* fs, const CvFileNode* map, const char* name, int default_value CV_DEFAULT(0) )
cvReadReal	/usr/include/opencv/cxcore.h	/^CV_INLINE double cvReadReal( const CvFileNode* node, double default_value CV_DEFAULT(0.) )$/;"	f	signature:( const CvFileNode* node, double default_value CV_DEFAULT(0.) )
cvReadRealByName	/usr/include/opencv/cxcore.h	/^CV_INLINE double cvReadRealByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f	signature:( const CvFileStorage* fs, const CvFileNode* map, const char* name, double default_value CV_DEFAULT(0.) )
cvReadString	/usr/include/opencv/cxcore.h	/^CV_INLINE const char* cvReadString( const CvFileNode* node,$/;"	f	signature:( const CvFileNode* node, const char* default_value CV_DEFAULT(NULL) )
cvReadStringByName	/usr/include/opencv/cxcore.h	/^CV_INLINE const char* cvReadStringByName( const CvFileStorage* fs, const CvFileNode* map,$/;"	f	signature:( const CvFileStorage* fs, const CvFileNode* map, const char* name, const char* default_value CV_DEFAULT(NULL) )
cvReadStructByName	/usr/include/opencv/cvvidsurv.hpp	/^void inline cvReadStructByName(CvFileStorage* fs, CvFileNode* node, const char* name, void* addr, char* desc)$/;"	f	signature:(CvFileStorage* fs, CvFileNode* node, const char* name, void* addr, char* desc)
cvRealScalar	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvScalar  cvRealScalar( double val0 )$/;"	f	signature:( double val0 )
cvRect	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvRect  cvRect( int x, int y, int width, int height )$/;"	f	signature:( int x, int y, int width, int height )
cvRectIntersection	/usr/include/opencv/cvvidsurv.hpp	/^CV_INLINE CvRect cvRectIntersection( const CvRect r1, const CvRect r2 )$/;"	f	signature:( const CvRect r1, const CvRect r2 )
cvRectToROI	/usr/include/opencv/cxtypes.h	/^CV_INLINE  IplROI  cvRectToROI( CvRect rect, int coi )$/;"	f	signature:( CvRect rect, int coi )
cvReleaseBGStatModel	/usr/include/opencv/cvaux.h	/^CV_INLINE void cvReleaseBGStatModel( CvBGStatModel** bg_model )$/;"	f	signature:( CvBGStatModel** bg_model )
cvReleaseBlobDetector	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseBlobDetector(CvBlobDetector** ppBD)$/;"	f	signature:(CvBlobDetector** ppBD)
cvReleaseBlobTrackAnalysis	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseBlobTrackAnalysis(CvBlobTrackAnalysis** pBTPP)$/;"	f	signature:(CvBlobTrackAnalysis** pBTPP)
cvReleaseBlobTrackGen	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseBlobTrackGen(CvBlobTrackGen** pBTGen)$/;"	f	signature:(CvBlobTrackGen** pBTGen)
cvReleaseBlobTrackPostProc	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseBlobTrackPostProc(CvBlobTrackPostProc** pBTPP)$/;"	f	signature:(CvBlobTrackPostProc** pBTPP)
cvReleaseBlobTracker	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseBlobTracker(CvBlobTracker**ppT )$/;"	f	signature:(CvBlobTracker**ppT )
cvReleaseBlobTrackerAuto	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseBlobTrackerAuto(CvBlobTrackerAuto** ppT)$/;"	f	signature:(CvBlobTrackerAuto** ppT)
cvReleaseBlobTrackerOne	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseBlobTrackerOne(CvBlobTrackerOne **ppT )$/;"	f	signature:(CvBlobTrackerOne **ppT )
cvReleaseFGDetector	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseFGDetector(CvFGDetector** ppT )$/;"	f	signature:(CvFGDetector** ppT )
cvReleaseImageData	/usr/include/opencv/cvcompat.h	98;"	d
cvReleaseMatHeader	/usr/include/opencv/cvcompat.h	379;"	d
cvReleaseMatND	/usr/include/opencv/cxcore.h	/^CV_INLINE  void  cvReleaseMatND( CvMatND** mat )$/;"	f	signature:( CvMatND** mat )
cvReleaseProb	/usr/include/opencv/cvvidsurv.hpp	/^inline void cvReleaseProb(CvProb** ppProb){ppProb[0]->Release();ppProb[0]=NULL;}$/;"	f	signature:(CvProb** ppProb)
cvRemoveMemoryManager	/usr/include/opencv/cvcompat.h	359;"	d
cvReshapeND	/usr/include/opencv/cxcore.h	407;"	d
cvRodrigues	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvRodrigues( CvMat* rotation_matrix, CvMat* rotation_vector,$/;"	f	signature:( CvMat* rotation_matrix, CvMat* rotation_vector, CvMat* jacobian, int conv_type )
cvRound	/usr/include/opencv/cxtypes.h	/^CV_INLINE  int  cvRound( double value )$/;"	f	signature:( double value )
cvRunningAvgMask	/usr/include/opencv/cvcompat.h	121;"	d
cvSURFPoint	/usr/include/opencv/cv.h	/^CV_INLINE CvSURFPoint cvSURFPoint( CvPoint2D32f pt, int laplacian,$/;"	f	signature:( CvPoint2D32f pt, int laplacian, int size, float dir CV_DEFAULT(0), float hessian CV_DEFAULT(0))
cvScalar	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvScalar  cvScalar( double val0, double val1 CV_DEFAULT(0),$/;"	f	signature:( double val0, double val1 CV_DEFAULT(0), double val2 CV_DEFAULT(0), double val3 CV_DEFAULT(0))
cvScalarAll	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvScalar  cvScalarAll( double val0123 )$/;"	f	signature:( double val0123 )
cvScale	/usr/include/opencv/cxcore.h	479;"	d
cvSetAt	/usr/include/opencv/cvcompat.h	349;"	d
cvSetHistThresh	/usr/include/opencv/cvcompat.h	123;"	d
cvSetImageData	/usr/include/opencv/cvcompat.h	99;"	d
cvSetNew	/usr/include/opencv/cxcore.h	/^CV_INLINE  CvSetElem* cvSetNew( CvSet* set_header )$/;"	f	signature:( CvSet* set_header )
cvSetRemoveByPtr	/usr/include/opencv/cxcore.h	/^CV_INLINE  void cvSetRemoveByPtr( CvSet* set_header, void* elem )$/;"	f	signature:( CvSet* set_header, void* elem )
cvSize	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvSize  cvSize( int width, int height )$/;"	f	signature:( int width, int height )
cvSize2D32f	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvSize2D32f  cvSize2D32f( double width, double height )$/;"	f	signature:( double width, double height )
cvSlice	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvSlice  cvSlice( int start, int end )$/;"	f	signature:( int start, int end )
cvSqrt	/usr/include/opencv/cxtypes.h	267;"	d
cvSquareAccMask	/usr/include/opencv/cvcompat.h	119;"	d
cvStackAlloc	/usr/include/opencv/cxmisc.h	138;"	d
cvStartScanGraph	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvStartScanGraph( CvGraph* graph, CvGraphScanner* scanner,$/;"	f	signature:( CvGraph* graph, CvGraphScanner* scanner, CvGraphVtx* vtx CV_DEFAULT(NULL), int mask CV_DEFAULT(CV_GRAPH_ALL_ITEMS))
cvSubS	/usr/include/opencv/cxcore.h	/^CV_INLINE  void  cvSubS( const CvArr* src, CvScalar value, CvArr* dst,$/;"	f	signature:( const CvArr* src, CvScalar value, CvArr* dst, const CvArr* mask CV_DEFAULT(NULL))
cvSubdiv2DEdgeDst	/usr/include/opencv/cv.h	/^CV_INLINE  CvSubdiv2DPoint*  cvSubdiv2DEdgeDst( CvSubdiv2DEdge edge )$/;"	f	signature:( CvSubdiv2DEdge edge )
cvSubdiv2DEdgeOrg	/usr/include/opencv/cv.h	/^CV_INLINE  CvSubdiv2DPoint*  cvSubdiv2DEdgeOrg( CvSubdiv2DEdge edge )$/;"	f	signature:( CvSubdiv2DEdge edge )
cvSubdiv2DGetEdge	/usr/include/opencv/cv.h	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DGetEdge( CvSubdiv2DEdge edge, CvNextEdgeType type )$/;"	f	signature:( CvSubdiv2DEdge edge, CvNextEdgeType type )
cvSubdiv2DNextEdge	/usr/include/opencv/cv.h	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DNextEdge( CvSubdiv2DEdge edge )$/;"	f	signature:( CvSubdiv2DEdge edge )
cvSubdiv2DRotateEdge	/usr/include/opencv/cv.h	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DRotateEdge( CvSubdiv2DEdge edge, int rotate )$/;"	f	signature:( CvSubdiv2DEdge edge, int rotate )
cvSubdiv2DSymEdge	/usr/include/opencv/cv.h	/^CV_INLINE  CvSubdiv2DEdge  cvSubdiv2DSymEdge( CvSubdiv2DEdge edge )$/;"	f	signature:( CvSubdiv2DEdge edge )
cvSumPixels	/usr/include/opencv/cvcompat.h	/^CV_INLINE double  cvSumPixels( const CvArr* image )$/;"	f	signature:( const CvArr* image )
cvT	/usr/include/opencv/cxcore.h	734;"	d
cvTermCriteria	/usr/include/opencv/cxtypes.h	/^CV_INLINE  CvTermCriteria  cvTermCriteria( int type, int max_iter, double epsilon )$/;"	f	signature:( int type, int max_iter, double epsilon )
cvTriangleArea	/usr/include/opencv/cv.h	/^CV_INLINE  double  cvTriangleArea( CvPoint2D32f a, CvPoint2D32f b, CvPoint2D32f c )$/;"	f	signature:( CvPoint2D32f a, CvPoint2D32f b, CvPoint2D32f c )
cvUnDistort	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvUnDistort( const CvArr* src, CvArr* dst,$/;"	f	signature:( const CvArr* src, CvArr* dst, const CvArr* undistortion_map, int CV_UNREFERENCED(interpolate) )
cvUnDistortOnce	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvUnDistortOnce( const CvArr* src, CvArr* dst,$/;"	f	signature:( const CvArr* src, CvArr* dst, const float* intrinsic_matrix, const float* distortion_coeffs, int CV_UNREFERENCED(interpolate) )
cvUnsupportedFormat	/usr/include/opencv/cxmisc.h	233;"	d
cvUpdateBGStatModel	/usr/include/opencv/cvaux.h	/^CV_INLINE int cvUpdateBGStatModel( IplImage* current_frame, CvBGStatModel*  bg_model )$/;"	f	signature:( IplImage* current_frame, CvBGStatModel* bg_model )
cvUpdateMHIByTime	/usr/include/opencv/cvcompat.h	116;"	d
cvWarpPerspectiveQMatrix	/usr/include/opencv/cvcompat.h	893;"	d
cvWriteStruct	/usr/include/opencv/cvvidsurv.hpp	/^void inline cvWriteStruct(CvFileStorage* fs, const char* name, void* addr, char* desc, int num=1)$/;"	f	signature:(CvFileStorage* fs, const char* name, void* addr, char* desc, int num=1)
cvWriteToAVI	/usr/include/opencv/highgui.h	327;"	d
cvZero	/usr/include/opencv/cxcore.h	450;"	d
cv_Tn	/usr/include/opencv/ml.h	/^    int* cv_Tn;$/;"	m	struct:CvDTreeNode	access:public
cv_folds	/usr/include/opencv/ml.h	/^    int   cv_folds;$/;"	m	struct:CvDTreeParams	access:public
cv_heap	/usr/include/opencv/ml.h	/^    CvSet* cv_heap;$/;"	m	struct:CvDTreeTrainData	access:public
cv_node_error	/usr/include/opencv/ml.h	/^    double* cv_node_error;$/;"	m	struct:CvDTreeNode	access:public
cv_node_risk	/usr/include/opencv/ml.h	/^    double* cv_node_risk;$/;"	m	struct:CvDTreeNode	access:public
cv_stricmp	/usr/include/opencv/cvvidsurv.hpp	52;"	d
cv_stricmp	/usr/include/opencv/cvvidsurv.hpp	55;"	d
cv_strnicmp	/usr/include/opencv/cvvidsurv.hpp	53;"	d
cv_strnicmp	/usr/include/opencv/cvvidsurv.hpp	56;"	d
cvbCartToPolar	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvbCartToPolar( const float* y, const float* x,$/;"	f	signature:( const float* y, const float* x, float* magnitude, float* angle, int len )
cvbFastArctan	/usr/include/opencv/cvcompat.h	/^CV_INLINE void  cvbFastArctan( const float* y, const float* x,$/;"	f	signature:( const float* y, const float* x, float* angle, int len )
cvbFastExp	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvbFastExp( const float* x, double* y, int len )$/;"	f	signature:( const float* x, double* y, int len )
cvbFastLog	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvbFastLog( const double* x, float* y, int len )$/;"	f	signature:( const double* x, float* y, int len )
cvbInvSqrt	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvbInvSqrt( const float* x, float* y, int len )$/;"	f	signature:( const float* x, float* y, int len )
cvbRand	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvbRand( CvRandState* state, float* dst, int len )$/;"	f	signature:( CvRandState* state, float* dst, int len )
cvbReciprocal	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvbReciprocal( const float* x, float* y, int len )$/;"	f	signature:( const float* x, float* y, int len )
cvbSqrt	/usr/include/opencv/cvcompat.h	/^CV_INLINE  void  cvbSqrt( const float* x, float* y, int len )$/;"	f	signature:( const float* x, float* y, int len )
cvmAdd	/usr/include/opencv/cvcompat.h	363;"	d
cvmAlloc	/usr/include/opencv/cvcompat.h	102;"	d
cvmAllocArray	/usr/include/opencv/cvcompat.h	104;"	d
cvmCopy	/usr/include/opencv/cvcompat.h	365;"	d
cvmCrossProduct	/usr/include/opencv/cvcompat.h	371;"	d
cvmDet	/usr/include/opencv/cvcompat.h	375;"	d
cvmDotProduct	/usr/include/opencv/cvcompat.h	370;"	d
cvmEigenVV	/usr/include/opencv/cvcompat.h	374;"	d
cvmFree	/usr/include/opencv/cvcompat.h	103;"	d
cvmFreeArray	/usr/include/opencv/cvcompat.h	105;"	d
cvmGet	/usr/include/opencv/cxtypes.h	/^CV_INLINE  double  cvmGet( const CvMat* mat, int row, int col )$/;"	f	signature:( const CvMat* mat, int row, int col )
cvmInvert	/usr/include/opencv/cvcompat.h	368;"	d
cvmMahalanobis	/usr/include/opencv/cvcompat.h	369;"	d
cvmMul	/usr/include/opencv/cvcompat.h	366;"	d
cvmMulTransposed	/usr/include/opencv/cvcompat.h	373;"	d
cvmPerspectiveProject	/usr/include/opencv/cvcompat.h	/^CV_INLINE void cvmPerspectiveProject( const CvMat* mat, const CvArr* src, CvArr* dst )$/;"	f	signature:( const CvMat* mat, const CvArr* src, CvArr* dst )
cvmScale	/usr/include/opencv/cvcompat.h	376;"	d
cvmSet	/usr/include/opencv/cxtypes.h	/^CV_INLINE  void  cvmSet( CvMat* mat, int row, int col, double value )$/;"	f	signature:( CvMat* mat, int row, int col, double value )
cvmSetIdentity	/usr/include/opencv/cvcompat.h	362;"	d
cvmSetZero	/usr/include/opencv/cvcompat.h	361;"	d
cvmSub	/usr/include/opencv/cvcompat.h	364;"	d
cvmTrace	/usr/include/opencv/cvcompat.h	372;"	d
cvmTranspose	/usr/include/opencv/cvcompat.h	367;"	d
cvvAddSearchPath	/usr/include/opencv/highgui.h	337;"	d
cvvConvertImage	/usr/include/opencv/highgui.h	340;"	d
cvvCreateTrackbar	/usr/include/opencv/highgui.h	334;"	d
cvvDestroyWindow	/usr/include/opencv/highgui.h	333;"	d
cvvInitSystem	/usr/include/opencv/highgui.h	329;"	d
cvvLoadImage	/usr/include/opencv/highgui.h	335;"	d
cvvNamedWindow	/usr/include/opencv/highgui.h	330;"	d
cvvResizeWindow	/usr/include/opencv/highgui.h	332;"	d
cvvSaveImage	/usr/include/opencv/highgui.h	336;"	d
cvvShowImage	/usr/include/opencv/highgui.h	331;"	d
cvvWaitKey	/usr/include/opencv/highgui.h	338;"	d
cvvWaitKeyEx	/usr/include/opencv/highgui.h	339;"	d
cyrillic	/usr/include/opencv/cxcore.h	/^    const int*  cyrillic;$/;"	m	struct:CvFont	access:public
data	/usr/include/opencv/cvaux.h	/^    void* data;$/;"	m	union:__anon10	access:public
data	/usr/include/opencv/cxtypes.h	/^    schar* data;              \/* Pointer to the first element of the block. *\/$/;"	m	struct:CvSeqBlock	access:public
data	/usr/include/opencv/cxtypes.h	/^    } data;$/;"	m	struct:CvFileNode	typeref:union:CvFileNode::__anon8	access:public
data	/usr/include/opencv/cxtypes.h	/^    } data;$/;"	m	struct:CvMat	typeref:union:CvMat::__anon2	access:public
data	/usr/include/opencv/cxtypes.h	/^    } data;$/;"	m	struct:CvMatND	typeref:union:CvMatND::__anon5	access:public
data	/usr/include/opencv/ml.h	/^    float* data;$/;"	m	struct:CvSVMKernelRow	access:public
data	/usr/include/opencv/ml.h	/^    } data;$/;"	m	struct:CvVectors	typeref:union:CvVectors::__anon17	access:public
dataOrder	/usr/include/opencv/cxtypes.h	/^    int  dataOrder;         \/* 0 - interleaved color channels, 1 - separate color channels.$/;"	m	struct:_IplImage	access:public
data_root	/usr/include/opencv/ml.h	/^    CvDTreeNode* data_root;$/;"	m	struct:CvDTreeTrainData	access:public
db	/usr/include/opencv/cxtypes.h	/^        double* db;$/;"	m	union:CvMat::__anon2	access:public
db	/usr/include/opencv/cxtypes.h	/^        double* db;$/;"	m	union:CvMatND::__anon5	access:public
db	/usr/include/opencv/ml.h	/^        double** db;$/;"	m	union:CvVectors::__anon17	access:public
default_func_addr	/usr/include/opencv/cxtypes.h	/^    void* default_func_addr;$/;"	m	struct:CvPluginFuncInfo	access:public
degree	/usr/include/opencv/ml.h	/^    double      degree; \/\/ for poly$/;"	m	struct:CvSVMParams	access:public
delta	/usr/include/opencv/cvaux.h	/^    float  delta;		\/* Affects color and color co-occurrence quantization, typically set to 2.					*\/$/;"	m	struct:CvFGDStatModelParams	access:public
deltas	/usr/include/opencv/cvtypes.h	/^    schar     deltas[8][2];$/;"	m	struct:CvChainPtReader	access:public
depth	/usr/include/opencv/cvtypes.h	/^    float depth; \/* distance between the farthest point and the convex hull *\/$/;"	m	struct:CvConvexityDefect	access:public
depth	/usr/include/opencv/cxtypes.h	/^    int  depth;             \/* Pixel depth in bits: IPL_DEPTH_8U, IPL_DEPTH_8S, IPL_DEPTH_16S,$/;"	m	struct:_IplImage	access:public
depth	/usr/include/opencv/ml.h	/^    int depth;$/;"	m	struct:CvDTreeNode	access:public
depth_point	/usr/include/opencv/cvtypes.h	/^    CvPoint* depth_point; \/* the farthest from the convex hull point within the defect *\/$/;"	m	struct:CvConvexityDefect	access:public
desc	/usr/include/opencv/cv.h	/^CVAPI(struct CvFeatureTree*) cvCreateFeatureTree(CvMat* desc);$/;"	v
dim	/usr/include/opencv/cxtypes.h	/^    dim[CV_MAX_DIM];$/;"	m	struct:CvMatND	typeref:struct:CvMatND::__anon6	access:public
dims	/usr/include/opencv/cxcore.h	/^    int dims; \/* number of dimensions to iterate *\/$/;"	m	struct:CvNArrayIterator	access:public
dims	/usr/include/opencv/cxtypes.h	/^    int dims;$/;"	m	struct:CvMatND	access:public
dims	/usr/include/opencv/cxtypes.h	/^    int dims;$/;"	m	struct:CvSparseMat	access:public
dims	/usr/include/opencv/ml.h	/^    int dims, count;$/;"	m	struct:CvVectors	access:public
dir	/usr/include/opencv/cv.h	/^    float dir;$/;"	m	struct:CvSURFPoint	access:public
direction	/usr/include/opencv/ml.h	/^    CvMat* direction;$/;"	m	struct:CvDTreeTrainData	access:public
dispLeft	/usr/include/opencv/cv.h	/^    CvMat* dispLeft;$/;"	m	struct:CvStereoGCState	access:public
dispRight	/usr/include/opencv/cv.h	/^    CvMat* dispRight;$/;"	m	struct:CvStereoGCState	access:public
distortion	/usr/include/opencv/cvaux.h	/^    float   distortion[4]; \/* distortion coefficients - two coefficients for radial distortion$/;"	m	struct:CvCamera	access:public
distortion	/usr/include/opencv/cvaux.h	/^    float distortion[4];$/;"	m	struct:__anon15	access:public
disttype	/usr/include/opencv/cvcompat.h	/^    int       disttype; \/* distribution type *\/$/;"	m	struct:CvRandState	access:public
dst	/usr/include/opencv/cxcore.h	/^    CvGraphVtx* dst;       \/* current graph edge destination vertex *\/$/;"	m	struct:CvGraphScanner	access:public
dx	/usr/include/opencv/cxcore.h	/^    float       dx; \/* horizontal interval between letters *\/$/;"	m	struct:CvFont	access:public
edge	/usr/include/opencv/cxcore.h	/^    CvGraphEdge* edge;     \/* current edge *\/$/;"	m	struct:CvGraphScanner	access:public
edgeBuf	/usr/include/opencv/cv.h	/^    CvMat* edgeBuf;$/;"	m	struct:CvStereoGCState	access:public
edge_weights	/usr/include/opencv/cvaux.h	/^    float* edge_weights;$/;"	m	struct:CvCliqueFinder	access:public
egvals	/usr/include/opencv/cvaux.h	/^    float egvals[2];$/;"	m	struct:CvContourOrientation	access:public
egvects	/usr/include/opencv/cvaux.h	/^    float egvects[4];$/;"	m	struct:CvContourOrientation	access:public
ehmm	/usr/include/opencv/cvaux.h	/^        struct CvEHMM* ehmm; \/* pointer to an embedded model or NULL, if it is a leaf *\/$/;"	m	union:CvEHMM::__anon11	typeref:struct:CvEHMM::__anon11::CvEHMM	access:public
element	/usr/include/opencv/cv.h	/^CVAPI(void)  cvReleaseStructuringElement( IplConvKernel** element );$/;"	v
end	/usr/include/opencv/cvtypes.h	/^    CvPoint* end; \/* point of the contour where the defect ends *\/$/;"	m	struct:CvConvexityDefect	access:public
end1	/usr/include/opencv/cvvidsurv.hpp	/^    int end1,end2;$/;"	m	struct:CvTracksTimePos	access:public
end2	/usr/include/opencv/cvvidsurv.hpp	/^    int end1,end2;$/;"	m	struct:CvTracksTimePos	access:public
end_index	/usr/include/opencv/cxtypes.h	/^    int  start_index, end_index;$/;"	m	struct:CvSlice	access:public
epipole	/usr/include/opencv/cvaux.h	/^    CvPoint3D32f epipole[2];$/;"	m	struct:CvStereoCamera	access:public
epsilon	/usr/include/opencv/cxtypes.h	/^    double epsilon;$/;"	m	struct:CvTermCriteria	access:public
err	/usr/include/opencv/cv.hpp	/^    CvMat* err;$/;"	m	struct:CvLevMarq	access:public
err	/usr/include/opencv/cxtypes.h	/^    int  err;$/;"	m	struct:CvLineIterator	access:public
errNorm	/usr/include/opencv/cv.hpp	/^    double prevErrNorm, errNorm;$/;"	m	struct:CvLevMarq	access:public
error_cov_post	/usr/include/opencv/cvtypes.h	/^    CvMat* error_cov_post;      \/* posteriori error estimate covariance matrix (P(k)):$/;"	m	struct:CvKalman	access:public
error_cov_pre	/usr/include/opencv/cvtypes.h	/^    CvMat* error_cov_pre;       \/* priori error estimate covariance matrix (P'(k)):$/;"	m	struct:CvKalman	access:public
extended	/usr/include/opencv/cv.h	/^    int extended;$/;"	m	struct:CvSURFParams	access:public
f	/usr/include/opencv/cxtypes.h	/^        double f; \/* scalar floating-point number *\/$/;"	m	union:CvFileNode::__anon8	access:public
f	/usr/include/opencv/cxtypes.h	/^    double f;$/;"	m	union:Cv64suf	access:public
f	/usr/include/opencv/cxtypes.h	/^    float f;$/;"	m	union:Cv32suf	access:public
first	/usr/include/opencv/cxcore.hpp	/^    static CvModuleInfo* first;$/;"	m	struct:CvModule	access:public
first	/usr/include/opencv/cxcore.hpp	/^    static CvTypeInfo* first;$/;"	m	struct:CvType	access:public
fixp	/usr/include/opencv/cvaux.h	/^    int* fixp; \/\/node with minimal disconnections$/;"	m	struct:CvCliqueFinder	access:public
fl	/usr/include/opencv/cxtypes.h	/^        float* fl;$/;"	m	union:CvMat::__anon2	access:public
fl	/usr/include/opencv/cxtypes.h	/^        float* fl;$/;"	m	union:CvMatND::__anon5	access:public
fl	/usr/include/opencv/ml.h	/^        float** fl;$/;"	m	union:CvVectors::__anon17	access:public
flConfidence	/usr/include/opencv/cvtypes.h	/^    float* flConfidence;    \/* Confidence for each Sample            *\/$/;"	m	struct:CvConDensation	access:public
flCumulative	/usr/include/opencv/cvtypes.h	/^    float* flCumulative;    \/* Cumulative confidence                 *\/$/;"	m	struct:CvConDensation	access:public
flNewSamples	/usr/include/opencv/cvtypes.h	/^    float** flNewSamples;   \/* temporary array of the Sample Vectors *\/$/;"	m	struct:CvConDensation	access:public
flSamples	/usr/include/opencv/cvtypes.h	/^    float** flSamples;      \/* arr of the Sample Vectors             *\/$/;"	m	struct:CvConDensation	access:public
flags	/usr/include/opencv/cvtypes.h	/^    int  flags;$/;"	m	struct:CvHaarClassifierCascade	access:public
flags	/usr/include/opencv/cxtypes.h	/^    int flags;$/;"	m	struct:CvTypeInfo	access:public
fn_2d	/usr/include/opencv/cxmisc.h	/^    void*   fn_2d[33];$/;"	m	struct:CvBtFuncTable	access:public
fn_2d	/usr/include/opencv/cxmisc.h	/^    void*   fn_2d[CV_DEPTH_MAX*CV_CN_MAX];$/;"	m	struct:CvBigFuncTable	access:public
fn_2d	/usr/include/opencv/cxmisc.h	/^    void*   fn_2d[CV_DEPTH_MAX];$/;"	m	struct:CvFuncTable	access:public
focal_length	/usr/include/opencv/cvaux.h	/^    float focal_length[2];$/;"	m	struct:__anon15	access:public
font_face	/usr/include/opencv/cxcore.h	/^    int         font_face; \/* =CV_FONT_* *\/$/;"	m	struct:CvFont	access:public
freeList	/usr/include/opencv/cvaux.h	/^    CvBGCodeBookElem* freeList;$/;"	m	struct:CvBGCodeBookModel	access:public
free_space	/usr/include/opencv/cxtypes.h	/^    int free_space;               \/* Remaining free space in current block.   *\/$/;"	m	struct:CvMemStorage	access:public
free_space	/usr/include/opencv/cxtypes.h	/^    int free_space;$/;"	m	struct:CvMemStoragePos	access:public
fs	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvEndWriteStruct( CvFileStorage* fs );$/;"	v
fs	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvReleaseFileStorage( CvFileStorage** fs );$/;"	v
fs	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvStartNextStream( CvFileStorage* fs );$/;"	v
func_addr	/usr/include/opencv/cxtypes.h	/^    void** func_addr;$/;"	m	struct:CvPluginFuncInfo	access:public
func_names	/usr/include/opencv/cxtypes.h	/^    const char* func_names;$/;"	m	struct:CvPluginFuncInfo	access:public
func_tab	/usr/include/opencv/cxtypes.h	/^    CvPluginFuncInfo* func_tab;$/;"	m	struct:CvModuleInfo	access:public
fundMatr	/usr/include/opencv/cvaux.h	/^    float fundMatr[9]; \/* fundamental matrix *\/$/;"	m	struct:CvStereoCamera	access:public
g_point	/usr/include/opencv/cvaux.h	/^    CvGaussBGPoint*            g_point;    $/;"	m	struct:CvGaussBGModel	access:public
g_values	/usr/include/opencv/cvaux.h	/^    CvGaussBGValues* g_values;$/;"	m	struct:CvGaussBGPoint	access:public
gain	/usr/include/opencv/cvtypes.h	/^    CvMat* gain;                \/* Kalman gain matrix (K(k)):$/;"	m	struct:CvKalman	access:public
gamma	/usr/include/opencv/ml.h	/^    double      gamma;  \/\/ for poly\/rbf\/sigmoid$/;"	m	struct:CvSVMParams	access:public
get_num_valid	/usr/include/opencv/ml.h	/^    int get_num_valid(int vi) { return num_valid ? num_valid[vi] : sample_count; }$/;"	f	struct:CvDTreeNode	access:public	signature:(int vi)
graph	/usr/include/opencv/cvaux.h	/^    CvGraph* graph;$/;"	m	struct:CvCliqueFinder	access:public
graph	/usr/include/opencv/cxcore.h	/^    CvGraph* graph;        \/* the graph *\/$/;"	m	struct:CvGraphScanner	access:public
graph	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvClearGraph( CvGraph* graph );$/;"	v
greek	/usr/include/opencv/cxcore.h	/^    const int*  greek;$/;"	m	struct:CvFont	access:public
h	/usr/include/opencv/cvvidsurv.hpp	/^    float   w,h; \/* blob sizes      *\/$/;"	m	struct:CvBlob	access:public
haar_feature	/usr/include/opencv/cvtypes.h	/^    CvHaarFeature* haar_feature;$/;"	m	struct:CvHaarClassifier	access:public
hashsize	/usr/include/opencv/cxtypes.h	/^    int hashsize;$/;"	m	struct:CvSparseMat	access:public
hashtable	/usr/include/opencv/cxtypes.h	/^    void** hashtable;$/;"	m	struct:CvSparseMat	access:public
hashval	/usr/include/opencv/cxtypes.h	/^    unsigned hashval;$/;"	m	struct:CvSparseNode	access:public
hashval	/usr/include/opencv/cxtypes.h	/^    unsigned hashval;$/;"	m	struct:CvStringHashNode	access:public
have_labels	/usr/include/opencv/ml.h	/^    bool have_labels, have_priors;$/;"	m	struct:CvDTreeTrainData	access:public
have_priors	/usr/include/opencv/ml.h	/^    bool have_labels, have_priors;$/;"	m	struct:CvDTreeTrainData	access:public
hdr	/usr/include/opencv/cxcore.h	/^    CvMatND* hdr[CV_MAX_ARR]; \/* pointers to the headers of the$/;"	m	struct:CvNArrayIterator	access:public
hdr_refcount	/usr/include/opencv/cxtypes.h	/^    int hdr_refcount;$/;"	m	struct:CvMat	access:public
hdr_refcount	/usr/include/opencv/cxtypes.h	/^    int hdr_refcount;$/;"	m	struct:CvMatND	access:public
hdr_refcount	/usr/include/opencv/cxtypes.h	/^    int hdr_refcount;$/;"	m	struct:CvSparseMat	access:public
header_size	/usr/include/opencv/cxtypes.h	/^    int header_size;$/;"	m	struct:CvTypeInfo	access:public
heap	/usr/include/opencv/cxtypes.h	/^    struct CvSet* heap;$/;"	m	struct:CvSparseMat	typeref:struct:CvSparseMat::CvSet	access:public
height	/usr/include/opencv/cvcompat.h	/^    int     height;                 \/* height of the image  ( in pixels )               *\/$/;"	m	struct:_CvPixelPosition8u	access:public
height	/usr/include/opencv/cvcompat.h	/^    int     height;$/;"	m	struct:_CvPixelPosition32f	access:public
height	/usr/include/opencv/cvcompat.h	/^    int     height;$/;"	m	struct:_CvPixelPosition8s	access:public
height	/usr/include/opencv/cxtypes.h	/^        int height;$/;"	m	union:CvMat::__anon3	access:public
height	/usr/include/opencv/cxtypes.h	/^    float height;$/;"	m	struct:CvSize2D32f	access:public
height	/usr/include/opencv/cxtypes.h	/^    int  height;            \/* Image height in pixels.                          *\/$/;"	m	struct:_IplImage	access:public
height	/usr/include/opencv/cxtypes.h	/^    int  height;$/;"	m	struct:_IplROI	access:public
height	/usr/include/opencv/cxtypes.h	/^    int height;$/;"	m	struct:CvRect	access:public
height	/usr/include/opencv/cxtypes.h	/^    int height;$/;"	m	struct:__anon7	access:public
hessian	/usr/include/opencv/cv.h	/^    float hessian;$/;"	m	struct:CvSURFPoint	access:public
hessianThreshold	/usr/include/opencv/cv.h	/^    double hessianThreshold;$/;"	m	struct:CvSURFParams	access:public
hid_cascade	/usr/include/opencv/cvtypes.h	/^    CvHidHaarClassifierCascade* hid_cascade;$/;"	m	struct:CvHaarClassifierCascade	access:public
hist	/usr/include/opencv/cv.h	/^CVAPI(void)  cvClearHist( CvHistogram* hist );$/;"	v
hist	/usr/include/opencv/cv.h	/^CVAPI(void)  cvReleaseHist( CvHistogram** hist );$/;"	v
hmm	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvRelease2DHMM( CvEHMM** hmm );$/;"	v
hscale	/usr/include/opencv/cxcore.h	/^    float       hscale, vscale;$/;"	m	struct:CvFont	access:public
hu1	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
hu2	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
hu3	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
hu4	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
hu5	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
hu6	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
hu7	/usr/include/opencv/cvtypes.h	/^    double hu1, hu2, hu3, hu4, hu5, hu6, hu7; \/* Hu invariants *\/$/;"	m	struct:CvHuMoments	access:public
i	/usr/include/opencv/cxtypes.h	/^        int i;    \/* scalar integer number *\/$/;"	m	union:CvFileNode::__anon8	access:public
i	/usr/include/opencv/cxtypes.h	/^        int* i;$/;"	m	union:CvMat::__anon2	access:public
i	/usr/include/opencv/cxtypes.h	/^        int* i;$/;"	m	union:CvMatND::__anon5	access:public
i	/usr/include/opencv/cxtypes.h	/^    int i;$/;"	m	union:Cv32suf	access:public
i	/usr/include/opencv/cxtypes.h	/^    int64 i;$/;"	m	union:Cv64suf	access:public
i	/usr/include/opencv/ml.h	/^    int i;$/;"	m	struct:CvPair32s32f	access:public
icvSqDist2D32f	/usr/include/opencv/cvaux.h	/^CV_INLINE double icvSqDist2D32f( CvPoint2D32f pt1, CvPoint2D32f pt2 )$/;"	f	signature:( CvPoint2D32f pt1, CvPoint2D32f pt2 )
id	/usr/include/opencv/cvaux.h	/^    int id;$/;"	m	struct:__anon12	access:public
id	/usr/include/opencv/cvaux.h	/^    int id;$/;"	m	struct:__anon13	access:public
idxoffset	/usr/include/opencv/cxtypes.h	/^    int idxoffset;$/;"	m	struct:CvSparseMat	access:public
image	/usr/include/opencv/cxcore.h	/^CVAPI(IplImage*) cvCloneImage( const IplImage* image );$/;"	v
image	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGetImageCOI( const IplImage* image );$/;"	v
image	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvReleaseImage( IplImage** image );$/;"	v
image	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvReleaseImageHeader( IplImage** image );$/;"	v
image	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvResetImageROI( IplImage* image );$/;"	v
imageData	/usr/include/opencv/cxtypes.h	/^    char *imageData;        \/* Pointer to aligned image data.         *\/$/;"	m	struct:_IplImage	access:public
imageDataOrigin	/usr/include/opencv/cxtypes.h	/^    char *imageDataOrigin;  \/* Pointer to very origin of image data$/;"	m	struct:_IplImage	access:public
imageId	/usr/include/opencv/cxtypes.h	/^    void  *imageId;                 \/* "           " *\/$/;"	m	struct:_IplImage	access:public
imageSize	/usr/include/opencv/cxtypes.h	/^    int  imageSize;         \/* Image data size in bytes$/;"	m	struct:_IplImage	access:public
imax	/usr/include/opencv/cvaux.h	/^    int imax, imin;$/;"	m	struct:CvContourOrientation	access:public
img	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvDeleteMoire( IplImage*  img );$/;"	v
imgSize	/usr/include/opencv/cvaux.h	/^    float   imgSize[2]; \/* size of the camera view, used during calibration *\/$/;"	m	struct:CvCamera	access:public
imin	/usr/include/opencv/cvaux.h	/^    int imax, imin;$/;"	m	struct:CvContourOrientation	access:public
index	/usr/include/opencv/cxcore.h	/^    int      index;        \/* the lower bound of certainly visited vertices *\/$/;"	m	struct:CvGraphScanner	access:public
index1	/usr/include/opencv/cvaux.h	/^    int index1;$/;"	m	struct:CvLCMEdge	access:public
index2	/usr/include/opencv/cvaux.h	/^    int index2;$/;"	m	struct:CvLCMEdge	access:public
info	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvRegisterType( const CvTypeInfo* info );$/;"	v
info	/usr/include/opencv/cxcore.hpp	/^    CvModuleInfo* info;$/;"	m	struct:CvModule	access:public
info	/usr/include/opencv/cxcore.hpp	/^    CvTypeInfo* info;$/;"	m	struct:CvType	access:public
info	/usr/include/opencv/cxtypes.h	/^    struct CvTypeInfo* info; \/* type information$/;"	m	struct:CvFileNode	typeref:struct:CvFileNode::CvTypeInfo	access:public
int64	/usr/include/opencv/cxtypes.h	/^typedef __int64 int64;$/;"	t
int64	/usr/include/opencv/cxtypes.h	/^typedef long long int64;$/;"	t
interactionRadius	/usr/include/opencv/cv.h	/^    int interactionRadius;$/;"	m	struct:CvStereoGCState	access:public
inv_sqrt_m00	/usr/include/opencv/cvtypes.h	/^    double  inv_sqrt_m00; \/* m00 != 0 ? 1\/sqrt(m00) : 0 *\/$/;"	m	struct:CvMoments	access:public
inv_var	/usr/include/opencv/cvaux.h	/^    float* inv_var;     \/* square root of inversed variances corresp. to each mixture*\/$/;"	m	struct:CvEHMMState	access:public
inversed	/usr/include/opencv/ml.h	/^    int inversed;$/;"	m	struct:CvDTreeSplit	access:public
iplHeight	/usr/include/opencv/highgui.h	/^CV_INLINE int iplHeight( const IplImage* img )$/;"	f	signature:( const IplImage* img )
iplWidth	/usr/include/opencv/highgui.h	/^CV_INLINE int iplWidth( const IplImage* img )$/;"	f	signature:( const IplImage* img )
is_classifier	/usr/include/opencv/ml.h	/^    bool is_classifier;$/;"	m	struct:CvDTreeTrainData	access:public
is_instance	/usr/include/opencv/cxtypes.h	/^    CvIsInstanceFunc is_instance;$/;"	m	struct:CvTypeInfo	access:public
is_obj_without_holes	/usr/include/opencv/cvaux.h	/^    int    is_obj_without_holes;\/* If TRUE we ignore holes within foreground blobs. Defaults to TRUE.						*\/$/;"	m	struct:CvFGDStatModelParams	access:public
is_trained_dyn_model	/usr/include/opencv/cvaux.h	/^    uchar                 is_trained_dyn_model;$/;"	m	struct:CvBGPixelStat	access:public
is_trained_st_model	/usr/include/opencv/cvaux.h	/^    uchar                 is_trained_st_model;$/;"	m	struct:CvBGPixelStat	access:public
iters	/usr/include/opencv/cv.hpp	/^    int iters;$/;"	m	struct:CvLevMarq	access:public
k	/usr/include/opencv/cvaux.h	/^    int k; \/\/stack size$/;"	m	struct:CvCliqueFinder	access:public
k	/usr/include/opencv/cvcompat.h	/^                                const float* A, const float* k,$/;"	v
kalman	/usr/include/opencv/cv.h	/^CVAPI(void)  cvReleaseKalman( CvKalman** kalman);$/;"	v
kernel_type	/usr/include/opencv/ml.h	/^    int         kernel_type;$/;"	m	struct:CvSVMParams	access:public
lambda	/usr/include/opencv/cv.h	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState	access:public
lambda1	/usr/include/opencv/cv.h	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState	access:public
lambda2	/usr/include/opencv/cv.h	/^    float K, lambda, lambda1, lambda2;$/;"	m	struct:CvStereoGCState	access:public
lambdaLg10	/usr/include/opencv/cv.hpp	/^    int lambdaLg10;$/;"	m	struct:CvLevMarq	access:public
laplacian	/usr/include/opencv/cv.h	/^    int laplacian;$/;"	m	struct:CvSURFPoint	access:public
last	/usr/include/opencv/cxcore.hpp	/^    static CvModuleInfo* last;$/;"	m	struct:CvModule	access:public
last	/usr/include/opencv/cxcore.hpp	/^    static CvTypeInfo* last;$/;"	m	struct:CvType	access:public
learnMax	/usr/include/opencv/cvaux.h	/^    uchar learnMax[3];$/;"	m	struct:CvBGCodeBookElem	access:public
learnMin	/usr/include/opencv/cvaux.h	/^    uchar learnMin[3];$/;"	m	struct:CvBGCodeBookElem	access:public
left	/usr/include/opencv/cv.h	/^    CvMat* left;$/;"	m	struct:CvStereoGCState	access:public
left	/usr/include/opencv/cvtypes.h	/^    int* left;$/;"	m	struct:CvHaarClassifier	access:public
left	/usr/include/opencv/ml.h	/^    CvDTreeNode* left;$/;"	m	struct:CvDTreeNode	access:public
len	/usr/include/opencv/cxtypes.h	/^    int len;$/;"	m	struct:CvString	access:public
len1	/usr/include/opencv/cvvidsurv.hpp	/^    int len1,len2;$/;"	m	struct:CvTracksTimePos	access:public
len2	/usr/include/opencv/cvvidsurv.hpp	/^    int len1,len2;$/;"	m	struct:CvTracksTimePos	access:public
level	/usr/include/opencv/cvaux.h	/^    int level; \/* 0 - lowest(i.e its states are real states), ..... *\/$/;"	m	struct:CvEHMM	access:public
level	/usr/include/opencv/cxcore.h	/^    int level;$/;"	m	struct:CvTreeNodeIterator	access:public
lineCoeffs	/usr/include/opencv/cvaux.h	/^    CvStereoLineCoeff* lineCoeffs;$/;"	m	struct:CvStereoCamera	access:public
line_type	/usr/include/opencv/cxcore.h	/^    int         line_type;$/;"	m	struct:CvFont	access:public
loaded_from	/usr/include/opencv/cxtypes.h	/^    int loaded_from;$/;"	m	struct:CvPluginFuncInfo	access:public
log_var_val	/usr/include/opencv/cvaux.h	/^    float* log_var_val; \/* sum of 0.5 (LN2PI + ln(variance[i]) ) for i=1,n *\/$/;"	m	struct:CvEHMMState	access:public
m	/usr/include/opencv/cvtypes.h	/^    float m[3][3];$/;"	m	struct:CvMatrix3	access:public
m00	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m01	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m02	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m03	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m10	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m11	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m12	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m20	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m21	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
m30	/usr/include/opencv/cvtypes.h	/^    double  m00, m10, m01, m20, m11, m02, m30, m21, m12, m03; \/* spatial moments *\/$/;"	m	struct:CvMoments	access:public
map	/usr/include/opencv/cxtypes.h	/^        CvFileNodeHash* map; \/* map (collection of named file nodes) *\/$/;"	m	union:CvFileNode::__anon8	access:public
mask	/usr/include/opencv/cv.hpp	/^    CvMat* mask;$/;"	m	struct:CvLevMarq	access:public
mask	/usr/include/opencv/cxcore.h	/^    int      mask;         \/* event mask *\/$/;"	m	struct:CvGraphScanner	access:public
maskROI	/usr/include/opencv/cxtypes.h	/^    struct _IplImage *maskROI;      \/* Must be NULL. *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplImage	access:public
mat	/usr/include/opencv/cvaux.h	/^    float mat[4][4];              \/* maps camera coordinates to world coordinates *\/$/;"	m	struct:__anon14	access:public
mat	/usr/include/opencv/cxcore.h	/^CVAPI(CvMat*) cvCloneMat( const CvMat* mat );$/;"	v
mat	/usr/include/opencv/cxcore.h	/^CVAPI(CvMatND*) cvCloneMatND( const CvMatND* mat );$/;"	v
mat	/usr/include/opencv/cxcore.h	/^CVAPI(CvSparseMat*) cvCloneSparseMat( const CvSparseMat* mat );$/;"	v
mat	/usr/include/opencv/cxcore.h	/^CVAPI(double) cvDet( const CvArr* mat );$/;"	v
mat	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvReleaseMat( CvMat** mat );$/;"	v
mat	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvReleaseSparseMat( CvSparseMat** mat );$/;"	v
mat	/usr/include/opencv/cxtypes.h	/^    CvMatND mat;                    \/* Embedded matrix header for array histograms. *\/$/;"	m	struct:CvHistogram	access:public
mat	/usr/include/opencv/cxtypes.h	/^    CvSparseMat* mat;$/;"	m	struct:CvSparseMatIterator	access:public
match_sum	/usr/include/opencv/cvaux.h	/^    int         match_sum;$/;"	m	struct:CvGaussBGValues	access:public
matrix	/usr/include/opencv/cvaux.h	/^    float   matrix[9]; \/* intinsic camera parameters:  [ fx 0 cx; 0 fy cy; 0 0 1 ] *\/$/;"	m	struct:CvCamera	access:public
max	/usr/include/opencv/cvaux.h	/^    float max, min; \/\/ minimum and maximum projections$/;"	m	struct:CvContourOrientation	access:public
maxIters	/usr/include/opencv/cv.h	/^    int maxIters;$/;"	m	struct:CvStereoGCState	access:public
max_c_count	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
max_categories	/usr/include/opencv/ml.h	/^    int   max_categories;$/;"	m	struct:CvDTreeParams	access:public
max_depth	/usr/include/opencv/ml.h	/^    int   max_depth;$/;"	m	struct:CvDTreeParams	access:public
max_iter	/usr/include/opencv/cxtypes.h	/^    int    max_iter;$/;"	m	struct:CvTermCriteria	access:public
max_level	/usr/include/opencv/cxcore.h	/^    int max_level;$/;"	m	struct:CvTreeNodeIterator	access:public
max_val	/usr/include/opencv/ml.h	/^    double max_val;$/;"	m	struct:CvParamGrid	access:public
maxlr	/usr/include/opencv/ml.h	/^    double maxlr;$/;"	m	struct:CvDTreeNode	access:public
mean	/usr/include/opencv/cvaux.h	/^    double      mean[CV_BGFG_MOG_NCOLORS];$/;"	m	struct:CvGaussBGValues	access:public
means	/usr/include/opencv/ml.h	/^    const CvMat* means;$/;"	m	struct:CvEMParams	access:public
meanshift_profile	/usr/include/opencv/cvvidsurv.hpp	/^    int     meanshift_profile;$/;"	m	struct:CvBlobTrackerParamMS	access:public
measurement_matrix	/usr/include/opencv/cvtypes.h	/^    CvMat* measurement_matrix;  \/* measurement matrix (H) *\/$/;"	m	struct:CvKalman	access:public
measurement_noise_cov	/usr/include/opencv/cvtypes.h	/^    CvMat* measurement_noise_cov; \/* measurement noise covariance matrix (R) *\/$/;"	m	struct:CvKalman	access:public
min	/usr/include/opencv/cvaux.h	/^    float max, min; \/\/ minimum and maximum projections$/;"	m	struct:CvContourOrientation	access:public
minArea	/usr/include/opencv/cvaux.h	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams	access:public
minArea	/usr/include/opencv/cvaux.h	/^    float  minArea;		\/* Discard foreground blobs whose bounding box is smaller than this threshold.					*\/$/;"	m	struct:CvFGDStatModelParams	access:public
minDisparity	/usr/include/opencv/cv.h	/^    int minDisparity;  \/\/ minimum disparity (can be negative) $/;"	m	struct:CvStereoBMState	access:public
minDisparity	/usr/include/opencv/cv.h	/^    int minDisparity;$/;"	m	struct:CvStereoGCState	access:public
min_sample_count	/usr/include/opencv/ml.h	/^    int   min_sample_count;$/;"	m	struct:CvDTreeParams	access:public
min_val	/usr/include/opencv/ml.h	/^    double min_val;$/;"	m	struct:CvParamGrid	access:public
minus_delta	/usr/include/opencv/cxtypes.h	/^    int  minus_delta;$/;"	m	struct:CvLineIterator	access:public
minus_step	/usr/include/opencv/cxtypes.h	/^    int  minus_step;$/;"	m	struct:CvLineIterator	access:public
mix	/usr/include/opencv/cvaux.h	/^    int* mix;  \/* number of mixture to which observation belong *\/$/;"	m	struct:CvImgObsInfo	access:public
modMax	/usr/include/opencv/cvaux.h	/^    uchar modMax[3];$/;"	m	struct:CvBGCodeBookModel	access:public
modMin	/usr/include/opencv/cvaux.h	/^    uchar modMin[3];$/;"	m	struct:CvBGCodeBookModel	access:public
model	/usr/include/opencv/cvaux.h	/^CVAPI(void) cvReleaseBGCodeBookModel( CvBGCodeBookModel** model );$/;"	v
module_info	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvRegisterModule( const CvModuleInfo* module_info );$/;"	v
mu	/usr/include/opencv/cvaux.h	/^    float* mu;          \/*mean vectors corresponding to each mixture*\/$/;"	m	struct:CvEHMMState	access:public
mu02	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
mu03	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
mu11	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
mu12	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
mu20	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
mu21	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
mu30	/usr/include/opencv/cvtypes.h	/^    double  mu20, mu11, mu02, mu30, mu21, mu12, mu03; \/* central moments *\/$/;"	m	struct:CvMoments	access:public
nChannels	/usr/include/opencv/cxtypes.h	/^    int  nChannels;         \/* Most of OpenCV functions support 1,2,3 or 4 channels *\/$/;"	m	struct:_IplImage	access:public
nCols	/usr/include/opencv/cxtypes.h	/^    int  nCols;$/;"	m	struct:_IplConvKernel	access:public
nCols	/usr/include/opencv/cxtypes.h	/^    int  nCols;$/;"	m	struct:_IplConvKernelFP	access:public
nOctaveLayers	/usr/include/opencv/cv.h	/^    int nOctaveLayers;$/;"	m	struct:CvSURFParams	access:public
nOctaves	/usr/include/opencv/cv.h	/^    int nOctaves;$/;"	m	struct:CvSURFParams	access:public
nRows	/usr/include/opencv/cxtypes.h	/^    int  nRows;$/;"	m	struct:_IplConvKernel	access:public
nRows	/usr/include/opencv/cxtypes.h	/^    int  nRows;$/;"	m	struct:_IplConvKernelFP	access:public
nShiftR	/usr/include/opencv/cxtypes.h	/^    int  nShiftR;$/;"	m	struct:_IplConvKernel	access:public
nSize	/usr/include/opencv/cxtypes.h	/^    int  nSize;             \/* sizeof(IplImage) *\/$/;"	m	struct:_IplImage	access:public
n_gauss	/usr/include/opencv/cvaux.h	/^    int     n_gauss;$/;"	m	struct:CvGaussBGStatModelParams	access:public
nactive_vars	/usr/include/opencv/ml.h	/^    int nactive_vars;$/;"	m	struct:CvDTreeParams	access:public
name	/usr/include/opencv/cxtypes.h	/^    const char* name;$/;"	m	struct:CvModuleInfo	access:public
nclusters	/usr/include/opencv/ml.h	/^    int nclusters;$/;"	m	struct:CvEMParams	access:public
ne	/usr/include/opencv/cvaux.h	/^    int* ne;$/;"	m	struct:CvCliqueFinder	access:public
needSwapCameras	/usr/include/opencv/cvaux.h	/^    int needSwapCameras;\/* flag set to 1 if need to swap cameras for good reconstruction *\/$/;"	m	struct:CvStereoCamera	access:public
neighbors	/usr/include/opencv/cvtypes.h	/^    int neighbors;$/;"	m	struct:CvAvgComp	access:public
next	/usr/include/opencv/cvaux.h	/^    struct CvBGCodeBookElem* next;$/;"	m	struct:CvBGCodeBookElem	typeref:struct:CvBGCodeBookElem::CvBGCodeBookElem	access:public
next	/usr/include/opencv/cvaux.h	/^    struct CvVoronoiSite2D *next[2];$/;"	m	struct:CvVoronoiSite2D	typeref:struct:CvVoronoiSite2D::CvVoronoiSite2D	access:public
next	/usr/include/opencv/cvtypes.h	/^    int next;$/;"	m	struct:CvHaarStageClassifier	access:public
next	/usr/include/opencv/cvvidsurv.hpp	/^    struct CvDefParam*    next;$/;"	m	struct:CvDefParam	typeref:struct:CvDefParam::CvDefParam	access:public
next	/usr/include/opencv/cxtypes.h	/^    struct CvAttrList* next;   \/* Pointer to next chunk of the attributes list.                    *\/$/;"	m	struct:CvAttrList	typeref:struct:CvAttrList::CvAttrList	access:public
next	/usr/include/opencv/cxtypes.h	/^    struct CvMemBlock*  next;$/;"	m	struct:CvMemBlock	typeref:struct:CvMemBlock::CvMemBlock	access:public
next	/usr/include/opencv/cxtypes.h	/^    struct CvModuleInfo* next;$/;"	m	struct:CvModuleInfo	typeref:struct:CvModuleInfo::CvModuleInfo	access:public
next	/usr/include/opencv/cxtypes.h	/^    struct CvSeqBlock*  next; \/* Next sequence block.                       *\/$/;"	m	struct:CvSeqBlock	typeref:struct:CvSeqBlock::CvSeqBlock	access:public
next	/usr/include/opencv/cxtypes.h	/^    struct CvSparseNode* next;$/;"	m	struct:CvSparseNode	typeref:struct:CvSparseNode::CvSparseNode	access:public
next	/usr/include/opencv/cxtypes.h	/^    struct CvStringHashNode* next;$/;"	m	struct:CvStringHashNode	typeref:struct:CvStringHashNode::CvStringHashNode	access:public
next	/usr/include/opencv/cxtypes.h	/^    struct CvTypeInfo* next;$/;"	m	struct:CvTypeInfo	typeref:struct:CvTypeInfo::CvTypeInfo	access:public
next	/usr/include/opencv/ml.h	/^    CvDTreeSplit* next;$/;"	m	struct:CvDTreeSplit	access:public
next	/usr/include/opencv/ml.h	/^    CvSVMKernelRow* next;$/;"	m	struct:CvSVMKernelRow	access:public
next	/usr/include/opencv/ml.h	/^    CvVectors* next;$/;"	m	struct:CvVectors	access:public
noOfSigBits	/usr/include/opencv/cvvidsurv.hpp	/^    int     noOfSigBits;$/;"	m	struct:CvBlobTrackerParamMS	access:public
nod	/usr/include/opencv/cvaux.h	/^    int* nod;$/;"	m	struct:CvCliqueFinder	access:public
node	/usr/include/opencv/cxcore.h	/^    const void* node;$/;"	m	struct:CvTreeNodeIterator	access:public
node	/usr/include/opencv/cxcore.h	/^CVAPI(const char*) cvGetFileNodeName( const CvFileNode* node );$/;"	v
node	/usr/include/opencv/cxtypes.h	/^    CvSparseNode* node;$/;"	m	struct:CvSparseMatIterator	access:public
node_heap	/usr/include/opencv/ml.h	/^    CvSet* node_heap;$/;"	m	struct:CvDTreeTrainData	access:public
node_risk	/usr/include/opencv/ml.h	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode	access:public
nu	/usr/include/opencv/ml.h	/^    double      nu; \/\/ for CV_SVM_NU_SVC, CV_SVM_ONE_CLASS, and CV_SVM_NU_SVR$/;"	m	struct:CvSVMParams	access:public
num_mix	/usr/include/opencv/cvaux.h	/^    int num_mix;        \/*number of mixtures in this state*\/$/;"	m	struct:CvEHMMState	access:public
num_states	/usr/include/opencv/cvaux.h	/^    int num_states; \/* number of HMM states *\/$/;"	m	struct:CvEHMM	access:public
num_valid	/usr/include/opencv/ml.h	/^    int* num_valid;$/;"	m	struct:CvDTreeNode	access:public
numberOfDisparities	/usr/include/opencv/cv.h	/^    int numberOfDisparities; \/\/ maximum disparity - minimum disparity (> 0)$/;"	m	struct:CvStereoBMState	access:public
numberOfDisparities	/usr/include/opencv/cv.h	/^    int numberOfDisparities;$/;"	m	struct:CvStereoGCState	access:public
nv_heap	/usr/include/opencv/ml.h	/^    CvSet* nv_heap;$/;"	m	struct:CvDTreeTrainData	access:public
obj	/usr/include/opencv/ml.h	/^    double obj;$/;"	m	struct:CvSVMSolutionInfo	access:public
obs	/usr/include/opencv/cvaux.h	/^    float* obs;\/\/consequtive observations$/;"	m	struct:CvImgObsInfo	access:public
obsProb	/usr/include/opencv/cvaux.h	/^    float** obsProb; \/* if level == 0 - array of brob matrices corresponding to hmm$/;"	m	struct:CvEHMM	access:public
obs_info	/usr/include/opencv/cvaux.h	/^CVAPI(void)  cvReleaseObsInfo( CvImgObsInfo** obs_info );$/;"	v
obs_size	/usr/include/opencv/cvaux.h	/^    int obs_size;$/;"	m	struct:CvImgObsInfo	access:public
obs_x	/usr/include/opencv/cvaux.h	/^    int obs_x;$/;"	m	struct:CvImgObsInfo	access:public
obs_y	/usr/include/opencv/cvaux.h	/^    int obs_y;$/;"	m	struct:CvImgObsInfo	access:public
occlusionCost	/usr/include/opencv/cv.h	/^    int occlusionCost;$/;"	m	struct:CvStereoGCState	access:public
offset	/usr/include/opencv/ml.h	/^    int offset;$/;"	m	struct:CvDTreeNode	access:public
on_postprocess	/usr/include/opencv/highgui.h	/^CVAPI(void) cvSetPostprocessFuncWin32( CvWin32WindowCallback on_postprocess );$/;"	v
on_preprocess	/usr/include/opencv/highgui.h	/^CVAPI(void) cvSetPreprocessFuncWin32( CvWin32WindowCallback on_preprocess );$/;"	v
ord	/usr/include/opencv/ml.h	/^        ord;$/;"	m	union:CvDTreeSplit::__anon19	typeref:struct:CvDTreeSplit::__anon19::__anon20	access:public
ord_var_count	/usr/include/opencv/ml.h	/^    int ord_var_count, cat_var_count;$/;"	m	struct:CvDTreeTrainData	access:public
orig_window_size	/usr/include/opencv/cvtypes.h	/^    CvSize orig_window_size;$/;"	m	struct:CvHaarClassifierCascade	access:public
origin	/usr/include/opencv/cxtypes.h	/^    CvPoint  origin;$/;"	m	struct:CvChain	access:public
origin	/usr/include/opencv/cxtypes.h	/^    int  origin;            \/* 0 - top-left origin,$/;"	m	struct:_IplImage	access:public
p	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f p; \/\/ pgruebele: So we do not loose precision, this needs to be float$/;"	m	struct:__anon12	access:public
p	/usr/include/opencv/cvaux.h	/^    CvPoint3D32f p;             \/\/ location of the tracked object$/;"	m	struct:__anon13	access:public
p	/usr/include/opencv/ml.h	/^    double      p; \/\/ for CV_SVM_EPS_SVR$/;"	m	struct:CvSVMParams	access:public
p1	/usr/include/opencv/cvtypes.h	/^    CvPoint p1;            \/* the first point of the binary tree root segment *\/$/;"	m	struct:CvContourTree	access:public
p2	/usr/include/opencv/cvtypes.h	/^    CvPoint p2;            \/* the last point of the binary tree root segment *\/$/;"	m	struct:CvContourTree	access:public
pBD	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobDetector*         pBD;           \/* Selected blob detector module. 					    *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
pBT	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTracker*          pBT;           \/* Selected blob tracking module.					    *\/	$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
pBTA	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTrackAnalysis*    pBTA;          \/* Selected blob trajectory analysis module.                             *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
pBTGen	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTrackGen*         pBTGen;        \/* Selected blob trajectory generator.				    *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
pBTPP	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobTrackPostProc*    pBTPP;         \/* Selected blob trajectory postprocessing module.			    *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
pBlobSeq	/usr/include/opencv/cvvidsurv.hpp	/^    CvBlobSeq*  pBlobSeq;$/;"	m	struct:CvBlobTrack	access:public
pComment	/usr/include/opencv/cvvidsurv.hpp	/^    char*               pComment;$/;"	m	struct:CvDefParam	access:public
pDouble	/usr/include/opencv/cvvidsurv.hpp	/^    double*             pDouble;$/;"	m	struct:CvDefParam	access:public
pFG	/usr/include/opencv/cvvidsurv.hpp	/^    CvFGDetector*           pFG;           \/* FGDetector module. If this field is NULL the Process FG mask is used. *\/$/;"	m	struct:CvBlobTrackerAutoParam1	access:public
pFloat	/usr/include/opencv/cvvidsurv.hpp	/^    float*              pFloat;$/;"	m	struct:CvDefParam	access:public
pInt	/usr/include/opencv/cvvidsurv.hpp	/^    int*                pInt;$/;"	m	struct:CvDefParam	access:public
pName	/usr/include/opencv/cvvidsurv.hpp	/^    char*               pName;$/;"	m	struct:CvDefParam	access:public
pStr	/usr/include/opencv/cvvidsurv.hpp	/^    char**              pStr;$/;"	m	struct:CvDefParam	access:public
param	/usr/include/opencv/cv.hpp	/^    CvMat* param;$/;"	m	struct:CvLevMarq	access:public
param	/usr/include/opencv/cvcompat.h	/^    CvScalar  param[2]; \/* parameters of RNG *\/$/;"	m	struct:CvRandState	access:public
params	/usr/include/opencv/cvaux.h	/^    CvFGDStatModelParams   params;$/;"	m	struct:CvFGDStatModel	access:public
params	/usr/include/opencv/cvaux.h	/^    CvGaussBGStatModelParams   params;    $/;"	m	struct:CvGaussBGModel	access:public
params	/usr/include/opencv/ml.h	/^    CvDTreeParams params;$/;"	m	struct:CvDTreeTrainData	access:public
params	/usr/include/opencv/ml.h	/^    const CvSVMParams* params;$/;"	m	struct:CvSVMKernel	access:public
parent	/usr/include/opencv/cvtypes.h	/^    int parent;$/;"	m	struct:CvHaarStageClassifier	access:public
parent	/usr/include/opencv/cxcore.h	/^CVAPI(CvMemStorage*)  cvCreateChildMemStorage( CvMemStorage* parent );$/;"	v
parent	/usr/include/opencv/cxtypes.h	/^    struct  CvMemStorage* parent; \/* We get new blocks from parent as needed. *\/$/;"	m	struct:CvMemStorage	typeref:struct:CvMemStorage::CvMemStorage	access:public
parent	/usr/include/opencv/ml.h	/^    CvDTreeNode* parent;$/;"	m	struct:CvDTreeNode	access:public
perform_morphing	/usr/include/opencv/cvaux.h	/^    int    perform_morphing;	\/* Number of erode-dilate-erode foreground-blob cleanup iterations.						*\/$/;"	m	struct:CvFGDStatModelParams	access:public
pixel_stat	/usr/include/opencv/cvaux.h	/^    CvBGPixelStat*         pixel_stat;$/;"	m	struct:CvFGDStatModel	access:public
plus_delta	/usr/include/opencv/cxtypes.h	/^    int  plus_delta;$/;"	m	struct:CvLineIterator	access:public
plus_step	/usr/include/opencv/cxtypes.h	/^    int  plus_step;$/;"	m	struct:CvLineIterator	access:public
posit_object	/usr/include/opencv/cv.h	/^CVAPI(void)  cvReleasePOSITObject( CvPOSITObject**  posit_object );$/;"	v
ppFaceTracker	/usr/include/opencv/cvaux.h	/^CVAPI(void) cvReleaseFaceTracker(CvFaceTracker** ppFaceTracker);$/;"	v
preFilterCap	/usr/include/opencv/cv.h	/^    int preFilterCap; \/\/ the output of pre-filtering is clipped by [-preFilterCap,preFilterCap]$/;"	m	struct:CvStereoBMState	access:public
preFilterSize	/usr/include/opencv/cv.h	/^    int preFilterSize; \/\/ averaging window size: ~5x5..21x21$/;"	m	struct:CvStereoBMState	access:public
preFilterType	/usr/include/opencv/cv.h	/^    int preFilterType; \/\/ =CV_STEREO_BM_NORMALIZED_RESPONSE now$/;"	m	struct:CvStereoBMState	access:public
preFilteredImg0	/usr/include/opencv/cv.h	/^    CvMat* preFilteredImg0;$/;"	m	struct:CvStereoBMState	access:public
preFilteredImg1	/usr/include/opencv/cv.h	/^    CvMat* preFilteredImg1;$/;"	m	struct:CvStereoBMState	access:public
prev	/usr/include/opencv/cxtypes.h	/^    struct CvMemBlock*  prev;$/;"	m	struct:CvMemBlock	typeref:struct:CvMemBlock::CvMemBlock	access:public
prev	/usr/include/opencv/cxtypes.h	/^    struct CvSeqBlock*  prev; \/* Previous sequence block.                   *\/$/;"	m	struct:CvSeqBlock	typeref:struct:CvSeqBlock::CvSeqBlock	access:public
prev	/usr/include/opencv/cxtypes.h	/^    struct CvTypeInfo* prev;$/;"	m	struct:CvTypeInfo	typeref:struct:CvTypeInfo::CvTypeInfo	access:public
prev	/usr/include/opencv/ml.h	/^    CvSVMKernelRow* prev;$/;"	m	struct:CvSVMKernelRow	access:public
prevErrNorm	/usr/include/opencv/cv.hpp	/^    double prevErrNorm, errNorm;$/;"	m	struct:CvLevMarq	access:public
prevParam	/usr/include/opencv/cv.hpp	/^    CvMat* prevParam;$/;"	m	struct:CvLevMarq	access:public
prev_frame	/usr/include/opencv/cvaux.h	/^    IplImage*              prev_frame;$/;"	m	struct:CvFGDStatModel	access:public
principal_point	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f principal_point; \/* copied from intrinsics so this structure *\/$/;"	m	struct:__anon14	access:public
principal_point	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f principal_point;$/;"	m	struct:__anon15	access:public
priors	/usr/include/opencv/ml.h	/^    CvMat* priors;$/;"	m	struct:CvDTreeTrainData	access:public
priors	/usr/include/opencv/ml.h	/^    const float* priors;$/;"	m	struct:CvDTreeParams	access:public
priors_mult	/usr/include/opencv/ml.h	/^    CvMat* priors_mult;$/;"	m	struct:CvDTreeTrainData	access:public
probs	/usr/include/opencv/ml.h	/^    const CvMat* probs;$/;"	m	struct:CvEMParams	access:public
process_noise_cov	/usr/include/opencv/cvtypes.h	/^    CvMat* process_noise_cov;   \/* process noise covariance matrix (Q) *\/$/;"	m	struct:CvKalman	access:public
pt	/usr/include/opencv/cv.h	/^    CvPoint2D32f pt;$/;"	m	struct:CvSURFPoint	access:public
pt	/usr/include/opencv/cvtypes.h	/^    CvPoint   pt;$/;"	m	struct:CvChainPtReader	access:public
ptr	/usr/include/opencv/cxcore.h	/^    uchar* ptr[CV_MAX_ARR]; \/* pointers to the array slices *\/$/;"	m	struct:CvNArrayIterator	access:public
ptr	/usr/include/opencv/cxtypes.h	/^        uchar* ptr;$/;"	m	union:CvMat::__anon2	access:public
ptr	/usr/include/opencv/cxtypes.h	/^        uchar* ptr;$/;"	m	union:CvMatND::__anon5	access:public
ptr	/usr/include/opencv/cxtypes.h	/^    CvPoint2D32f* ptr;$/;"	m	struct:CvGraphVtx2D	access:public
ptr	/usr/include/opencv/cxtypes.h	/^    char* ptr;$/;"	m	struct:CvString	access:public
ptr	/usr/include/opencv/cxtypes.h	/^    uchar* ptr;$/;"	m	struct:CvLineIterator	access:public
ptr	/usr/include/opencv/ml.h	/^        uchar** ptr;$/;"	m	union:CvVectors::__anon17	access:public
ptrLeft	/usr/include/opencv/cv.h	/^    CvMat* ptrLeft;$/;"	m	struct:CvStereoGCState	access:public
ptrRight	/usr/include/opencv/cv.h	/^    CvMat* ptrRight;$/;"	m	struct:CvStereoGCState	access:public
quad	/usr/include/opencv/cvaux.h	/^    CvPoint2D32f quad[2][4]; \/* coordinates of destination quadrangle after$/;"	m	struct:CvStereoCamera	access:public
quality	/usr/include/opencv/ml.h	/^    float quality;$/;"	m	struct:CvDTreeSplit	access:public
r	/usr/include/opencv/cvtypes.h	/^        CvRect r;$/;"	m	struct:CvHaarFeature::__anon16	access:public
r	/usr/include/opencv/ml.h	/^    double r;   \/\/ for Solver_NU$/;"	m	struct:CvSVMSolutionInfo	access:public
read	/usr/include/opencv/cxtypes.h	/^    CvReadFunc read;$/;"	m	struct:CvTypeInfo	access:public
reader	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvGetSeqReaderPos( CvSeqReader* reader );$/;"	v
real_window_size	/usr/include/opencv/cvtypes.h	/^    CvSize real_window_size;$/;"	m	struct:CvHaarClassifierCascade	access:public
rect	/usr/include/opencv/cvtypes.h	/^    CvRect rect;    \/* ROI of the component  *\/$/;"	m	struct:CvConnectedComp	access:public
rect	/usr/include/opencv/cvtypes.h	/^    CvRect rect;$/;"	m	struct:CvAvgComp	access:public
rect	/usr/include/opencv/cvtypes.h	/^    } rect[CV_HAAR_FEATURE_MAX];$/;"	m	struct:CvHaarFeature	typeref:struct:CvHaarFeature::__anon16	access:public
refcount	/usr/include/opencv/cxtypes.h	/^    int* refcount;$/;"	m	struct:CvMat	access:public
refcount	/usr/include/opencv/cxtypes.h	/^    int* refcount;$/;"	m	struct:CvMatND	access:public
refcount	/usr/include/opencv/cxtypes.h	/^    int* refcount;$/;"	m	struct:CvSparseMat	access:public
regression_accuracy	/usr/include/opencv/ml.h	/^    float regression_accuracy;$/;"	m	struct:CvDTreeParams	access:public
release	/usr/include/opencv/cxtypes.h	/^    CvReleaseFunc release;$/;"	m	struct:CvTypeInfo	access:public
response	/usr/include/opencv/cvvidsurv.hpp	/^    float response;$/;"	m	struct:CvBlob	access:public
rho	/usr/include/opencv/ml.h	/^    double rho;$/;"	m	struct:CvSVMDecisionFunc	access:public
rho	/usr/include/opencv/ml.h	/^    double rho;$/;"	m	struct:CvSVMSolutionInfo	access:public
right	/usr/include/opencv/cv.h	/^    CvMat* right;$/;"	m	struct:CvStereoGCState	access:public
right	/usr/include/opencv/cvtypes.h	/^    int* right;$/;"	m	struct:CvHaarClassifier	access:public
right	/usr/include/opencv/ml.h	/^    CvDTreeNode* right;$/;"	m	struct:CvDTreeNode	access:public
rng	/usr/include/opencv/ml.h	/^    CvRNG rng;$/;"	m	struct:CvDTreeTrainData	access:public
roi	/usr/include/opencv/cxtypes.h	/^    struct _IplROI *roi;    \/* Image ROI. If NULL, the whole image is selected. *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplROI	access:public
rotMatr	/usr/include/opencv/cvaux.h	/^    float   rotMatr[9];$/;"	m	struct:CvCamera	access:public
rotMatrix	/usr/include/opencv/cvaux.h	/^    float rotMatrix[9];$/;"	m	struct:CvStereoCamera	access:public
rows	/usr/include/opencv/cxtypes.h	/^        int rows;$/;"	m	union:CvMat::__anon3	access:public
rows	/usr/include/opencv/cxtypes.h	/^    int rows;$/;"	m	struct:CvMat	access:public
rp_dw0	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
rp_dw_max	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
rp_dw_min	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
rp_dw_minus	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
rp_dw_plus	/usr/include/opencv/ml.h	/^    double rp_dw0, rp_dw_plus, rp_dw_minus, rp_dw_min, rp_dw_max;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
s	/usr/include/opencv/cvaux.h	/^    int* s; \/\/for selected candidate$/;"	m	struct:CvCliqueFinder	access:public
s	/usr/include/opencv/cxtypes.h	/^        short* s;$/;"	m	union:CvMat::__anon2	access:public
s	/usr/include/opencv/cxtypes.h	/^        short* s;$/;"	m	union:CvMatND::__anon5	access:public
sample_count	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
sample_count	/usr/include/opencv/ml.h	/^    int sample_count;$/;"	m	struct:CvDTreeNode	access:public
scale	/usr/include/opencv/cvtypes.h	/^    double scale;$/;"	m	struct:CvHaarClassifierCascade	access:public
scanner	/usr/include/opencv/cv.h	/^CVAPI(CvSeq*)  cvEndFindContours( CvContourScanner* scanner );$/;"	v
scanner	/usr/include/opencv/cxcore.h	/^CVAPI(int)  cvNextGraphItem( CvGraphScanner* scanner );$/;"	v
scanner	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvReleaseGraphScanner( CvGraphScanner** scanner );$/;"	v
schar	/usr/include/opencv/cxtypes.h	/^typedef signed char schar;$/;"	t
search_modules	/usr/include/opencv/cxtypes.h	/^    int search_modules;$/;"	m	struct:CvPluginFuncInfo	access:public
seq	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvClearSeq( CvSeq* seq );$/;"	v
seq	/usr/include/opencv/cxcore.h	/^CVAPI(void) cvSeqInvert( CvSeq* seq );$/;"	v
seq	/usr/include/opencv/cxtypes.h	/^        CvSeq* seq; \/* sequence (ordered collection of file nodes) *\/$/;"	m	union:CvFileNode::__anon8	access:public
set_header	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvClearSet( CvSet* set_header );$/;"	v
set_num_valid	/usr/include/opencv/ml.h	/^    void set_num_valid(int vi, int n) { if( num_valid ) num_valid[vi] = n; }$/;"	f	struct:CvDTreeNode	access:public	signature:(int vi, int n)
set_postprocess_func	/usr/include/opencv/highgui.h	343;"	d
set_preprocess_func	/usr/include/opencv/highgui.h	342;"	d
shape	/usr/include/opencv/cvvidsurv.hpp	/^    enum {RECT, ELLIPSE} shape;$/;"	m	struct:CvDrawShape	typeref:enum:CvDrawShape::__anon9	access:public
shared	/usr/include/opencv/ml.h	/^    bool shared;$/;"	m	struct:CvDTreeTrainData	access:public
shear	/usr/include/opencv/cxcore.h	/^    float       shear; \/* slope coefficient: 0 - normal, >0 - italic *\/$/;"	m	struct:CvFont	access:public
shift1	/usr/include/opencv/cvvidsurv.hpp	/^    int shift1,shift2;$/;"	m	struct:CvTracksTimePos	access:public
shift2	/usr/include/opencv/cvvidsurv.hpp	/^    int shift1,shift2;$/;"	m	struct:CvTracksTimePos	access:public
sigma	/usr/include/opencv/cvvidsurv.hpp	/^    float   sigma;$/;"	m	struct:CvBlobTrackerParamMS	access:public
signature	/usr/include/opencv/cxtypes.h	/^    int signature;$/;"	m	struct:CvMemStorage	access:public
size	/usr/include/opencv/cv.h	/^    int size;$/;"	m	struct:CvSURFPoint	access:public
size	/usr/include/opencv/cvaux.h	/^    CvSize size;$/;"	m	struct:CvBGCodeBookModel	access:public
size	/usr/include/opencv/cxcore.h	/^    CvSize size; \/* maximal common linear size: { width = size, height = 1 } *\/$/;"	m	struct:CvNArrayIterator	access:public
size	/usr/include/opencv/cxcore.h	/^CVAPI(void*)  cvAlloc( size_t size );$/;"	v
size	/usr/include/opencv/cxtypes.h	/^        int size;$/;"	m	struct:CvMatND::__anon6	access:public
size	/usr/include/opencv/cxtypes.h	/^    CvSize2D32f  size;    \/* Box width and length.                       *\/$/;"	m	struct:CvBox2D	access:public
size	/usr/include/opencv/cxtypes.h	/^    int size[CV_MAX_DIM];$/;"	m	struct:CvSparseMat	access:public
slidingSumBuf	/usr/include/opencv/cv.h	/^    CvMat* slidingSumBuf;$/;"	m	struct:CvStereoBMState	access:public
speckleRange	/usr/include/opencv/cv.h	/^    int speckleRange; \/\/ acceptable range of variation in window$/;"	m	struct:CvStereoBMState	access:public
speckleWindowSize	/usr/include/opencv/cv.h	/^    int speckleWindowSize; \/\/ disparity variation window$/;"	m	struct:CvStereoBMState	access:public
split	/usr/include/opencv/ml.h	/^    CvDTreeSplit* split;$/;"	m	struct:CvDTreeNode	access:public
split_buf	/usr/include/opencv/ml.h	/^    CvMat* split_buf;$/;"	m	struct:CvDTreeTrainData	access:public
split_criteria	/usr/include/opencv/ml.h	/^    int split_criteria;$/;"	m	struct:CvDTreeParams	access:public
split_heap	/usr/include/opencv/ml.h	/^    CvSet* split_heap;$/;"	m	struct:CvDTreeTrainData	access:public
split_point	/usr/include/opencv/ml.h	/^            int split_point;$/;"	m	struct:CvDTreeSplit::__anon19::__anon20	access:public
stack	/usr/include/opencv/cxcore.h	/^    CvSeq*   stack;        \/* the graph vertex stack *\/$/;"	m	struct:CvGraphScanner	access:public
stack	/usr/include/opencv/cxcore.h	/^    int stack[CV_MAX_DIM]; \/* for internal use *\/$/;"	m	struct:CvNArrayIterator	access:public
stage_classifier	/usr/include/opencv/cvtypes.h	/^    CvHaarStageClassifier* stage_classifier;$/;"	m	struct:CvHaarClassifierCascade	access:public
stale	/usr/include/opencv/cvaux.h	/^    int stale;$/;"	m	struct:CvBGCodeBookElem	access:public
start	/usr/include/opencv/cvtypes.h	/^    CvPoint* start; \/* point of the contour where the defect begins *\/$/;"	m	struct:CvConvexityDefect	access:public
start_index	/usr/include/opencv/cxtypes.h	/^    int  start_index, end_index;$/;"	m	struct:CvSlice	access:public
start_index	/usr/include/opencv/cxtypes.h	/^  int    start_index;         \/* Index of the first element in the block +  *\/$/;"	m	struct:CvSeqBlock	access:public
start_step	/usr/include/opencv/ml.h	/^    int start_step;$/;"	m	struct:CvEMParams	access:public
state	/usr/include/opencv/cv.h	/^CVAPI(void) cvReleaseStereoBMState( CvStereoBMState** state );$/;"	v
state	/usr/include/opencv/cv.h	/^CVAPI(void) cvReleaseStereoGCState( CvStereoGCState** state );$/;"	v
state	/usr/include/opencv/cv.hpp	/^    int state;$/;"	m	struct:CvLevMarq	access:public
state	/usr/include/opencv/cvaux.h	/^        CvEHMMState* state; \/* if level == 0 points to real states array,$/;"	m	union:CvEHMM::__anon11	access:public
state	/usr/include/opencv/cvaux.h	/^    int* state;\/* arr of pairs superstate\/state to which observation belong *\/$/;"	m	struct:CvImgObsInfo	access:public
state	/usr/include/opencv/cvcompat.h	/^    CvRNG     state;    \/* RNG state (the current seed and carry)*\/$/;"	m	struct:CvRandState	access:public
state_post	/usr/include/opencv/cvtypes.h	/^    CvMat* state_post;          \/* corrected state (x(k)):$/;"	m	struct:CvKalman	access:public
state_pre	/usr/include/opencv/cvtypes.h	/^    CvMat* state_pre;           \/* predicted state (x'(k)):$/;"	m	struct:CvKalman	access:public
status	/usr/include/opencv/cvaux.h	/^    int status;$/;"	m	struct:CvCliqueFinder	access:public
std_threshold	/usr/include/opencv/cvaux.h	/^    double  bg_threshold, std_threshold, minArea;$/;"	m	struct:CvGaussBGStatModelParams	access:public
step	/usr/include/opencv/cvcompat.h	/^    int     step;                   \/* distance between lines ( in elements of single   *\/$/;"	m	struct:_CvPixelPosition8u	access:public
step	/usr/include/opencv/cvcompat.h	/^    int     step;$/;"	m	struct:_CvPixelPosition32f	access:public
step	/usr/include/opencv/cvcompat.h	/^    int     step;$/;"	m	struct:_CvPixelPosition8s	access:public
step	/usr/include/opencv/cxtypes.h	/^        int step;$/;"	m	struct:CvMatND::__anon6	access:public
step	/usr/include/opencv/cxtypes.h	/^    int step;$/;"	m	struct:CvMat	access:public
step	/usr/include/opencv/ml.h	/^    double step;$/;"	m	struct:CvParamGrid	access:public
step_arr	/usr/include/opencv/cvcompat.h	/^    int     step_arr[3];            \/* array: ( 0, -step, step ). It is used for        *\/$/;"	m	struct:_CvPixelPosition8u	access:public
step_arr	/usr/include/opencv/cvcompat.h	/^    int     step_arr[3];$/;"	m	struct:_CvPixelPosition32f	access:public
step_arr	/usr/include/opencv/cvcompat.h	/^    int     step_arr[3];$/;"	m	struct:_CvPixelPosition8s	access:public
stereoCamera	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvComputeCoeffForStereo(  CvStereoCamera* stereoCamera);$/;"	v
stereoCamera	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvComputeStereoParamsForCameras(CvStereoCamera* stereoCamera);$/;"	v
stereoCamera	/usr/include/opencv/cvaux.h	/^CVAPI(void) icvGetQuadsTransformStruct(  CvStereoCamera* stereoCamera);$/;"	v
stereoparams	/usr/include/opencv/cvaux.h	/^CVAPI(int) icvComputeRestStereoParams(CvStereoCamera *stereoparams);$/;"	v
storage	/usr/include/opencv/cvaux.h	/^    CvMemStorage* storage;$/;"	m	struct:CvBGCodeBookModel	access:public
storage	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvClearMemStorage( CvMemStorage* storage );$/;"	v
storage	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvReleaseMemStorage( CvMemStorage** storage );$/;"	v
str	/usr/include/opencv/cxtypes.h	/^        CvString str; \/* text string *\/$/;"	m	union:CvFileNode::__anon8	access:public
str	/usr/include/opencv/cxtypes.h	/^    CvString str;$/;"	m	struct:CvStringHashNode	access:public
subdiv	/usr/include/opencv/cv.h	/^CVAPI(void)  cvClearSubdivVoronoi2D( CvSubdiv2D* subdiv );$/;"	v
subdiv	/usr/include/opencv/cvaux.h	/^CVAPI(int)   icvSubdiv2DCheck( CvSubdiv2D* subdiv );$/;"	v
subset	/usr/include/opencv/ml.h	/^        int subset[2];$/;"	m	union:CvDTreeSplit::__anon19	access:public
sv_count	/usr/include/opencv/ml.h	/^    int sv_count;$/;"	m	struct:CvSVMDecisionFunc	access:public
sv_index	/usr/include/opencv/ml.h	/^    int* sv_index;$/;"	m	struct:CvSVMDecisionFunc	access:public
svm_type	/usr/include/opencv/ml.h	/^    int         svm_type;$/;"	m	struct:CvSVMParams	access:public
t	/usr/include/opencv/cvaux.h	/^    int t;$/;"	m	struct:CvBGCodeBookModel	access:public
tLastUpdate	/usr/include/opencv/cvaux.h	/^    int tLastUpdate;$/;"	m	struct:CvBGCodeBookElem	access:public
tag	/usr/include/opencv/cxtypes.h	/^    int tag;$/;"	m	struct:CvFileNode	access:public
temp1	/usr/include/opencv/cvtypes.h	/^    CvMat* temp1;               \/* temporary matrices *\/$/;"	m	struct:CvKalman	access:public
temp2	/usr/include/opencv/cvtypes.h	/^    CvMat* temp2;$/;"	m	struct:CvKalman	access:public
temp3	/usr/include/opencv/cvtypes.h	/^    CvMat* temp3;$/;"	m	struct:CvKalman	access:public
temp4	/usr/include/opencv/cvtypes.h	/^    CvMat* temp4;$/;"	m	struct:CvKalman	access:public
temp5	/usr/include/opencv/cvtypes.h	/^    CvMat* temp5;$/;"	m	struct:CvKalman	access:public
temp_storage	/usr/include/opencv/ml.h	/^    CvMemStorage* temp_storage;$/;"	m	struct:CvDTreeTrainData	access:public
term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit; \/\/ termination criteria$/;"	m	struct:CvSVMParams	access:public
term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit;$/;"	m	struct:CvDTreeParams	access:public
term_crit	/usr/include/opencv/ml.h	/^    CvTermCriteria term_crit;$/;"	m	struct:CvEMParams	access:public
textureThreshold	/usr/include/opencv/cv.h	/^    int textureThreshold;  \/\/ the disparity is only computed for pixels$/;"	m	struct:CvStereoBMState	access:public
thickness	/usr/include/opencv/cxcore.h	/^    int         thickness; \/* letters thickness *\/$/;"	m	struct:CvFont	access:public
thresh	/usr/include/opencv/cxtypes.h	/^    float   thresh[CV_MAX_DIM][2];  \/* For uniform histograms.                      *\/$/;"	m	struct:CvHistogram	access:public
thresh2	/usr/include/opencv/cxtypes.h	/^    float** thresh2;                \/* For non-uniform histograms.                  *\/$/;"	m	struct:CvHistogram	access:public
threshold	/usr/include/opencv/cvtypes.h	/^    float threshold;$/;"	m	struct:CvHaarStageClassifier	access:public
threshold	/usr/include/opencv/cvtypes.h	/^    float* threshold;$/;"	m	struct:CvHaarClassifier	access:public
tileInfo	/usr/include/opencv/cxtypes.h	/^    struct _IplTileInfo *tileInfo;  \/* "           " *\/$/;"	m	struct:_IplImage	typeref:struct:_IplImage::_IplTileInfo	access:public
tilted	/usr/include/opencv/cvtypes.h	/^    int  tilted;$/;"	m	struct:CvHaarFeature	access:public
top	/usr/include/opencv/cxtypes.h	/^    CvMemBlock* top;              \/* Current memory block - top of the stack. *\/$/;"	m	struct:CvMemStorage	access:public
top	/usr/include/opencv/cxtypes.h	/^    CvMemBlock* top;$/;"	m	struct:CvMemStoragePos	access:public
topline	/usr/include/opencv/cvcompat.h	/^    float*  topline;$/;"	m	struct:_CvPixelPosition32f	access:public
topline	/usr/include/opencv/cvcompat.h	/^    schar*  topline;$/;"	m	struct:_CvPixelPosition8s	access:public
topline	/usr/include/opencv/cvcompat.h	/^    uchar*  topline;       \/* pointer to the start of the top pixel line       *\/$/;"	m	struct:_CvPixelPosition8u	access:public
train_method	/usr/include/opencv/ml.h	/^    int train_method;$/;"	m	struct:CvANN_MLP_TrainParams	access:public
transP	/usr/include/opencv/cvaux.h	/^    float*  transP;\/*transition probab. matrices for states *\/$/;"	m	struct:CvEHMM	access:public
transVect	/usr/include/opencv/cvaux.h	/^    float   transVect[3]; \/* rotation matrix and transition vector relatively$/;"	m	struct:CvCamera	access:public
transVector	/usr/include/opencv/cvaux.h	/^    float transVector[3];$/;"	m	struct:CvStereoCamera	access:public
transition_matrix	/usr/include/opencv/cvtypes.h	/^    CvMat* transition_matrix;   \/* state transition matrix (A) *\/$/;"	m	struct:CvKalman	access:public
tree_error	/usr/include/opencv/ml.h	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode	access:public
tree_iterator	/usr/include/opencv/cxcore.h	/^CVAPI(void*) cvNextTreeNode( CvTreeNodeIterator* tree_iterator );$/;"	v
tree_iterator	/usr/include/opencv/cxcore.h	/^CVAPI(void*) cvPrevTreeNode( CvTreeNodeIterator* tree_iterator );$/;"	v
tree_risk	/usr/include/opencv/ml.h	/^    double node_risk, tree_risk, tree_error;$/;"	m	struct:CvDTreeNode	access:public
tree_storage	/usr/include/opencv/ml.h	/^    CvMemStorage* tree_storage;$/;"	m	struct:CvDTreeTrainData	access:public
truncate_pruned_tree	/usr/include/opencv/ml.h	/^    bool  truncate_pruned_tree;$/;"	m	struct:CvDTreeParams	access:public
type	/usr/include/opencv/cxtypes.h	/^    int     type;$/;"	m	struct:CvHistogram	access:public
type	/usr/include/opencv/cxtypes.h	/^    int    type;  \/* may be combination of$/;"	m	struct:CvTermCriteria	access:public
type	/usr/include/opencv/cxtypes.h	/^    int type;$/;"	m	struct:CvMat	access:public
type	/usr/include/opencv/cxtypes.h	/^    int type;$/;"	m	struct:CvMatND	access:public
type	/usr/include/opencv/cxtypes.h	/^    int type;$/;"	m	struct:CvSparseMat	access:public
type	/usr/include/opencv/ml.h	/^    int type;$/;"	m	struct:CvVectors	access:public
type_name	/usr/include/opencv/cxtypes.h	/^    const char* type_name;$/;"	m	struct:CvTypeInfo	access:public
u	/usr/include/opencv/cvaux.h	/^    } u;$/;"	m	struct:CvEHMM	typeref:union:CvEHMM::__anon11	access:public
u	/usr/include/opencv/cxtypes.h	/^    uint64 u;$/;"	m	union:Cv64suf	access:public
u	/usr/include/opencv/cxtypes.h	/^    unsigned u;$/;"	m	union:Cv32suf	access:public
uchar	/usr/include/opencv/cxtypes.h	/^typedef unsigned char uchar;$/;"	t
uint64	/usr/include/opencv/cxtypes.h	/^typedef unsigned __int64 uint64;$/;"	t
uint64	/usr/include/opencv/cxtypes.h	/^typedef unsigned long long uint64;$/;"	t
undistortion_map	/usr/include/opencv/cvcompat.h	/^                                CvArr* undistortion_map,$/;"	v
uniquenessRatio	/usr/include/opencv/cv.h	/^    int uniquenessRatio;   \/\/ accept the computed disparity d* only if$/;"	m	struct:CvStereoBMState	access:public
upper_bound_n	/usr/include/opencv/ml.h	/^    double upper_bound_n;$/;"	m	struct:CvSVMSolutionInfo	access:public
upper_bound_p	/usr/include/opencv/ml.h	/^    double upper_bound_p;$/;"	m	struct:CvSVMSolutionInfo	access:public
use_1se_rule	/usr/include/opencv/ml.h	/^    bool  use_1se_rule;$/;"	m	struct:CvDTreeParams	access:public
use_surrogates	/usr/include/opencv/ml.h	/^    bool  use_surrogates;$/;"	m	struct:CvDTreeParams	access:public
ushort	/usr/include/opencv/cxtypes.h	/^typedef unsigned short ushort;$/;"	t
v	/usr/include/opencv/cvaux.h	/^    uchar          v[3];$/;"	m	struct:CvBGPixelCStatTable	access:public
v	/usr/include/opencv/cvaux.h	/^    uchar          v[6];$/;"	m	struct:CvBGPixelCCStatTable	access:public
val	/usr/include/opencv/cxtypes.h	/^    double val[4];$/;"	m	struct:CvScalar	access:public
val	/usr/include/opencv/ml.h	/^    float val;$/;"	m	struct:CvPair32s32f	access:public
valid	/usr/include/opencv/cvaux.h	/^    CvBool valid;$/;"	m	struct:__anon14	access:public
valoffset	/usr/include/opencv/cxtypes.h	/^    int valoffset;$/;"	m	struct:CvSparseMat	access:public
value	/usr/include/opencv/cvtypes.h	/^    CvScalar value; \/* average color of the connected component *\/$/;"	m	struct:CvConnectedComp	access:public
value	/usr/include/opencv/ml.h	/^    double value;$/;"	m	struct:CvDTreeNode	access:public
values	/usr/include/opencv/cxtypes.h	/^    float *values;$/;"	m	struct:_IplConvKernelFP	access:public
values	/usr/include/opencv/cxtypes.h	/^    int *values;$/;"	m	struct:_IplConvKernel	access:public
var_all	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
var_count	/usr/include/opencv/ml.h	/^    int sample_count, var_all, var_count, max_c_count;$/;"	m	struct:CvDTreeTrainData	access:public
var_idx	/usr/include/opencv/ml.h	/^    CvMat* var_idx;$/;"	m	struct:CvDTreeTrainData	access:public
var_idx	/usr/include/opencv/ml.h	/^    int var_idx;$/;"	m	struct:CvDTreeSplit	access:public
var_type	/usr/include/opencv/ml.h	/^    CvMat* var_type; \/\/ i-th element =$/;"	m	struct:CvDTreeTrainData	access:public
variance	/usr/include/opencv/cvaux.h	/^    double      variance[CV_BGFG_MOG_NCOLORS];$/;"	m	struct:CvGaussBGValues	access:public
variance_init	/usr/include/opencv/cvaux.h	/^    double  weight_init, variance_init;$/;"	m	struct:CvGaussBGStatModelParams	access:public
version	/usr/include/opencv/cxtypes.h	/^    const char* version;$/;"	m	struct:CvModuleInfo	access:public
vertex_weights	/usr/include/opencv/cvaux.h	/^    float* vertex_weights;$/;"	m	struct:CvCliqueFinder	access:public
vscale	/usr/include/opencv/cxcore.h	/^    float       hscale, vscale;$/;"	m	struct:CvFont	access:public
vtx	/usr/include/opencv/cxcore.h	/^    CvGraphVtx* vtx;       \/* current graph vertex (or current edge origin) *\/$/;"	m	struct:CvGraphScanner	access:public
vtxBuf	/usr/include/opencv/cv.h	/^    CvMat* vtxBuf;$/;"	m	struct:CvStereoGCState	access:public
w	/usr/include/opencv/cvvidsurv.hpp	/^    float   w,h; \/* blob sizes      *\/$/;"	m	struct:CvBlob	access:public
warpSize	/usr/include/opencv/cvaux.h	/^    CvSize warpSize;$/;"	m	struct:CvStereoCamera	access:public
weak_count	/usr/include/opencv/ml.h	/^    int weak_count;$/;"	m	struct:CvDTreeParams	access:public
weight	/usr/include/opencv/cvaux.h	/^    double      weight;$/;"	m	struct:CvGaussBGValues	access:public
weight	/usr/include/opencv/cvaux.h	/^    float* weight;      \/*array of mixture weights. Summ of all weights in state is 1. *\/$/;"	m	struct:CvEHMMState	access:public
weight	/usr/include/opencv/cvtypes.h	/^        float weight;$/;"	m	struct:CvHaarFeature::__anon16	access:public
weight_init	/usr/include/opencv/cvaux.h	/^    double  weight_init, variance_init;$/;"	m	struct:CvGaussBGStatModelParams	access:public
weight_trim_rate	/usr/include/opencv/ml.h	/^    double weight_trim_rate;$/;"	m	struct:CvDTreeParams	access:public
weighted	/usr/include/opencv/cvaux.h	/^    int weighted;$/;"	m	struct:CvCliqueFinder	access:public
weighted_edges	/usr/include/opencv/cvaux.h	/^    int weighted_edges;    $/;"	m	struct:CvCliqueFinder	access:public
weights	/usr/include/opencv/ml.h	/^    const CvMat* weights;$/;"	m	struct:CvEMParams	access:public
width	/usr/include/opencv/cvaux.h	/^    float width;$/;"	m	struct:CvLCMEdge	access:public
width	/usr/include/opencv/cvcompat.h	/^    int     width;                  \/* width of the image  ( in pixels )                *\/$/;"	m	struct:_CvPixelPosition8u	access:public
width	/usr/include/opencv/cvcompat.h	/^    int     width;$/;"	m	struct:_CvPixelPosition32f	access:public
width	/usr/include/opencv/cvcompat.h	/^    int     width;$/;"	m	struct:_CvPixelPosition8s	access:public
width	/usr/include/opencv/cxtypes.h	/^        int width;$/;"	m	union:CvMat::__anon4	access:public
width	/usr/include/opencv/cxtypes.h	/^    float width;$/;"	m	struct:CvSize2D32f	access:public
width	/usr/include/opencv/cxtypes.h	/^    int  width;             \/* Image width in pixels.                           *\/$/;"	m	struct:_IplImage	access:public
width	/usr/include/opencv/cxtypes.h	/^    int  width;$/;"	m	struct:_IplROI	access:public
width	/usr/include/opencv/cxtypes.h	/^    int width;$/;"	m	struct:CvRect	access:public
width	/usr/include/opencv/cxtypes.h	/^    int width;$/;"	m	struct:__anon7	access:public
widthStep	/usr/include/opencv/cxtypes.h	/^    int  widthStep;         \/* Size of aligned image row in bytes.    *\/$/;"	m	struct:_IplImage	access:public
win_size	/usr/include/opencv/cvaux.h	/^    int     win_size;               \/* = 1\/alpha *\/$/;"	m	struct:CvGaussBGStatModelParams	access:public
write	/usr/include/opencv/cxtypes.h	/^    CvWriteFunc write;$/;"	m	struct:CvTypeInfo	access:public
writer	/usr/include/opencv/cxcore.h	/^CVAPI(CvSeq*)  cvEndWriteSeq( CvSeqWriter* writer );$/;"	v
writer	/usr/include/opencv/cxcore.h	/^CVAPI(void)   cvFlushSeqWriter( CvSeqWriter* writer );$/;"	v
writer	/usr/include/opencv/cxcore.h	/^CVAPI(void)  cvCreateSeqBlock( CvSeqWriter* writer );$/;"	v
writer	/usr/include/opencv/highgui.h	/^CVAPI(void) cvReleaseVideoWriter( CvVideoWriter** writer );$/;"	v
x	/usr/include/opencv/cvcompat.h	/^    int     x;                      \/* current x coordinate ( in pixels )               *\/$/;"	m	struct:_CvPixelPosition8u	access:public
x	/usr/include/opencv/cvcompat.h	/^    int     x;$/;"	m	struct:_CvPixelPosition32f	access:public
x	/usr/include/opencv/cvcompat.h	/^    int     x;$/;"	m	struct:_CvPixelPosition8s	access:public
x	/usr/include/opencv/cvvidsurv.hpp	/^    float   x,y; \/* blob position   *\/$/;"	m	struct:CvBlob	access:public
x	/usr/include/opencv/cxtypes.h	/^    double x;$/;"	m	struct:CvPoint2D64f	access:public
x	/usr/include/opencv/cxtypes.h	/^    double x;$/;"	m	struct:CvPoint3D64f	access:public
x	/usr/include/opencv/cxtypes.h	/^    float x;$/;"	m	struct:CvPoint2D32f	access:public
x	/usr/include/opencv/cxtypes.h	/^    float x;$/;"	m	struct:CvPoint3D32f	access:public
x	/usr/include/opencv/cxtypes.h	/^    int x;$/;"	m	struct:CvPoint	access:public
x	/usr/include/opencv/cxtypes.h	/^    int x;$/;"	m	struct:CvRect	access:public
xOffset	/usr/include/opencv/cxtypes.h	/^    int  xOffset;$/;"	m	struct:_IplROI	access:public
y	/usr/include/opencv/cvvidsurv.hpp	/^    float   x,y; \/* blob position   *\/$/;"	m	struct:CvBlob	access:public
y	/usr/include/opencv/cxtypes.h	/^    double y;$/;"	m	struct:CvPoint2D64f	access:public
y	/usr/include/opencv/cxtypes.h	/^    double y;$/;"	m	struct:CvPoint3D64f	access:public
y	/usr/include/opencv/cxtypes.h	/^    float y;$/;"	m	struct:CvPoint2D32f	access:public
y	/usr/include/opencv/cxtypes.h	/^    float y;$/;"	m	struct:CvPoint3D32f	access:public
y	/usr/include/opencv/cxtypes.h	/^    int y;$/;"	m	struct:CvPoint	access:public
y	/usr/include/opencv/cxtypes.h	/^    int y;$/;"	m	struct:CvRect	access:public
yOffset	/usr/include/opencv/cxtypes.h	/^    int  yOffset;$/;"	m	struct:_IplROI	access:public
z	/usr/include/opencv/cxtypes.h	/^    double z;$/;"	m	struct:CvPoint3D64f	access:public
z	/usr/include/opencv/cxtypes.h	/^    float z;$/;"	m	struct:CvPoint3D32f	access:public
